
data_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d788  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca8  0800d988  0800d988  0000e988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e630  0800e630  000101ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e630  0800e630  0000f630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e638  0800e638  000101ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e638  0800e638  0000f638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e63c  0800e63c  0000f63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800e640  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  0800e6ac  0001006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  0800e74c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005dac  200001ac  0800e7ec  000101ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005f58  0800e7ec  00010f58  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000101ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006d551  00000000  00000000  000101da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006bbe  00000000  00000000  0007d72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004f48  00000000  00000000  000842f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003c58  00000000  00000000  00089238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fa2c  00000000  00000000  0008ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00038262  00000000  00000000  000bc8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00131499  00000000  00000000  000f4b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00225fb7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00016598  00000000  00000000  00225ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  0023c594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d970 	.word	0x0800d970

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	0800d970 	.word	0x0800d970

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <delay_us>:
#include "cmsis_os.h"
#include <stdio.h>
static TIM_HandleTypeDef* dht_htim;
static const uint16_t dht_timeout = 1000;

static void delay_us(uint16_t us) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(dht_htim, 0);
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <delay_us+0x34>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(dht_htim) < us);
 8000620:	bf00      	nop
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <delay_us+0x34>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f8      	bcc.n	8000622 <delay_us+0x16>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200001c8 	.word	0x200001c8

08000644 <DHT11_Init>:

void DHT11_Init(TIM_HandleTypeDef *htim) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    dht_htim = htim;
 800064c:	4a09      	ldr	r2, [pc, #36]	@ (8000674 <DHT11_Init+0x30>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start(dht_htim);
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <DHT11_Init+0x30>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fd26 	bl	80050a8 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2180      	movs	r1, #128	@ 0x80
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <DHT11_Init+0x34>)
 8000662:	f002 fd67 	bl	8003134 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000666:	2064      	movs	r0, #100	@ 0x64
 8000668:	f001 fb1a 	bl	8001ca0 <HAL_Delay>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001c8 	.word	0x200001c8
 8000678:	40020800 	.word	0x40020800

0800067c <DHT11_Wakeup>:

// In dht11.c
void DHT11_Wakeup(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
    uint8_t temp, hum;
    printf("Waking up DHT11 sensor...\r\n");
 8000682:	481d      	ldr	r0, [pc, #116]	@ (80006f8 <DHT11_Wakeup+0x7c>)
 8000684:	f00c f8dc 	bl	800c840 <puts>
    for (int i = 0; i < 5; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	e025      	b.n	80006da <DHT11_Wakeup+0x5e>
    {
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); // Toggle LED on each attempt
 800068e:	2101      	movs	r1, #1
 8000690:	481a      	ldr	r0, [pc, #104]	@ (80006fc <DHT11_Wakeup+0x80>)
 8000692:	f002 fd68 	bl	8003166 <HAL_GPIO_TogglePin>
        if (DHT11_Read_Data(&temp, &hum) == DHT11_OK)
 8000696:	1cba      	adds	r2, r7, #2
 8000698:	1cfb      	adds	r3, r7, #3
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f835 	bl	800070c <DHT11_Read_Data>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10c      	bne.n	80006c2 <DHT11_Wakeup+0x46>
        {
            printf("DHT11 is awake! Temp=%dC, Hum=%d%%\r\n", temp, hum);
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	78bb      	ldrb	r3, [r7, #2]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <DHT11_Wakeup+0x84>)
 80006b2:	f00c f85d 	bl	800c770 <iprintf>
            HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET); // Turn LED ON solid on success
 80006b6:	2201      	movs	r2, #1
 80006b8:	2101      	movs	r1, #1
 80006ba:	4810      	ldr	r0, [pc, #64]	@ (80006fc <DHT11_Wakeup+0x80>)
 80006bc:	f002 fd3a 	bl	8003134 <HAL_GPIO_WritePin>
 80006c0:	e016      	b.n	80006f0 <DHT11_Wakeup+0x74>
            return;
        }
        printf("...retry %d\r\n", i + 1);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	480e      	ldr	r0, [pc, #56]	@ (8000704 <DHT11_Wakeup+0x88>)
 80006ca:	f00c f851 	bl	800c770 <iprintf>
        HAL_Delay(250); // Shorter delay for faster blinking
 80006ce:	20fa      	movs	r0, #250	@ 0xfa
 80006d0:	f001 fae6 	bl	8001ca0 <HAL_Delay>
    for (int i = 0; i < 5; i++)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	ddd6      	ble.n	800068e <DHT11_Wakeup+0x12>
    }
    printf("Warning: DHT11 did not respond to wakeup.\r\n");
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <DHT11_Wakeup+0x8c>)
 80006e2:	f00c f8ad 	bl	800c840 <puts>
    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); // Turn LED OFF on failure
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <DHT11_Wakeup+0x80>)
 80006ec:	f002 fd22 	bl	8003134 <HAL_GPIO_WritePin>
}
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	0800d988 	.word	0x0800d988
 80006fc:	40020400 	.word	0x40020400
 8000700:	0800d9a4 	.word	0x0800d9a4
 8000704:	0800d9cc 	.word	0x0800d9cc
 8000708:	0800d9dc 	.word	0x0800d9dc

0800070c <DHT11_Read_Data>:

DHT11_StatusTypeDef DHT11_Read_Data(uint8_t *temperature, uint8_t *humidity) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	@ 0x38
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    uint8_t data_bits[5] = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	711a      	strb	r2, [r3, #4]
    uint16_t loop_counter;
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

    // Check if the scheduler is running
    UBaseType_t schedulerState = xTaskGetSchedulerState();
 8000730:	f00a fde0 	bl	800b2f4 <xTaskGetSchedulerState>
 8000734:	4603      	mov	r3, r0
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28

    GPIO_InitStruct.Pin = DHT11_PIN;
 8000738:	2380      	movs	r3, #128	@ 0x80
 800073a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2302      	movs	r3, #2
 8000742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4877      	ldr	r0, [pc, #476]	@ (800092c <DHT11_Read_Data+0x220>)
 8000750:	f002 fb2c 	bl	8002dac <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	@ 0x80
 8000758:	4874      	ldr	r0, [pc, #464]	@ (800092c <DHT11_Read_Data+0x220>)
 800075a:	f002 fceb 	bl	8003134 <HAL_GPIO_WritePin>
    delay_us(20000);
 800075e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000762:	f7ff ff53 	bl	800060c <delay_us>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	4870      	ldr	r0, [pc, #448]	@ (800092c <DHT11_Read_Data+0x220>)
 800076c:	f002 fce2 	bl	8003134 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	486b      	ldr	r0, [pc, #428]	@ (800092c <DHT11_Read_Data+0x220>)
 8000780:	f002 fb14 	bl	8002dac <HAL_GPIO_Init>

    // --- Enter Critical Section ONLY if scheduler is running ---
    if (schedulerState != taskSCHEDULER_NOT_STARTED) {
 8000784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000786:	2b01      	cmp	r3, #1
 8000788:	d001      	beq.n	800078e <DHT11_Read_Data+0x82>
        taskENTER_CRITICAL();
 800078a:	f00b fc17 	bl	800bfbc <vPortEnterCritical>
    }

    loop_counter = dht_timeout;
 800078e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000792:	86fb      	strh	r3, [r7, #54]	@ 0x36
    while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) if (--loop_counter == 0) { if(schedulerState != taskSCHEDULER_NOT_STARTED) taskEXIT_CRITICAL(); return DHT11_ERROR_TIMEOUT; }
 8000794:	e00c      	b.n	80007b0 <DHT11_Read_Data+0xa4>
 8000796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000798:	3b01      	subs	r3, #1
 800079a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800079c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d106      	bne.n	80007b0 <DHT11_Read_Data+0xa4>
 80007a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d001      	beq.n	80007ac <DHT11_Read_Data+0xa0>
 80007a8:	f00b fc3e 	bl	800c028 <vPortExitCritical>
 80007ac:	2303      	movs	r3, #3
 80007ae:	e0b8      	b.n	8000922 <DHT11_Read_Data+0x216>
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	485e      	ldr	r0, [pc, #376]	@ (800092c <DHT11_Read_Data+0x220>)
 80007b4:	f002 fca6 	bl	8003104 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1eb      	bne.n	8000796 <DHT11_Read_Data+0x8a>
    loop_counter = dht_timeout;
 80007be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) if (--loop_counter == 0) { if(schedulerState != taskSCHEDULER_NOT_STARTED) taskEXIT_CRITICAL(); return DHT11_ERROR_TIMEOUT; }
 80007c4:	e00c      	b.n	80007e0 <DHT11_Read_Data+0xd4>
 80007c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80007c8:	3b01      	subs	r3, #1
 80007ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80007cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d106      	bne.n	80007e0 <DHT11_Read_Data+0xd4>
 80007d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d001      	beq.n	80007dc <DHT11_Read_Data+0xd0>
 80007d8:	f00b fc26 	bl	800c028 <vPortExitCritical>
 80007dc:	2303      	movs	r3, #3
 80007de:	e0a0      	b.n	8000922 <DHT11_Read_Data+0x216>
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	4852      	ldr	r0, [pc, #328]	@ (800092c <DHT11_Read_Data+0x220>)
 80007e4:	f002 fc8e 	bl	8003104 <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0eb      	beq.n	80007c6 <DHT11_Read_Data+0xba>
    loop_counter = dht_timeout;
 80007ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) if (--loop_counter == 0) { if(schedulerState != taskSCHEDULER_NOT_STARTED) taskEXIT_CRITICAL(); return DHT11_ERROR_TIMEOUT; }
 80007f4:	e00c      	b.n	8000810 <DHT11_Read_Data+0x104>
 80007f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80007f8:	3b01      	subs	r3, #1
 80007fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80007fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d106      	bne.n	8000810 <DHT11_Read_Data+0x104>
 8000802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000804:	2b01      	cmp	r3, #1
 8000806:	d001      	beq.n	800080c <DHT11_Read_Data+0x100>
 8000808:	f00b fc0e 	bl	800c028 <vPortExitCritical>
 800080c:	2303      	movs	r3, #3
 800080e:	e088      	b.n	8000922 <DHT11_Read_Data+0x216>
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	4846      	ldr	r0, [pc, #280]	@ (800092c <DHT11_Read_Data+0x220>)
 8000814:	f002 fc76 	bl	8003104 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1eb      	bne.n	80007f6 <DHT11_Read_Data+0xea>

    // --- Exit Critical Section ---
    if (schedulerState != taskSCHEDULER_NOT_STARTED) {
 800081e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000820:	2b01      	cmp	r3, #1
 8000822:	d001      	beq.n	8000828 <DHT11_Read_Data+0x11c>
        taskEXIT_CRITICAL();
 8000824:	f00b fc00 	bl	800c028 <vPortExitCritical>
    }

    for (int i = 0; i < 40; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	633b      	str	r3, [r7, #48]	@ 0x30
 800082c:	e056      	b.n	80008dc <DHT11_Read_Data+0x1d0>
        loop_counter = dht_timeout;
 800082e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000832:	86fb      	strh	r3, [r7, #54]	@ 0x36
        while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) if (--loop_counter == 0) return DHT11_ERROR_TIMEOUT;
 8000834:	e007      	b.n	8000846 <DHT11_Read_Data+0x13a>
 8000836:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000838:	3b01      	subs	r3, #1
 800083a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800083c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <DHT11_Read_Data+0x13a>
 8000842:	2303      	movs	r3, #3
 8000844:	e06d      	b.n	8000922 <DHT11_Read_Data+0x216>
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	4838      	ldr	r0, [pc, #224]	@ (800092c <DHT11_Read_Data+0x220>)
 800084a:	f002 fc5b 	bl	8003104 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f0      	beq.n	8000836 <DHT11_Read_Data+0x12a>

        uint16_t high_pulse_time = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        loop_counter = dht_timeout;
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 800085e:	e00d      	b.n	800087c <DHT11_Read_Data+0x170>
            high_pulse_time++;
 8000860:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000862:	3301      	adds	r3, #1
 8000864:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            delay_us(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff fed0 	bl	800060c <delay_us>
            if (--loop_counter == 0) return DHT11_ERROR_TIMEOUT;
 800086c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800086e:	3b01      	subs	r3, #1
 8000870:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000872:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <DHT11_Read_Data+0x170>
 8000878:	2303      	movs	r3, #3
 800087a:	e052      	b.n	8000922 <DHT11_Read_Data+0x216>
        while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	482b      	ldr	r0, [pc, #172]	@ (800092c <DHT11_Read_Data+0x220>)
 8000880:	f002 fc40 	bl	8003104 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1ea      	bne.n	8000860 <DHT11_Read_Data+0x154>
        }
        if (high_pulse_time > 40) data_bits[i/8] |= (1 << (7 - (i % 8)));
 800088a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800088c:	2b28      	cmp	r3, #40	@ 0x28
 800088e:	d922      	bls.n	80008d6 <DHT11_Read_Data+0x1ca>
 8000890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000892:	2b00      	cmp	r3, #0
 8000894:	da00      	bge.n	8000898 <DHT11_Read_Data+0x18c>
 8000896:	3307      	adds	r3, #7
 8000898:	10db      	asrs	r3, r3, #3
 800089a:	461a      	mov	r2, r3
 800089c:	f102 0338 	add.w	r3, r2, #56	@ 0x38
 80008a0:	443b      	add	r3, r7
 80008a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80008a6:	b259      	sxtb	r1, r3
 80008a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008aa:	4258      	negs	r0, r3
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	f000 0007 	and.w	r0, r0, #7
 80008b4:	bf58      	it	pl
 80008b6:	4243      	negpl	r3, r0
 80008b8:	f1c3 0307 	rsb	r3, r3, #7
 80008bc:	2001      	movs	r0, #1
 80008be:	fa00 f303 	lsl.w	r3, r0, r3
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	430b      	orrs	r3, r1
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	b2d9      	uxtb	r1, r3
 80008ca:	f102 0338 	add.w	r3, r2, #56	@ 0x38
 80008ce:	443b      	add	r3, r7
 80008d0:	460a      	mov	r2, r1
 80008d2:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (int i = 0; i < 40; i++) {
 80008d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008d8:	3301      	adds	r3, #1
 80008da:	633b      	str	r3, [r7, #48]	@ 0x30
 80008dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008de:	2b27      	cmp	r3, #39	@ 0x27
 80008e0:	dda5      	ble.n	800082e <DHT11_Read_Data+0x122>
    }

    uint8_t sum = data_bits[0] + data_bits[1] + data_bits[2] + data_bits[3];
 80008e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80008ea:	4413      	add	r3, r2
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80008f2:	4413      	add	r3, r2
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80008fa:	4413      	add	r3, r2
 80008fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (sum == data_bits[4]) {
 8000900:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000904:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000908:	429a      	cmp	r2, r3
 800090a:	d109      	bne.n	8000920 <DHT11_Read_Data+0x214>
        *humidity = data_bits[0];
 800090c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	701a      	strb	r2, [r3, #0]
        *temperature = data_bits[2];
 8000914:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	701a      	strb	r2, [r3, #0]
        return DHT11_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	e000      	b.n	8000922 <DHT11_Read_Data+0x216>
    }
    return DHT11_ERROR_CHECKSUM;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	3738      	adds	r7, #56	@ 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40020800 	.word	0x40020800

08000930 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */
// Helper function to map a value from one range to another
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	69b9      	ldr	r1, [r7, #24]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	1a8a      	subs	r2, r1, r2
 800094a:	fb03 f202 	mul.w	r2, r3, r2
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1acb      	subs	r3, r1, r3
 8000954:	fb92 f2f3 	sdiv	r2, r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	4413      	add	r3, r2
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <u8g2_i2c_byte_cb>:
/* USER CODE END 0 */
/* USER CODE BEGIN 0 */
uint8_t u8g2_i2c_byte_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af02      	add	r7, sp, #8
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	460b      	mov	r3, r1
 8000974:	72fb      	strb	r3, [r7, #11]
 8000976:	4613      	mov	r3, r2
 8000978:	72bb      	strb	r3, [r7, #10]
    static uint8_t buffer[32];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg) {
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	3b14      	subs	r3, #20
 800097e:	2b0c      	cmp	r3, #12
 8000980:	d84b      	bhi.n	8000a1a <u8g2_i2c_byte_cb+0xb2>
 8000982:	a201      	add	r2, pc, #4	@ (adr r2, 8000988 <u8g2_i2c_byte_cb+0x20>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	080009ed 	.word	0x080009ed
 800098c:	08000a1b 	.word	0x08000a1b
 8000990:	08000a1b 	.word	0x08000a1b
 8000994:	080009bd 	.word	0x080009bd
 8000998:	080009f5 	.word	0x080009f5
 800099c:	080009fd 	.word	0x080009fd
 80009a0:	08000a1b 	.word	0x08000a1b
 80009a4:	08000a1b 	.word	0x08000a1b
 80009a8:	08000a1b 	.word	0x08000a1b
 80009ac:	08000a1b 	.word	0x08000a1b
 80009b0:	08000a1b 	.word	0x08000a1b
 80009b4:	08000a1b 	.word	0x08000a1b
 80009b8:	08000a1f 	.word	0x08000a1f
    case U8X8_MSG_BYTE_SEND:
        data = (uint8_t *)arg_ptr;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	617b      	str	r3, [r7, #20]
        while (arg_int > 0) {
 80009c0:	e010      	b.n	80009e4 <u8g2_i2c_byte_cb+0x7c>
            buffer[buf_idx++] = *data;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <u8g2_i2c_byte_cb+0xc4>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	b2d1      	uxtb	r1, r2
 80009ca:	4a18      	ldr	r2, [pc, #96]	@ (8000a2c <u8g2_i2c_byte_cb+0xc4>)
 80009cc:	7011      	strb	r1, [r2, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	7819      	ldrb	r1, [r3, #0]
 80009d4:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <u8g2_i2c_byte_cb+0xc8>)
 80009d6:	5499      	strb	r1, [r3, r2]
            data++;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	3301      	adds	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
            arg_int--;
 80009de:	7abb      	ldrb	r3, [r7, #10]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0) {
 80009e4:	7abb      	ldrb	r3, [r7, #10]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1eb      	bne.n	80009c2 <u8g2_i2c_byte_cb+0x5a>
        }
        break;
 80009ea:	e019      	b.n	8000a20 <u8g2_i2c_byte_cb+0xb8>
    case U8X8_MSG_BYTE_INIT:
        buf_idx = 0;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <u8g2_i2c_byte_cb+0xc4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
        break;
 80009f2:	e015      	b.n	8000a20 <u8g2_i2c_byte_cb+0xb8>
    case U8X8_MSG_BYTE_SET_DC:
        break;
    case U8X8_MSG_BYTE_START_TRANSFER:
        buf_idx = 0;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <u8g2_i2c_byte_cb+0xc4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
        break;
 80009fa:	e011      	b.n	8000a20 <u8g2_i2c_byte_cb+0xb8>
    case U8X8_MSG_BYTE_END_TRANSFER:
        if (HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8), buffer, buf_idx, 100) != HAL_OK) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <u8g2_i2c_byte_cb+0xc4>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2364      	movs	r3, #100	@ 0x64
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	4a07      	ldr	r2, [pc, #28]	@ (8000a30 <u8g2_i2c_byte_cb+0xc8>)
 8000a12:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <u8g2_i2c_byte_cb+0xcc>)
 8000a14:	f002 fc5e 	bl	80032d4 <HAL_I2C_Master_Transmit>
            // You could add error handling here
        }
        break;
 8000a18:	e002      	b.n	8000a20 <u8g2_i2c_byte_cb+0xb8>
    default:
        return 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e001      	b.n	8000a22 <u8g2_i2c_byte_cb+0xba>
        break;
 8000a1e:	bf00      	nop
    }
    return 1;
 8000a20:	2301      	movs	r3, #1
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200009a8 	.word	0x200009a8
 8000a30:	200009ac 	.word	0x200009ac
 8000a34:	200002fc 	.word	0x200002fc

08000a38 <u8g2_gpio_and_delay_stm32>:

uint8_t u8g2_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	72fb      	strb	r3, [r7, #11]
 8000a46:	4613      	mov	r3, r2
 8000a48:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8000a4a:	7afb      	ldrb	r3, [r7, #11]
 8000a4c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000a4e:	d00a      	beq.n	8000a66 <u8g2_gpio_and_delay_stm32+0x2e>
 8000a50:	2b2d      	cmp	r3, #45	@ 0x2d
 8000a52:	dc14      	bgt.n	8000a7e <u8g2_gpio_and_delay_stm32+0x46>
 8000a54:	2b28      	cmp	r3, #40	@ 0x28
 8000a56:	d017      	beq.n	8000a88 <u8g2_gpio_and_delay_stm32+0x50>
 8000a58:	2b29      	cmp	r3, #41	@ 0x29
 8000a5a:	d110      	bne.n	8000a7e <u8g2_gpio_and_delay_stm32+0x46>
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
        // Initialize GPIOs here if needed
        break;
    case U8X8_MSG_DELAY_MILLI:
        osDelay(arg_int);
 8000a5c:	7abb      	ldrb	r3, [r7, #10]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f008 f94c 	bl	8008cfc <osDelay>
        break;
 8000a64:	e011      	b.n	8000a8a <u8g2_gpio_and_delay_stm32+0x52>
    case U8X8_MSG_DELAY_I2C:
        // A short delay for I2C
        for (uint16_t n = 0; n < 400; n++) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	82fb      	strh	r3, [r7, #22]
 8000a6a:	e003      	b.n	8000a74 <u8g2_gpio_and_delay_stm32+0x3c>
            __NOP();
 8000a6c:	bf00      	nop
        for (uint16_t n = 0; n < 400; n++) {
 8000a6e:	8afb      	ldrh	r3, [r7, #22]
 8000a70:	3301      	adds	r3, #1
 8000a72:	82fb      	strh	r3, [r7, #22]
 8000a74:	8afb      	ldrh	r3, [r7, #22]
 8000a76:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000a7a:	d3f7      	bcc.n	8000a6c <u8g2_gpio_and_delay_stm32+0x34>
        }
        break;
 8000a7c:	e005      	b.n	8000a8a <u8g2_gpio_and_delay_stm32+0x52>
    default:
        u8x8_SetGPIOResult(u8x8, 1);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        break;
 8000a86:	e000      	b.n	8000a8a <u8g2_gpio_and_delay_stm32+0x52>
        break;
 8000a88:	bf00      	nop
    }
    return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_write>:
// This function retargets printf to send data over USART3
int _write(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <_write+0x28>)
 8000aac:	f004 feb4 	bl	8005818 <HAL_UART_Transmit>
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000039c 	.word	0x2000039c

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f001 f8bf 	bl	8001c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f84e 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f000 fa32 	bl	8000f34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ad0:	f000 f8bc 	bl	8000c4c <MX_ADC1_Init>
  MX_ETH_Init();
 8000ad4:	f000 f90c 	bl	8000cf0 <MX_ETH_Init>
  MX_I2C1_Init();
 8000ad8:	f000 f958 	bl	8000d8c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000adc:	f000 f9cc 	bl	8000e78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ae0:	f000 f9fa 	bl	8000ed8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000ae4:	f000 f992 	bl	8000e0c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  DHT11_Init(&htim7);
 8000ae8:	4814      	ldr	r0, [pc, #80]	@ (8000b3c <main+0x7c>)
 8000aea:	f7ff fdab 	bl	8000644 <DHT11_Init>
  DHT11_Wakeup();
 8000aee:	f7ff fdc5 	bl	800067c <DHT11_Wakeup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af2:	f007 ffcb 	bl	8008a8c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2cMutex */
  i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 8000af6:	4812      	ldr	r0, [pc, #72]	@ (8000b40 <main+0x80>)
 8000af8:	f008 f96e 	bl	8008dd8 <osMutexNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <main+0x84>)
 8000b00:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensorDataQueue */
  sensorDataQueueHandle = osMessageQueueNew (5, 12, &sensorDataQueue_attributes);
 8000b02:	4a11      	ldr	r2, [pc, #68]	@ (8000b48 <main+0x88>)
 8000b04:	210c      	movs	r1, #12
 8000b06:	2005      	movs	r0, #5
 8000b08:	f008 faae 	bl	8009068 <osMessageQueueNew>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <main+0x8c>)
 8000b10:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(StartSensorTask, NULL, &sensorTask_attributes);
 8000b12:	4a0f      	ldr	r2, [pc, #60]	@ (8000b50 <main+0x90>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	480f      	ldr	r0, [pc, #60]	@ (8000b54 <main+0x94>)
 8000b18:	f008 f84a 	bl	8008bb0 <osThreadNew>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <main+0x98>)
 8000b20:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <main+0x9c>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <main+0xa0>)
 8000b28:	f008 f842 	bl	8008bb0 <osThreadNew>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <main+0xa4>)
 8000b30:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b32:	f007 ffdf 	bl	8008af4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <main+0x76>
 8000b3a:	bf00      	nop
 8000b3c:	20000350 	.word	0x20000350
 8000b40:	0800db28 	.word	0x0800db28
 8000b44:	20000910 	.word	0x20000910
 8000b48:	0800db10 	.word	0x0800db10
 8000b4c:	2000090c 	.word	0x2000090c
 8000b50:	0800dac8 	.word	0x0800dac8
 8000b54:	0800109d 	.word	0x0800109d
 8000b58:	20000904 	.word	0x20000904
 8000b5c:	0800daec 	.word	0x0800daec
 8000b60:	080011cd 	.word	0x080011cd
 8000b64:	20000908 	.word	0x20000908

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	@ 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	2234      	movs	r2, #52	@ 0x34
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00b ff64 	bl	800ca44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b8c:	f003 f8a6 	bl	8003cdc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	4b2c      	ldr	r3, [pc, #176]	@ (8000c44 <SystemClock_Config+0xdc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a2b      	ldr	r2, [pc, #172]	@ (8000c44 <SystemClock_Config+0xdc>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <SystemClock_Config+0xdc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <SystemClock_Config+0xe0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb0:	4a25      	ldr	r2, [pc, #148]	@ (8000c48 <SystemClock_Config+0xe0>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <SystemClock_Config+0xe0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bc8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bdc:	2360      	movs	r3, #96	@ 0x60
 8000bde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f8d3 	bl	8003d9c <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bfc:	f000 fc40 	bl	8001480 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c00:	f003 f87c 	bl	8003cfc <HAL_PWREx_EnableOverDrive>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c0a:	f000 fc39 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c12:	2302      	movs	r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2103      	movs	r1, #3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f003 fb64 	bl	80042f8 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c36:	f000 fc23 	bl	8001480 <Error_Handler>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3750      	adds	r7, #80	@ 0x50
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c60:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <MX_ADC1_Init+0x9c>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <MX_ADC1_Init+0xa0>)
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000cae:	f001 f81b 	bl	8001ce8 <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cb8:	f000 fbe2 	bl	8001480 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_ADC1_Init+0x98>)
 8000cce:	f001 f9e9 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f000 fbd2 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000204 	.word	0x20000204
 8000ce8:	40012000 	.word	0x40012000
 8000cec:	0f000001 	.word	0x0f000001

08000cf0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_ETH_Init+0x84>)
 8000cf6:	4a20      	ldr	r2, [pc, #128]	@ (8000d78 <MX_ETH_Init+0x88>)
 8000cf8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cfa:	4b20      	ldr	r3, [pc, #128]	@ (8000d7c <MX_ETH_Init+0x8c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_ETH_Init+0x8c>)
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_ETH_Init+0x8c>)
 8000d08:	22e1      	movs	r2, #225	@ 0xe1
 8000d0a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_ETH_Init+0x8c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_ETH_Init+0x8c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_ETH_Init+0x8c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_ETH_Init+0x84>)
 8000d20:	4a16      	ldr	r2, [pc, #88]	@ (8000d7c <MX_ETH_Init+0x8c>)
 8000d22:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_ETH_Init+0x84>)
 8000d26:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d2a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_ETH_Init+0x84>)
 8000d2e:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <MX_ETH_Init+0x90>)
 8000d30:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_ETH_Init+0x84>)
 8000d34:	4a13      	ldr	r2, [pc, #76]	@ (8000d84 <MX_ETH_Init+0x94>)
 8000d36:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_ETH_Init+0x84>)
 8000d3a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000d3e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <MX_ETH_Init+0x84>)
 8000d42:	f001 fce5 	bl	8002710 <HAL_ETH_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d4c:	f000 fb98 	bl	8001480 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d50:	2238      	movs	r2, #56	@ 0x38
 8000d52:	2100      	movs	r1, #0
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <MX_ETH_Init+0x98>)
 8000d56:	f00b fe75 	bl	800ca44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_ETH_Init+0x98>)
 8000d5c:	2221      	movs	r2, #33	@ 0x21
 8000d5e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_ETH_Init+0x98>)
 8000d62:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000d66:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <MX_ETH_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000024c 	.word	0x2000024c
 8000d78:	40028000 	.word	0x40028000
 8000d7c:	200009cc 	.word	0x200009cc
 8000d80:	2000010c 	.word	0x2000010c
 8000d84:	2000006c 	.word	0x2000006c
 8000d88:	200001cc 	.word	0x200001cc

08000d8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <MX_I2C1_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <MX_I2C1_Init+0x7c>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc6:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000dc8:	f002 f9e8 	bl	800319c <HAL_I2C_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dd2:	f000 fb55 	bl	8001480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000dda:	f002 fdad 	bl	8003938 <HAL_I2CEx_ConfigAnalogFilter>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000de4:	f000 fb4c 	bl	8001480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000de8:	2100      	movs	r1, #0
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_I2C1_Init+0x74>)
 8000dec:	f002 fdef 	bl	80039ce <HAL_I2CEx_ConfigDigitalFilter>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000df6:	f000 fb43 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200002fc 	.word	0x200002fc
 8000e04:	40005400 	.word	0x40005400
 8000e08:	20303e5d 	.word	0x20303e5d

08000e0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_TIM7_Init+0x64>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	@ (8000e74 <MX_TIM7_Init+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000e22:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <MX_TIM7_Init+0x64>)
 8000e24:	225f      	movs	r2, #95	@ 0x5f
 8000e26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_TIM7_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <MX_TIM7_Init+0x64>)
 8000e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e34:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_TIM7_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <MX_TIM7_Init+0x64>)
 8000e3e:	f004 f8db 	bl	8004ff8 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000e48:	f000 fb1a 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_TIM7_Init+0x64>)
 8000e5a:	f004 fbe3 	bl	8005624 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e64:	f000 fb0c 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000350 	.word	0x20000350
 8000e74:	40001400 	.word	0x40001400

08000e78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000e7e:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <MX_USART3_UART_Init+0x5c>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e82:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART3_UART_Init+0x58>)
 8000ebc:	f004 fc5e 	bl	800577c <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ec6:	f000 fadb 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000039c 	.word	0x2000039c
 8000ed4:	40004800 	.word	0x40004800

08000ed8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ee2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee6:	2206      	movs	r2, #6
 8000ee8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f08:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1c:	f002 fda3 	bl	8003a66 <HAL_PCD_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f26:	f000 faab 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000424 	.word	0x20000424

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b50      	ldr	r3, [pc, #320]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a4f      	ldr	r2, [pc, #316]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	4b4a      	ldr	r3, [pc, #296]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a49      	ldr	r2, [pc, #292]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b47      	ldr	r3, [pc, #284]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b44      	ldr	r3, [pc, #272]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a43      	ldr	r2, [pc, #268]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b41      	ldr	r3, [pc, #260]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a3d      	ldr	r2, [pc, #244]	@ (800108c <MX_GPIO_Init+0x158>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <MX_GPIO_Init+0x158>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4b38      	ldr	r3, [pc, #224]	@ (800108c <MX_GPIO_Init+0x158>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a37      	ldr	r2, [pc, #220]	@ (800108c <MX_GPIO_Init+0x158>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b35      	ldr	r3, [pc, #212]	@ (800108c <MX_GPIO_Init+0x158>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc2:	4b32      	ldr	r3, [pc, #200]	@ (800108c <MX_GPIO_Init+0x158>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a31      	ldr	r2, [pc, #196]	@ (800108c <MX_GPIO_Init+0x158>)
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <MX_GPIO_Init+0x158>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000fe0:	482b      	ldr	r0, [pc, #172]	@ (8001090 <MX_GPIO_Init+0x15c>)
 8000fe2:	f002 f8a7 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2140      	movs	r1, #64	@ 0x40
 8000fea:	482a      	ldr	r0, [pc, #168]	@ (8001094 <MX_GPIO_Init+0x160>)
 8000fec:	f002 f8a2 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	4828      	ldr	r0, [pc, #160]	@ (8001098 <MX_GPIO_Init+0x164>)
 8000ff6:	f002 f89d 	bl	8003134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001000:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4821      	ldr	r0, [pc, #132]	@ (8001098 <MX_GPIO_Init+0x164>)
 8001012:	f001 fecb 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001016:	f244 0381 	movw	r3, #16513	@ 0x4081
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4818      	ldr	r0, [pc, #96]	@ (8001090 <MX_GPIO_Init+0x15c>)
 8001030:	f001 febc 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001034:	2340      	movs	r3, #64	@ 0x40
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4812      	ldr	r0, [pc, #72]	@ (8001094 <MX_GPIO_Init+0x160>)
 800104c:	f001 feae 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	@ (8001094 <MX_GPIO_Init+0x160>)
 8001064:	f001 fea2 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_GPIO_Init+0x164>)
 8001080:	f001 fe94 	bl	8002dac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	@ 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40020400 	.word	0x40020400
 8001094:	40021800 	.word	0x40021800
 8001098:	40020800 	.word	0x40020800

0800109c <StartSensorTask>:
  * @retval None
  */
/* USER CODE END Header_StartSensorTask */
// In main.c
void StartSensorTask(void *argument)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  #define SOIL_DRY_VALUE 2687
  #define ADC_OVERSAMPLE_COUNT 10
  #define SOIL_DRY_THRESHOLD 30 // LED will turn on if moisture is below 30%

  SensorData_t data_to_send;
  const uint32_t task_delay = 2000;
 80010a4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t tick_count = osKernelGetTickCount();
 80010aa:	f007 fd59 	bl	8008b60 <osKernelGetTickCount>
 80010ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {
    tick_count += task_delay;
 80010b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	4413      	add	r3, r2
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    osDelayUntil(tick_count);
 80010b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010ba:	f007 fe4d 	bl	8008d58 <osDelayUntil>

    // --- Read and Convert Soil Moisture ---
    uint32_t raw_soil_accumulator = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < ADC_OVERSAMPLE_COUNT; i++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e010      	b.n	80010ea <StartSensorTask+0x4e>
        HAL_ADC_Start(&hadc1);
 80010c8:	483a      	ldr	r0, [pc, #232]	@ (80011b4 <StartSensorTask+0x118>)
 80010ca:	f000 fe51 	bl	8001d70 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 100);
 80010ce:	2164      	movs	r1, #100	@ 0x64
 80010d0:	4838      	ldr	r0, [pc, #224]	@ (80011b4 <StartSensorTask+0x118>)
 80010d2:	f000 ff4f 	bl	8001f74 <HAL_ADC_PollForConversion>
        raw_soil_accumulator += HAL_ADC_GetValue(&hadc1);
 80010d6:	4837      	ldr	r0, [pc, #220]	@ (80011b4 <StartSensorTask+0x118>)
 80010d8:	f000 ffd7 	bl	800208a <HAL_ADC_GetValue>
 80010dc:	4602      	mov	r2, r0
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	4413      	add	r3, r2
 80010e2:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < ADC_OVERSAMPLE_COUNT; i++) {
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	3301      	adds	r3, #1
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	ddeb      	ble.n	80010c8 <StartSensorTask+0x2c>
    }
    HAL_ADC_Stop(&hadc1);
 80010f0:	4830      	ldr	r0, [pc, #192]	@ (80011b4 <StartSensorTask+0x118>)
 80010f2:	f000 ff0b 	bl	8001f0c <HAL_ADC_Stop>
    uint16_t raw_soil_value = raw_soil_accumulator / ADC_OVERSAMPLE_COUNT;
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	4a2f      	ldr	r2, [pc, #188]	@ (80011b8 <StartSensorTask+0x11c>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	837b      	strh	r3, [r7, #26]

    // Convert to Percentage
    if (raw_soil_value < SOIL_WET_VALUE) { raw_soil_value = SOIL_WET_VALUE; }
 8001102:	8b7b      	ldrh	r3, [r7, #26]
 8001104:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8001108:	4293      	cmp	r3, r2
 800110a:	d802      	bhi.n	8001112 <StartSensorTask+0x76>
 800110c:	f240 33fb 	movw	r3, #1019	@ 0x3fb
 8001110:	837b      	strh	r3, [r7, #26]
    if (raw_soil_value > SOIL_DRY_VALUE) { raw_soil_value = SOIL_DRY_VALUE; }
 8001112:	8b7b      	ldrh	r3, [r7, #26]
 8001114:	f5b3 6f28 	cmp.w	r3, #2688	@ 0xa80
 8001118:	d302      	bcc.n	8001120 <StartSensorTask+0x84>
 800111a:	f640 237f 	movw	r3, #2687	@ 0xa7f
 800111e:	837b      	strh	r3, [r7, #26]
    data_to_send.soil_moisture = 100 - ((raw_soil_value - SOIL_WET_VALUE) * 100 / (SOIL_DRY_VALUE - SOIL_WET_VALUE));
 8001120:	8b7b      	ldrh	r3, [r7, #26]
 8001122:	f2a3 33fb 	subw	r3, r3, #1019	@ 0x3fb
 8001126:	2264      	movs	r2, #100	@ 0x64
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <StartSensorTask+0x120>)
 800112e:	fb82 1203 	smull	r1, r2, r2, r3
 8001132:	1212      	asrs	r2, r2, #8
 8001134:	17db      	asrs	r3, r3, #31
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	3364      	adds	r3, #100	@ 0x64
 800113c:	b2db      	uxtb	r3, r3
 800113e:	74bb      	strb	r3, [r7, #18]

    // --- New Soil LED Indication Logic ---
    if (data_to_send.soil_moisture < SOIL_DRY_THRESHOLD) {
 8001140:	7cbb      	ldrb	r3, [r7, #18]
 8001142:	2b1d      	cmp	r3, #29
 8001144:	d805      	bhi.n	8001152 <StartSensorTask+0xb6>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Turn Green LED ON (Soil is dry)
 8001146:	2201      	movs	r2, #1
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	481d      	ldr	r0, [pc, #116]	@ (80011c0 <StartSensorTask+0x124>)
 800114c:	f001 fff2 	bl	8003134 <HAL_GPIO_WritePin>
 8001150:	e004      	b.n	800115c <StartSensorTask+0xc0>
    } else {
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn Green LED OFF
 8001152:	2200      	movs	r2, #0
 8001154:	2180      	movs	r1, #128	@ 0x80
 8001156:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <StartSensorTask+0x124>)
 8001158:	f001 ffec 	bl	8003134 <HAL_GPIO_WritePin>
    }

    // --- Read DHT11 ---
    uint8_t temp_int = 0, hum_int = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	2300      	movs	r3, #0
 8001162:	73bb      	strb	r3, [r7, #14]
    if (DHT11_Read_Data(&temp_int, &hum_int) == DHT11_OK) {
 8001164:	f107 020e 	add.w	r2, r7, #14
 8001168:	f107 030f 	add.w	r3, r7, #15
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff facc 	bl	800070c <DHT11_Read_Data>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <StartSensorTask+0xea>
        data_to_send.temperature = (int8_t)temp_int;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	743b      	strb	r3, [r7, #16]
        data_to_send.humidity = hum_int;
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	747b      	strb	r3, [r7, #17]
 8001184:	e003      	b.n	800118e <StartSensorTask+0xf2>
    } else {
        data_to_send.temperature = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	743b      	strb	r3, [r7, #16]
        data_to_send.humidity = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	747b      	strb	r3, [r7, #17]
    }

    // --- Print and Send Data ---
    printf("[Task] Temp: %d C, Hum: %u %%, Soil: %u %%\r\n",
           data_to_send.temperature,
 800118e:	f997 3010 	ldrsb.w	r3, [r7, #16]
    printf("[Task] Temp: %d C, Hum: %u %%, Soil: %u %%\r\n",
 8001192:	4619      	mov	r1, r3
           data_to_send.humidity,
 8001194:	7c7b      	ldrb	r3, [r7, #17]
    printf("[Task] Temp: %d C, Hum: %u %%, Soil: %u %%\r\n",
 8001196:	461a      	mov	r2, r3
           data_to_send.soil_moisture);
 8001198:	7cbb      	ldrb	r3, [r7, #18]
    printf("[Task] Temp: %d C, Hum: %u %%, Soil: %u %%\r\n",
 800119a:	480a      	ldr	r0, [pc, #40]	@ (80011c4 <StartSensorTask+0x128>)
 800119c:	f00b fae8 	bl	800c770 <iprintf>

    osMessageQueuePut(sensorDataQueueHandle, &data_to_send, 0, osWaitForever);
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <StartSensorTask+0x12c>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f107 0110 	add.w	r1, r7, #16
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	2200      	movs	r2, #0
 80011ae:	f007 ffe1 	bl	8009174 <osMessageQueuePut>
  {
 80011b2:	e77d      	b.n	80010b0 <StartSensorTask+0x14>
 80011b4:	20000204 	.word	0x20000204
 80011b8:	cccccccd 	.word	0xcccccccd
 80011bc:	274a4871 	.word	0x274a4871
 80011c0:	40020400 	.word	0x40020400
 80011c4:	0800da3c 	.word	0x0800da3c
 80011c8:	2000090c 	.word	0x2000090c

080011cc <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	@ 0x30
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  SensorData_t received_data;
  char display_buf[20];

  // Initialize the U8g2 display
  u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8g2_i2c_byte_cb, u8g2_gpio_and_delay_stm32);
 80011d4:	4b93      	ldr	r3, [pc, #588]	@ (8001424 <StartDisplayTask+0x258>)
 80011d6:	4a94      	ldr	r2, [pc, #592]	@ (8001428 <StartDisplayTask+0x25c>)
 80011d8:	4994      	ldr	r1, [pc, #592]	@ (800142c <StartDisplayTask+0x260>)
 80011da:	4895      	ldr	r0, [pc, #596]	@ (8001430 <StartDisplayTask+0x264>)
 80011dc:	f005 fe62 	bl	8006ea4 <u8g2_Setup_sh1106_i2c_128x64_noname_f>
  u8g2_InitDisplay(&u8g2);
 80011e0:	4893      	ldr	r0, [pc, #588]	@ (8001430 <StartDisplayTask+0x264>)
 80011e2:	f007 fbaf 	bl	8008944 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	4891      	ldr	r0, [pc, #580]	@ (8001430 <StartDisplayTask+0x264>)
 80011ea:	f007 fbba 	bl	8008962 <u8x8_SetPowerSave>

  // --- Startup Splash Screen ---
  u8g2_FirstPage(&u8g2);
 80011ee:	4890      	ldr	r0, [pc, #576]	@ (8001430 <StartDisplayTask+0x264>)
 80011f0:	f005 fce5 	bl	8006bbe <u8g2_FirstPage>
  do {
    u8g2_SetFont(&u8g2, u8g2_font_logisoso16_tr);
 80011f4:	498f      	ldr	r1, [pc, #572]	@ (8001434 <StartDisplayTask+0x268>)
 80011f6:	488e      	ldr	r0, [pc, #568]	@ (8001430 <StartDisplayTask+0x264>)
 80011f8:	f006 fc40 	bl	8007a7c <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 10, 35, "Data Logger");
 80011fc:	4b8e      	ldr	r3, [pc, #568]	@ (8001438 <StartDisplayTask+0x26c>)
 80011fe:	2223      	movs	r2, #35	@ 0x23
 8001200:	210a      	movs	r1, #10
 8001202:	488b      	ldr	r0, [pc, #556]	@ (8001430 <StartDisplayTask+0x264>)
 8001204:	f006 fb98 	bl	8007938 <u8g2_DrawStr>
    u8g2_DrawRFrame(&u8g2, 0, 0, 128, 64, 5);
 8001208:	2305      	movs	r3, #5
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2340      	movs	r3, #64	@ 0x40
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	4886      	ldr	r0, [pc, #536]	@ (8001430 <StartDisplayTask+0x264>)
 8001218:	f005 fb91 	bl	800693e <u8g2_DrawRFrame>
  } while (u8g2_NextPage(&u8g2));
 800121c:	4884      	ldr	r0, [pc, #528]	@ (8001430 <StartDisplayTask+0x264>)
 800121e:	f005 fce2 	bl	8006be6 <u8g2_NextPage>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e5      	bne.n	80011f4 <StartDisplayTask+0x28>
  osDelay(2000);
 8001228:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800122c:	f007 fd66 	bl	8008cfc <osDelay>

  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever) == osOK) {
 8001230:	4b82      	ldr	r3, [pc, #520]	@ (800143c <StartDisplayTask+0x270>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	f107 0120 	add.w	r1, r7, #32
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	2200      	movs	r2, #0
 800123e:	f008 f80d 	bl	800925c <osMessageQueueGet>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f3      	bne.n	8001230 <StartDisplayTask+0x64>
        if (osMutexAcquire(i2cMutexHandle, osWaitForever) == osOK) {
 8001248:	4b7d      	ldr	r3, [pc, #500]	@ (8001440 <StartDisplayTask+0x274>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fe5b 	bl	8008f0c <osMutexAcquire>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e9      	bne.n	8001230 <StartDisplayTask+0x64>

            u8g2_FirstPage(&u8g2);
 800125c:	4874      	ldr	r0, [pc, #464]	@ (8001430 <StartDisplayTask+0x264>)
 800125e:	f005 fcae 	bl	8006bbe <u8g2_FirstPage>
            do {
                // Use one clean font for everything
                u8g2_SetFont(&u8g2, u8g2_font_helvR08_tr);
 8001262:	4978      	ldr	r1, [pc, #480]	@ (8001444 <StartDisplayTask+0x278>)
 8001264:	4872      	ldr	r0, [pc, #456]	@ (8001430 <StartDisplayTask+0x264>)
 8001266:	f006 fc09 	bl	8007a7c <u8g2_SetFont>
                uint8_t bar_width;
                uint8_t str_width;

                // --- Row 1: Temperature ---
                u8g2_DrawStr(&u8g2, 0, 12, "Temperature");
 800126a:	4b77      	ldr	r3, [pc, #476]	@ (8001448 <StartDisplayTask+0x27c>)
 800126c:	220c      	movs	r2, #12
 800126e:	2100      	movs	r1, #0
 8001270:	486f      	ldr	r0, [pc, #444]	@ (8001430 <StartDisplayTask+0x264>)
 8001272:	f006 fb61 	bl	8007938 <u8g2_DrawStr>
                sprintf(display_buf, "%d C", received_data.temperature);
 8001276:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800127a:	461a      	mov	r2, r3
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4972      	ldr	r1, [pc, #456]	@ (800144c <StartDisplayTask+0x280>)
 8001282:	4618      	mov	r0, r3
 8001284:	f00b fae4 	bl	800c850 <siprintf>
                str_width = u8g2_GetStrWidth(&u8g2, display_buf);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4619      	mov	r1, r3
 800128e:	4868      	ldr	r0, [pc, #416]	@ (8001430 <StartDisplayTask+0x264>)
 8001290:	f006 fc72 	bl	8007b78 <u8g2_GetStrWidth>
 8001294:	4603      	mov	r3, r0
 8001296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                u8g2_DrawStr(&u8g2, 127 - str_width, 12, display_buf);
 800129a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80012a4:	b299      	uxth	r1, r3
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	220c      	movs	r2, #12
 80012ac:	4860      	ldr	r0, [pc, #384]	@ (8001430 <StartDisplayTask+0x264>)
 80012ae:	f006 fb43 	bl	8007938 <u8g2_DrawStr>

                bar_width = map(received_data.temperature, 0, 50, 0, 128);
 80012b2:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80012b6:	4618      	mov	r0, r3
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	2232      	movs	r2, #50	@ 0x32
 80012c0:	2100      	movs	r1, #0
 80012c2:	f7ff fb35 	bl	8000930 <map>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                u8g2_DrawFrame(&u8g2, 0, 15, 128, 6);
 80012cc:	2306      	movs	r3, #6
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	220f      	movs	r2, #15
 80012d4:	2100      	movs	r1, #0
 80012d6:	4856      	ldr	r0, [pc, #344]	@ (8001430 <StartDisplayTask+0x264>)
 80012d8:	f005 fad4 	bl	8006884 <u8g2_DrawFrame>
                u8g2_DrawBox(&u8g2, 2, 17, bar_width - 4, 2);
 80012dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3b04      	subs	r3, #4
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	2202      	movs	r2, #2
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	2211      	movs	r2, #17
 80012ec:	2102      	movs	r1, #2
 80012ee:	4850      	ldr	r0, [pc, #320]	@ (8001430 <StartDisplayTask+0x264>)
 80012f0:	f005 fa92 	bl	8006818 <u8g2_DrawBox>


                // --- Row 2: Humidity ---
                u8g2_DrawStr(&u8g2, 0, 33, "Humidity");
 80012f4:	4b56      	ldr	r3, [pc, #344]	@ (8001450 <StartDisplayTask+0x284>)
 80012f6:	2221      	movs	r2, #33	@ 0x21
 80012f8:	2100      	movs	r1, #0
 80012fa:	484d      	ldr	r0, [pc, #308]	@ (8001430 <StartDisplayTask+0x264>)
 80012fc:	f006 fb1c 	bl	8007938 <u8g2_DrawStr>
                sprintf(display_buf, "%u %%", received_data.humidity);
 8001300:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001304:	461a      	mov	r2, r3
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4952      	ldr	r1, [pc, #328]	@ (8001454 <StartDisplayTask+0x288>)
 800130c:	4618      	mov	r0, r3
 800130e:	f00b fa9f 	bl	800c850 <siprintf>
                str_width = u8g2_GetStrWidth(&u8g2, display_buf);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	4845      	ldr	r0, [pc, #276]	@ (8001430 <StartDisplayTask+0x264>)
 800131a:	f006 fc2d 	bl	8007b78 <u8g2_GetStrWidth>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                u8g2_DrawStr(&u8g2, 127 - str_width, 33, display_buf);
 8001324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001328:	b29b      	uxth	r3, r3
 800132a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800132e:	b299      	uxth	r1, r3
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2221      	movs	r2, #33	@ 0x21
 8001336:	483e      	ldr	r0, [pc, #248]	@ (8001430 <StartDisplayTask+0x264>)
 8001338:	f006 fafe 	bl	8007938 <u8g2_DrawStr>

                bar_width = map(received_data.humidity, 0, 100, 0, 128);
 800133c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001340:	4618      	mov	r0, r3
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	2264      	movs	r2, #100	@ 0x64
 800134a:	2100      	movs	r1, #0
 800134c:	f7ff faf0 	bl	8000930 <map>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                u8g2_DrawFrame(&u8g2, 0, 36, 128, 6);
 8001356:	2306      	movs	r3, #6
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	2224      	movs	r2, #36	@ 0x24
 800135e:	2100      	movs	r1, #0
 8001360:	4833      	ldr	r0, [pc, #204]	@ (8001430 <StartDisplayTask+0x264>)
 8001362:	f005 fa8f 	bl	8006884 <u8g2_DrawFrame>
                u8g2_DrawBox(&u8g2, 2, 38, bar_width - 4, 2);
 8001366:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800136a:	b29b      	uxth	r3, r3
 800136c:	3b04      	subs	r3, #4
 800136e:	b29b      	uxth	r3, r3
 8001370:	2202      	movs	r2, #2
 8001372:	9200      	str	r2, [sp, #0]
 8001374:	2226      	movs	r2, #38	@ 0x26
 8001376:	2102      	movs	r1, #2
 8001378:	482d      	ldr	r0, [pc, #180]	@ (8001430 <StartDisplayTask+0x264>)
 800137a:	f005 fa4d 	bl	8006818 <u8g2_DrawBox>


                // --- Row 3: Soil Moisture ---
                u8g2_DrawStr(&u8g2, 0, 54, "Soil Moisture");
 800137e:	4b36      	ldr	r3, [pc, #216]	@ (8001458 <StartDisplayTask+0x28c>)
 8001380:	2236      	movs	r2, #54	@ 0x36
 8001382:	2100      	movs	r1, #0
 8001384:	482a      	ldr	r0, [pc, #168]	@ (8001430 <StartDisplayTask+0x264>)
 8001386:	f006 fad7 	bl	8007938 <u8g2_DrawStr>
                sprintf(display_buf, "%u %%", received_data.soil_moisture);
 800138a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800138e:	461a      	mov	r2, r3
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	492f      	ldr	r1, [pc, #188]	@ (8001454 <StartDisplayTask+0x288>)
 8001396:	4618      	mov	r0, r3
 8001398:	f00b fa5a 	bl	800c850 <siprintf>
                str_width = u8g2_GetStrWidth(&u8g2, display_buf);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	4823      	ldr	r0, [pc, #140]	@ (8001430 <StartDisplayTask+0x264>)
 80013a4:	f006 fbe8 	bl	8007b78 <u8g2_GetStrWidth>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                u8g2_DrawStr(&u8g2, 127 - str_width, 54, display_buf);
 80013ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80013b8:	b299      	uxth	r1, r3
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2236      	movs	r2, #54	@ 0x36
 80013c0:	481b      	ldr	r0, [pc, #108]	@ (8001430 <StartDisplayTask+0x264>)
 80013c2:	f006 fab9 	bl	8007938 <u8g2_DrawStr>

                bar_width = map(received_data.soil_moisture, 0, 100, 0, 128);
 80013c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013ca:	4618      	mov	r0, r3
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2300      	movs	r3, #0
 80013d2:	2264      	movs	r2, #100	@ 0x64
 80013d4:	2100      	movs	r1, #0
 80013d6:	f7ff faab 	bl	8000930 <map>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                u8g2_DrawFrame(&u8g2, 0, 57, 128, 6);
 80013e0:	2306      	movs	r3, #6
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	2239      	movs	r2, #57	@ 0x39
 80013e8:	2100      	movs	r1, #0
 80013ea:	4811      	ldr	r0, [pc, #68]	@ (8001430 <StartDisplayTask+0x264>)
 80013ec:	f005 fa4a 	bl	8006884 <u8g2_DrawFrame>
                u8g2_DrawBox(&u8g2, 2, 59, bar_width - 4, 2);
 80013f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3b04      	subs	r3, #4
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2202      	movs	r2, #2
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	223b      	movs	r2, #59	@ 0x3b
 8001400:	2102      	movs	r1, #2
 8001402:	480b      	ldr	r0, [pc, #44]	@ (8001430 <StartDisplayTask+0x264>)
 8001404:	f005 fa08 	bl	8006818 <u8g2_DrawBox>

            } while (u8g2_NextPage(&u8g2));
 8001408:	4809      	ldr	r0, [pc, #36]	@ (8001430 <StartDisplayTask+0x264>)
 800140a:	f005 fbec 	bl	8006be6 <u8g2_NextPage>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	f47f af26 	bne.w	8001262 <StartDisplayTask+0x96>

            osMutexRelease(i2cMutexHandle);
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <StartDisplayTask+0x274>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fdd4 	bl	8008fc8 <osMutexRelease>
    if (osMessageQueueGet(sensorDataQueueHandle, &received_data, NULL, osWaitForever) == osOK) {
 8001420:	e706      	b.n	8001230 <StartDisplayTask+0x64>
 8001422:	bf00      	nop
 8001424:	08000a39 	.word	0x08000a39
 8001428:	08000969 	.word	0x08000969
 800142c:	0800e580 	.word	0x0800e580
 8001430:	20000914 	.word	0x20000914
 8001434:	0800df64 	.word	0x0800df64
 8001438:	0800da6c 	.word	0x0800da6c
 800143c:	2000090c 	.word	0x2000090c
 8001440:	20000910 	.word	0x20000910
 8001444:	0800db50 	.word	0x0800db50
 8001448:	0800da78 	.word	0x0800da78
 800144c:	0800da84 	.word	0x0800da84
 8001450:	0800da8c 	.word	0x0800da8c
 8001454:	0800da98 	.word	0x0800da98
 8001458:	0800daa0 	.word	0x0800daa0

0800145c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800146e:	f000 fbf7 	bl	8001c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40001000 	.word	0x40001000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	@ 0x40
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	210f      	movs	r1, #15
 80014c6:	f06f 0001 	mvn.w	r0, #1
 80014ca:	f001 f8f7 	bl	80026bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <HAL_ADC_MspInit+0x74>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d123      	bne.n	8001546 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_ADC_MspInit+0x78>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <HAL_ADC_MspInit+0x78>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001508:	6453      	str	r3, [r2, #68]	@ 0x44
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_ADC_MspInit+0x78>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_ADC_MspInit+0x78>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <HAL_ADC_MspInit+0x78>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_ADC_MspInit+0x78>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_ADC_MspInit+0x7c>)
 8001542:	f001 fc33 	bl	8002dac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012000 	.word	0x40012000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4e      	ldr	r2, [pc, #312]	@ (80016b4 <HAL_ETH_MspInit+0x158>)
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 8096 	bne.w	80016ac <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001580:	4b4d      	ldr	r3, [pc, #308]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	4a4c      	ldr	r2, [pc, #304]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 8001586:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800158a:	6313      	str	r3, [r2, #48]	@ 0x30
 800158c:	4b4a      	ldr	r3, [pc, #296]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159c:	4a46      	ldr	r2, [pc, #280]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 800159e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a4:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	4a40      	ldr	r2, [pc, #256]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80015bc:	4b3e      	ldr	r3, [pc, #248]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	4b3b      	ldr	r3, [pc, #236]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015cc:	4a3a      	ldr	r2, [pc, #232]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d4:	4b38      	ldr	r3, [pc, #224]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	4a34      	ldr	r2, [pc, #208]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	4a2e      	ldr	r2, [pc, #184]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	6313      	str	r3, [r2, #48]	@ 0x30
 8001604:	4b2c      	ldr	r3, [pc, #176]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001614:	4a28      	ldr	r2, [pc, #160]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 8001616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800161a:	6313      	str	r3, [r2, #48]	@ 0x30
 800161c:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <HAL_ETH_MspInit+0x15c>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001628:	2332      	movs	r3, #50	@ 0x32
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001638:	230b      	movs	r3, #11
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	481e      	ldr	r0, [pc, #120]	@ (80016bc <HAL_ETH_MspInit+0x160>)
 8001644:	f001 fbb2 	bl	8002dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001648:	2386      	movs	r3, #134	@ 0x86
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001658:	230b      	movs	r3, #11
 800165a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <HAL_ETH_MspInit+0x164>)
 8001664:	f001 fba2 	bl	8002dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800167a:	230b      	movs	r3, #11
 800167c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	480f      	ldr	r0, [pc, #60]	@ (80016c4 <HAL_ETH_MspInit+0x168>)
 8001686:	f001 fb91 	bl	8002dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800168a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800169c:	230b      	movs	r3, #11
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <HAL_ETH_MspInit+0x16c>)
 80016a8:	f001 fb80 	bl	8002dac <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80016ac:	bf00      	nop
 80016ae:	3738      	adds	r7, #56	@ 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40028000 	.word	0x40028000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40021800 	.word	0x40021800

080016cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0ae      	sub	sp, #184	@ 0xb8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2290      	movs	r2, #144	@ 0x90
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00b f9a9 	bl	800ca44 <memset>
  if(hi2c->Instance==I2C1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <HAL_I2C_MspInit+0xb4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d13c      	bne.n	8001776 <HAL_I2C_MspInit+0xaa>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001700:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001702:	2300      	movs	r3, #0
 8001704:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4618      	mov	r0, r3
 800170c:	f003 f84c 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001716:	f7ff feb3 	bl	8001480 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_I2C_MspInit+0xb8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <HAL_I2C_MspInit+0xb8>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <HAL_I2C_MspInit+0xb8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001732:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173a:	2312      	movs	r3, #18
 800173c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800174c:	2304      	movs	r3, #4
 800174e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001756:	4619      	mov	r1, r3
 8001758:	480b      	ldr	r0, [pc, #44]	@ (8001788 <HAL_I2C_MspInit+0xbc>)
 800175a:	f001 fb27 	bl	8002dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_I2C_MspInit+0xb8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_I2C_MspInit+0xb8>)
 8001764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_I2C_MspInit+0xb8>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	37b8      	adds	r7, #184	@ 0xb8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40005400 	.word	0x40005400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020400 	.word	0x40020400

0800178c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_TIM_Base_MspInit+0x38>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10b      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_TIM_Base_MspInit+0x3c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <HAL_TIM_Base_MspInit+0x3c>)
 80017a4:	f043 0320 	orr.w	r3, r3, #32
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017aa:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <HAL_TIM_Base_MspInit+0x3c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40001400 	.word	0x40001400
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0ae      	sub	sp, #184	@ 0xb8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2290      	movs	r2, #144	@ 0x90
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00b f929 	bl	800ca44 <memset>
  if(huart->Instance==USART3)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a22      	ldr	r2, [pc, #136]	@ (8001880 <HAL_UART_MspInit+0xb4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d13c      	bne.n	8001876 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001800:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001802:	2300      	movs	r3, #0
 8001804:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4618      	mov	r0, r3
 800180c:	f002 ffcc 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001816:	f7ff fe33 	bl	8001480 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_UART_MspInit+0xb8>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <HAL_UART_MspInit+0xb8>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <HAL_UART_MspInit+0xb8>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <HAL_UART_MspInit+0xb8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a13      	ldr	r2, [pc, #76]	@ (8001884 <HAL_UART_MspInit+0xb8>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_UART_MspInit+0xb8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800184a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001864:	2307      	movs	r3, #7
 8001866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800186a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <HAL_UART_MspInit+0xbc>)
 8001872:	f001 fa9b 	bl	8002dac <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001876:	bf00      	nop
 8001878:	37b8      	adds	r7, #184	@ 0xb8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40004800 	.word	0x40004800
 8001884:	40023800 	.word	0x40023800
 8001888:	40020c00 	.word	0x40020c00

0800188c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0ae      	sub	sp, #184	@ 0xb8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2290      	movs	r2, #144	@ 0x90
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00b f8c9 	bl	800ca44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ba:	d159      	bne.n	8001970 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018c0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 ff6b 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80018d8:	f7ff fdd2 	bl	8001480 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018f4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80018f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800190e:	230a      	movs	r3, #10
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001918:	4619      	mov	r1, r3
 800191a:	4818      	ldr	r0, [pc, #96]	@ (800197c <HAL_PCD_MspInit+0xf0>)
 800191c:	f001 fa46 	bl	8002dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001924:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001938:	4619      	mov	r1, r3
 800193a:	4810      	ldr	r0, [pc, #64]	@ (800197c <HAL_PCD_MspInit+0xf0>)
 800193c:	f001 fa36 	bl	8002dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 8001942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001944:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 8001946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800194a:	6353      	str	r3, [r2, #52]	@ 0x34
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 800194e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 800195a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195c:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001962:	6453      	str	r3, [r2, #68]	@ 0x44
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <HAL_PCD_MspInit+0xec>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001970:	bf00      	nop
 8001972:	37b8      	adds	r7, #184	@ 0xb8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000

08001980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	@ 0x38
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001990:	4b33      	ldr	r3, [pc, #204]	@ (8001a60 <HAL_InitTick+0xe0>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	4a32      	ldr	r2, [pc, #200]	@ (8001a60 <HAL_InitTick+0xe0>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6413      	str	r3, [r2, #64]	@ 0x40
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_InitTick+0xe0>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a8:	f107 0210 	add.w	r2, r7, #16
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fec6 	bl	8004744 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019c2:	f002 fe97 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 80019c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80019c8:	e004      	b.n	80019d4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ca:	f002 fe93 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 80019ce:	4603      	mov	r3, r0
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d6:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <HAL_InitTick+0xe4>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	0c9b      	lsrs	r3, r3, #18
 80019de:	3b01      	subs	r3, #1
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019e2:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <HAL_InitTick+0xe8>)
 80019e4:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_InitTick+0xec>)
 80019e6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <HAL_InitTick+0xe8>)
 80019ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <HAL_InitTick+0xe8>)
 80019f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <HAL_InitTick+0xe8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <HAL_InitTick+0xe8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <HAL_InitTick+0xe8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a08:	4817      	ldr	r0, [pc, #92]	@ (8001a68 <HAL_InitTick+0xe8>)
 8001a0a:	f003 faf5 	bl	8004ff8 <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11b      	bne.n	8001a54 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a1c:	4812      	ldr	r0, [pc, #72]	@ (8001a68 <HAL_InitTick+0xe8>)
 8001a1e:	f003 fbb3 	bl	8005188 <HAL_TIM_Base_Start_IT>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a30:	2036      	movs	r0, #54	@ 0x36
 8001a32:	f000 fe5f 	bl	80026f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d808      	bhi.n	8001a4e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	2036      	movs	r0, #54	@ 0x36
 8001a42:	f000 fe3b 	bl	80026bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_InitTick+0xf0>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e002      	b.n	8001a54 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3738      	adds	r7, #56	@ 0x38
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	200009d4 	.word	0x200009d4
 8001a6c:	40001000 	.word	0x40001000
 8001a70:	20000004 	.word	0x20000004

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <NMI_Handler+0x4>

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <TIM6_DAC_IRQHandler+0x10>)
 8001ab2:	f003 fbe1 	bl	8005278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200009d4 	.word	0x200009d4

08001ac0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e00a      	b.n	8001ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf0      	blt.n	8001ad2 <_read+0x12>
  }

  return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b22:	605a      	str	r2, [r3, #4]
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_isatty>:

int _isatty(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f00b f802 	bl	800cb9c <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20080000 	.word	0x20080000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	20000a20 	.word	0x20000a20
 8001bcc:	20005f58 	.word	0x20005f58

08001bd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf8:	f7ff ffea 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	@ (8001c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	@ (8001c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f00a ffc1 	bl	800cba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c26:	f7fe ff4b 	bl	8000ac0 <main>
  bx  lr    
 8001c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c2c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c38:	0800e640 	.word	0x0800e640
  ldr r2, =_sbss
 8001c3c:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001c40:	20005f58 	.word	0x20005f58

08001c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>

08001c46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	f000 fd2b 	bl	80026a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c50:	200f      	movs	r0, #15
 8001c52:	f7ff fe95 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c56:	f7ff fc19 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000a24 	.word	0x20000a24

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000a24 	.word	0x20000a24

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e031      	b.n	8001d62 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fbe8 	bl	80014dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d116      	bne.n	8001d54 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <HAL_ADC_Init+0x84>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	f043 0202 	orr.w	r2, r3, #2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fb0e 	bl	8002358 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	f043 0201 	orr.w	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d52:	e001      	b.n	8001d58 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	ffffeefd 	.word	0xffffeefd

08001d70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Start+0x1a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0ad      	b.n	8001ee6 <HAL_ADC_Start+0x176>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d018      	beq.n	8001dd2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001db0:	4b50      	ldr	r3, [pc, #320]	@ (8001ef4 <HAL_ADC_Start+0x184>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a50      	ldr	r2, [pc, #320]	@ (8001ef8 <HAL_ADC_Start+0x188>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0c9a      	lsrs	r2, r3, #18
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d175      	bne.n	8001ecc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001de4:	4b45      	ldr	r3, [pc, #276]	@ (8001efc <HAL_ADC_Start+0x18c>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e1a:	d106      	bne.n	8001e2a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e20:	f023 0206 	bic.w	r2, r3, #6
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001e42:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <HAL_ADC_Start+0x190>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10f      	bne.n	8001e6e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d143      	bne.n	8001ee4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e03a      	b.n	8001ee4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a24      	ldr	r2, [pc, #144]	@ (8001f04 <HAL_ADC_Start+0x194>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10e      	bne.n	8001e96 <HAL_ADC_Start+0x126>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e94:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_ADC_Start+0x190>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d120      	bne.n	8001ee4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a18      	ldr	r2, [pc, #96]	@ (8001f08 <HAL_ADC_Start+0x198>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_ADC_Start+0x174>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d114      	bne.n	8001ee4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	e00b      	b.n	8001ee4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f043 0210 	orr.w	r2, r3, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83
 8001efc:	fffff8fe 	.word	0xfffff8fe
 8001f00:	40012300 	.word	0x40012300
 8001f04:	40012000 	.word	0x40012000
 8001f08:	40012200 	.word	0x40012200

08001f0c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_Stop+0x16>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e01f      	b.n	8001f62 <HAL_ADC_Stop+0x56>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_ADC_Stop+0x64>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	ffffeefe 	.word	0xffffeefe

08001f74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f90:	d113      	bne.n	8001fba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa0:	d10b      	bne.n	8001fba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e063      	b.n	8002082 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001fba:	f7ff fe65 	bl	8001c88 <HAL_GetTick>
 8001fbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fc0:	e021      	b.n	8002006 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d01d      	beq.n	8002006 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_ADC_PollForConversion+0x6c>
 8001fd0:	f7ff fe5a 	bl	8001c88 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d212      	bcs.n	8002006 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d00b      	beq.n	8002006 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e03d      	b.n	8002082 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b02      	cmp	r3, #2
 8002012:	d1d6      	bne.n	8001fc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0212 	mvn.w	r2, #18
 800201c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d123      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11f      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x1c>
 80020bc:	2302      	movs	r3, #2
 80020be:	e13a      	b.n	8002336 <HAL_ADC_ConfigChannel+0x292>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d93a      	bls.n	8002146 <HAL_ADC_ConfigChannel+0xa2>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020d8:	d035      	beq.n	8002146 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68d9      	ldr	r1, [r3, #12]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	3b1e      	subs	r3, #30
 80020f0:	2207      	movs	r2, #7
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a8f      	ldr	r2, [pc, #572]	@ (8002344 <HAL_ADC_ConfigChannel+0x2a0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10a      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68d9      	ldr	r1, [r3, #12]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	061a      	lsls	r2, r3, #24
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211e:	e039      	b.n	8002194 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	4603      	mov	r3, r0
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4403      	add	r3, r0
 8002138:	3b1e      	subs	r3, #30
 800213a:	409a      	lsls	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002144:	e026      	b.n	8002194 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6919      	ldr	r1, [r3, #16]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2207      	movs	r2, #7
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43da      	mvns	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	400a      	ands	r2, r1
 800216c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6919      	ldr	r1, [r3, #16]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	4603      	mov	r3, r0
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4403      	add	r3, r0
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	409a      	lsls	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d824      	bhi.n	80021e6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b05      	subs	r3, #5
 80021ae:	221f      	movs	r2, #31
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43da      	mvns	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	400a      	ands	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b05      	subs	r3, #5
 80021d8:	fa00 f203 	lsl.w	r2, r0, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e4:	e04c      	b.n	8002280 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d824      	bhi.n	8002238 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b23      	subs	r3, #35	@ 0x23
 8002200:	221f      	movs	r2, #31
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b23      	subs	r3, #35	@ 0x23
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	631a      	str	r2, [r3, #48]	@ 0x30
 8002236:	e023      	b.n	8002280 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b41      	subs	r3, #65	@ 0x41
 800224a:	221f      	movs	r2, #31
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43da      	mvns	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	400a      	ands	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b41      	subs	r3, #65	@ 0x41
 8002274:	fa00 f203 	lsl.w	r2, r0, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_ADC_ConfigChannel+0x2a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10a      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1fc>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a2c      	ldr	r2, [pc, #176]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 800229a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800229e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a28      	ldr	r2, [pc, #160]	@ (8002348 <HAL_ADC_ConfigChannel+0x2a4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d10f      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x226>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d10b      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80022b2:	4b26      	ldr	r3, [pc, #152]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a25      	ldr	r2, [pc, #148]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a22      	ldr	r2, [pc, #136]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002348 <HAL_ADC_ConfigChannel+0x2a4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d12b      	bne.n	800232c <HAL_ADC_ConfigChannel+0x288>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_ADC_ConfigChannel+0x2a0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d003      	beq.n	80022e6 <HAL_ADC_ConfigChannel+0x242>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b11      	cmp	r3, #17
 80022e4:	d122      	bne.n	800232c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80022e6:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a18      	ldr	r2, [pc, #96]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022ec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80022f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a15      	ldr	r2, [pc, #84]	@ (800234c <HAL_ADC_ConfigChannel+0x2a8>)
 80022f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a10      	ldr	r2, [pc, #64]	@ (8002344 <HAL_ADC_ConfigChannel+0x2a0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002308:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_ADC_ConfigChannel+0x2ac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <HAL_ADC_ConfigChannel+0x2b0>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0c9a      	lsrs	r2, r3, #18
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800231e:	e002      	b.n	8002326 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f9      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	10000012 	.word	0x10000012
 8002348:	40012000 	.word	0x40012000
 800234c:	40012300 	.word	0x40012300
 8002350:	20000000 	.word	0x20000000
 8002354:	431bde83 	.word	0x431bde83

08002358 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002360:	4b78      	ldr	r3, [pc, #480]	@ (8002544 <ADC_Init+0x1ec>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a77      	ldr	r2, [pc, #476]	@ (8002544 <ADC_Init+0x1ec>)
 8002366:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800236a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800236c:	4b75      	ldr	r3, [pc, #468]	@ (8002544 <ADC_Init+0x1ec>)
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4973      	ldr	r1, [pc, #460]	@ (8002544 <ADC_Init+0x1ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	4a58      	ldr	r2, [pc, #352]	@ (8002548 <ADC_Init+0x1f0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800241c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	e00f      	b.n	8002452 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002450:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0202 	bic.w	r2, r2, #2
 8002460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	005a      	lsls	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800248e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800249e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	3b01      	subs	r3, #1
 80024ac:	035a      	lsls	r2, r3, #13
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e007      	b.n	80024c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	051a      	lsls	r2, r3, #20
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800250a:	025a      	lsls	r2, r3, #9
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	029a      	lsls	r2, r3, #10
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40012300 	.word	0x40012300
 8002548:	0f000001 	.word	0x0f000001

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <__NVIC_SetPriorityGrouping+0x40>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	4313      	orrs	r3, r2
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	@ (800258c <__NVIC_SetPriorityGrouping+0x40>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00
 8002590:	05fa0000 	.word	0x05fa0000

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	@ (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	@ (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	@ (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	@ 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	@ 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff4c 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ce:	f7ff ff61 	bl	8002594 <__NVIC_GetPriorityGrouping>
 80026d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f7ff ffb1 	bl	8002640 <NVIC_EncodePriority>
 80026de:	4602      	mov	r2, r0
 80026e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff80 	bl	80025ec <__NVIC_SetPriority>
}
 80026ec:	bf00      	nop
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff54 	bl	80025b0 <__NVIC_EnableIRQ>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e086      	b.n	8002830 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002728:	2b00      	cmp	r3, #0
 800272a:	d106      	bne.n	800273a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe ff11 	bl	800155c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	4b3f      	ldr	r3, [pc, #252]	@ (8002838 <HAL_ETH_Init+0x128>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	4a3e      	ldr	r2, [pc, #248]	@ (8002838 <HAL_ETH_Init+0x128>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002744:	6453      	str	r3, [r2, #68]	@ 0x44
 8002746:	4b3c      	ldr	r3, [pc, #240]	@ (8002838 <HAL_ETH_Init+0x128>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002752:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <HAL_ETH_Init+0x12c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a39      	ldr	r2, [pc, #228]	@ (800283c <HAL_ETH_Init+0x12c>)
 8002758:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800275c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800275e:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_ETH_Init+0x12c>)
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4935      	ldr	r1, [pc, #212]	@ (800283c <HAL_ETH_Init+0x12c>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800276c:	4b33      	ldr	r3, [pc, #204]	@ (800283c <HAL_ETH_Init+0x12c>)
 800276e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002786:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002788:	f7ff fa7e 	bl	8001c88 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800278e:	e011      	b.n	80027b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002790:	f7ff fa7a 	bl	8001c88 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800279e:	d909      	bls.n	80027b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2204      	movs	r2, #4
 80027a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	22e0      	movs	r2, #224	@ 0xe0
 80027ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e03d      	b.n	8002830 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e4      	bne.n	8002790 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f97a 	bl	8002ac0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa25 	bl	8002c1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa7b 	bl	8002cce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	461a      	mov	r2, r3
 80027de:	2100      	movs	r1, #0
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f9e3 	bl	8002bac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80027f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b0f      	ldr	r3, [pc, #60]	@ (8002840 <HAL_ETH_Init+0x130>)
 8002804:	430b      	orrs	r3, r1
 8002806:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800281a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2210      	movs	r2, #16
 800282a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	00020060 	.word	0x00020060

08002844 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <ETH_SetMACConfig+0x164>)
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7b9b      	ldrb	r3, [r3, #14]
 8002862:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	7c12      	ldrb	r2, [r2, #16]
 8002868:	2a00      	cmp	r2, #0
 800286a:	d102      	bne.n	8002872 <ETH_SetMACConfig+0x2e>
 800286c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002870:	e000      	b.n	8002874 <ETH_SetMACConfig+0x30>
 8002872:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002874:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	7c52      	ldrb	r2, [r2, #17]
 800287a:	2a00      	cmp	r2, #0
 800287c:	d102      	bne.n	8002884 <ETH_SetMACConfig+0x40>
 800287e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002882:	e000      	b.n	8002886 <ETH_SetMACConfig+0x42>
 8002884:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002886:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800288c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	7fdb      	ldrb	r3, [r3, #31]
 8002892:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002894:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800289a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	7f92      	ldrb	r2, [r2, #30]
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d102      	bne.n	80028aa <ETH_SetMACConfig+0x66>
 80028a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a8:	e000      	b.n	80028ac <ETH_SetMACConfig+0x68>
 80028aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80028ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	7f1b      	ldrb	r3, [r3, #28]
 80028b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	791b      	ldrb	r3, [r3, #4]
 80028c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80028c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d102      	bne.n	80028d4 <ETH_SetMACConfig+0x90>
 80028ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d2:	e000      	b.n	80028d6 <ETH_SetMACConfig+0x92>
 80028d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	7bdb      	ldrb	r3, [r3, #15]
 80028dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028ee:	4313      	orrs	r3, r2
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002906:	2001      	movs	r0, #1
 8002908:	f7ff f9ca 	bl	8001ca0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002932:	2a00      	cmp	r2, #0
 8002934:	d101      	bne.n	800293a <ETH_SetMACConfig+0xf6>
 8002936:	2280      	movs	r2, #128	@ 0x80
 8002938:	e000      	b.n	800293c <ETH_SetMACConfig+0xf8>
 800293a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800293c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002942:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800294a:	2a01      	cmp	r2, #1
 800294c:	d101      	bne.n	8002952 <ETH_SetMACConfig+0x10e>
 800294e:	2208      	movs	r2, #8
 8002950:	e000      	b.n	8002954 <ETH_SetMACConfig+0x110>
 8002952:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002954:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800295c:	2a01      	cmp	r2, #1
 800295e:	d101      	bne.n	8002964 <ETH_SetMACConfig+0x120>
 8002960:	2204      	movs	r2, #4
 8002962:	e000      	b.n	8002966 <ETH_SetMACConfig+0x122>
 8002964:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002966:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800296e:	2a01      	cmp	r2, #1
 8002970:	d101      	bne.n	8002976 <ETH_SetMACConfig+0x132>
 8002972:	2202      	movs	r2, #2
 8002974:	e000      	b.n	8002978 <ETH_SetMACConfig+0x134>
 8002976:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002978:	4313      	orrs	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002990:	2001      	movs	r0, #1
 8002992:	f7ff f985 	bl	8001ca0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	fd20810f 	.word	0xfd20810f

080029ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <ETH_SetDMAConfig+0x110>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	7b1b      	ldrb	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <ETH_SetDMAConfig+0x2c>
 80029d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029d6:	e000      	b.n	80029da <ETH_SetDMAConfig+0x2e>
 80029d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	7b5b      	ldrb	r3, [r3, #13]
 80029de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	7f52      	ldrb	r2, [r2, #29]
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d102      	bne.n	80029f0 <ETH_SetDMAConfig+0x44>
 80029ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029ee:	e000      	b.n	80029f2 <ETH_SetDMAConfig+0x46>
 80029f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	7b9b      	ldrb	r3, [r3, #14]
 80029f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	7f1b      	ldrb	r3, [r3, #28]
 8002a06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7f9b      	ldrb	r3, [r3, #30]
 8002a0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff f92c 	bl	8001ca0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7ff f8fd 	bl	8001ca0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	f8de3f23 	.word	0xf8de3f23

08002ac0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0a6      	sub	sp, #152	@ 0x98
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b02:	2300      	movs	r3, #0
 8002b04:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fe7f 	bl	8002844 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b46:	2301      	movs	r3, #1
 8002b48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b7a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b80:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b86:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff05 	bl	80029ac <ETH_SetDMAConfig>
}
 8002ba2:	bf00      	nop
 8002ba4:	3798      	adds	r7, #152	@ 0x98
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3305      	adds	r3, #5
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	3204      	adds	r2, #4
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <ETH_MACAddressConfig+0x68>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3303      	adds	r3, #3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	061a      	lsls	r2, r3, #24
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3302      	adds	r3, #2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <ETH_MACAddressConfig+0x6c>)
 8002bfe:	4413      	add	r3, r2
 8002c00:	461a      	mov	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40028040 	.word	0x40028040
 8002c18:	40028044 	.word	0x40028044

08002c1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e03e      	b.n	8002ca8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68d9      	ldr	r1, [r3, #12]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	3206      	adds	r2, #6
 8002c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d80c      	bhi.n	8002c8c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68d9      	ldr	r1, [r3, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	e004      	b.n	8002c96 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	461a      	mov	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d9bd      	bls.n	8002c2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cc0:	611a      	str	r2, [r3, #16]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e048      	b.n	8002d6e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6919      	ldr	r1, [r3, #16]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d18:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	3212      	adds	r2, #18
 8002d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d80c      	bhi.n	8002d5e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6919      	ldr	r1, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	461a      	mov	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e004      	b.n	8002d68 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d9b3      	bls.n	8002cdc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9e:	60da      	str	r2, [r3, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e175      	b.n	80030b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	f040 8164 	bne.w	80030b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d005      	beq.n	8002e02 <HAL_GPIO_Init+0x56>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d130      	bne.n	8002e64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e38:	2201      	movs	r2, #1
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 0201 	and.w	r2, r3, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d017      	beq.n	8002ea0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d123      	bne.n	8002ef4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	08da      	lsrs	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3208      	adds	r2, #8
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	08da      	lsrs	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3208      	adds	r2, #8
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0203 	and.w	r2, r3, #3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80be 	beq.w	80030b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	4b66      	ldr	r3, [pc, #408]	@ (80030d0 <HAL_GPIO_Init+0x324>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	4a65      	ldr	r2, [pc, #404]	@ (80030d0 <HAL_GPIO_Init+0x324>)
 8002f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f42:	4b63      	ldr	r3, [pc, #396]	@ (80030d0 <HAL_GPIO_Init+0x324>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f4e:	4a61      	ldr	r2, [pc, #388]	@ (80030d4 <HAL_GPIO_Init+0x328>)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3302      	adds	r3, #2
 8002f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a58      	ldr	r2, [pc, #352]	@ (80030d8 <HAL_GPIO_Init+0x32c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d037      	beq.n	8002fea <HAL_GPIO_Init+0x23e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a57      	ldr	r2, [pc, #348]	@ (80030dc <HAL_GPIO_Init+0x330>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d031      	beq.n	8002fe6 <HAL_GPIO_Init+0x23a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a56      	ldr	r2, [pc, #344]	@ (80030e0 <HAL_GPIO_Init+0x334>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d02b      	beq.n	8002fe2 <HAL_GPIO_Init+0x236>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a55      	ldr	r2, [pc, #340]	@ (80030e4 <HAL_GPIO_Init+0x338>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d025      	beq.n	8002fde <HAL_GPIO_Init+0x232>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a54      	ldr	r2, [pc, #336]	@ (80030e8 <HAL_GPIO_Init+0x33c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01f      	beq.n	8002fda <HAL_GPIO_Init+0x22e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a53      	ldr	r2, [pc, #332]	@ (80030ec <HAL_GPIO_Init+0x340>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d019      	beq.n	8002fd6 <HAL_GPIO_Init+0x22a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	@ (80030f0 <HAL_GPIO_Init+0x344>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_GPIO_Init+0x226>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a51      	ldr	r2, [pc, #324]	@ (80030f4 <HAL_GPIO_Init+0x348>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00d      	beq.n	8002fce <HAL_GPIO_Init+0x222>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a50      	ldr	r2, [pc, #320]	@ (80030f8 <HAL_GPIO_Init+0x34c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d007      	beq.n	8002fca <HAL_GPIO_Init+0x21e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80030fc <HAL_GPIO_Init+0x350>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_GPIO_Init+0x21a>
 8002fc2:	2309      	movs	r3, #9
 8002fc4:	e012      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fc6:	230a      	movs	r3, #10
 8002fc8:	e010      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fca:	2308      	movs	r3, #8
 8002fcc:	e00e      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fce:	2307      	movs	r3, #7
 8002fd0:	e00c      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fd2:	2306      	movs	r3, #6
 8002fd4:	e00a      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	e008      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e004      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e002      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_GPIO_Init+0x240>
 8002fea:	2300      	movs	r3, #0
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	f002 0203 	and.w	r2, r2, #3
 8002ff2:	0092      	lsls	r2, r2, #2
 8002ff4:	4093      	lsls	r3, r2
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ffc:	4935      	ldr	r1, [pc, #212]	@ (80030d4 <HAL_GPIO_Init+0x328>)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800300a:	4b3d      	ldr	r3, [pc, #244]	@ (8003100 <HAL_GPIO_Init+0x354>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800302e:	4a34      	ldr	r2, [pc, #208]	@ (8003100 <HAL_GPIO_Init+0x354>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003034:	4b32      	ldr	r3, [pc, #200]	@ (8003100 <HAL_GPIO_Init+0x354>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003058:	4a29      	ldr	r2, [pc, #164]	@ (8003100 <HAL_GPIO_Init+0x354>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800305e:	4b28      	ldr	r3, [pc, #160]	@ (8003100 <HAL_GPIO_Init+0x354>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003082:	4a1f      	ldr	r2, [pc, #124]	@ (8003100 <HAL_GPIO_Init+0x354>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003088:	4b1d      	ldr	r3, [pc, #116]	@ (8003100 <HAL_GPIO_Init+0x354>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ac:	4a14      	ldr	r2, [pc, #80]	@ (8003100 <HAL_GPIO_Init+0x354>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	f67f ae86 	bls.w	8002dcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40013800 	.word	0x40013800
 80030d8:	40020000 	.word	0x40020000
 80030dc:	40020400 	.word	0x40020400
 80030e0:	40020800 	.word	0x40020800
 80030e4:	40020c00 	.word	0x40020c00
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40021400 	.word	0x40021400
 80030f0:	40021800 	.word	0x40021800
 80030f4:	40021c00 	.word	0x40021c00
 80030f8:	40022000 	.word	0x40022000
 80030fc:	40022400 	.word	0x40022400
 8003100:	40013c00 	.word	0x40013c00

08003104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e001      	b.n	8003126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003150:	e003      	b.n	800315a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	619a      	str	r2, [r3, #24]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4013      	ands	r3, r2
 800317e:	041a      	lsls	r2, r3, #16
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43d9      	mvns	r1, r3
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	400b      	ands	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	619a      	str	r2, [r3, #24]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e08b      	b.n	80032c6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe fa82 	bl	80016cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	@ 0x24
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e006      	b.n	8003224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d108      	bne.n	800323e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	e007      	b.n	800324e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800324c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <HAL_I2C_Init+0x134>)
 800325a:	430b      	orrs	r3, r1
 800325c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800326c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	02008000 	.word	0x02008000

080032d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
 80032e4:	4613      	mov	r3, r2
 80032e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	f040 80fd 	bne.w	80034f0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x30>
 8003300:	2302      	movs	r3, #2
 8003302:	e0f6      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800330c:	f7fe fcbc 	bl	8001c88 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2319      	movs	r3, #25
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f914 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e1      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2221      	movs	r2, #33	@ 0x21
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2210      	movs	r2, #16
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	893a      	ldrh	r2, [r7, #8]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2bff      	cmp	r3, #255	@ 0xff
 800335e:	d906      	bls.n	800336e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	22ff      	movs	r2, #255	@ 0xff
 8003364:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e007      	b.n	800337e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003378:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800337c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	4b4e      	ldr	r3, [pc, #312]	@ (80034fc <HAL_I2C_Master_Transmit+0x228>)
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fa83 	bl	80038d4 <I2C_TransferConfig>
 80033ce:	e066      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	4b48      	ldr	r3, [pc, #288]	@ (80034fc <HAL_I2C_Master_Transmit+0x228>)
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fa78 	bl	80038d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033e4:	e05b      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	6a39      	ldr	r1, [r7, #32]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f907 	bl	80035fe <I2C_WaitOnTXISFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07b      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d034      	beq.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d130      	bne.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	2200      	movs	r2, #0
 8003444:	2180      	movs	r1, #128	@ 0x80
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f880 	bl	800354c <I2C_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e04d      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2bff      	cmp	r3, #255	@ 0xff
 800345e:	d90e      	bls.n	800347e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	22ff      	movs	r2, #255	@ 0xff
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	b2da      	uxtb	r2, r3
 800346c:	8979      	ldrh	r1, [r7, #10]
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa2c 	bl	80038d4 <I2C_TransferConfig>
 800347c:	e00f      	b.n	800349e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348c:	b2da      	uxtb	r2, r3
 800348e:	8979      	ldrh	r1, [r7, #10]
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa1b 	bl	80038d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d19e      	bne.n	80033e6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	6a39      	ldr	r1, [r7, #32]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f8ed 	bl	800368c <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e01a      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <HAL_I2C_Master_Transmit+0x22c>)
 80034d0:	400b      	ands	r3, r1
 80034d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	80002000 	.word	0x80002000
 8003500:	fe00e800 	.word	0xfe00e800

08003504 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d103      	bne.n	8003522 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d007      	beq.n	8003540 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	619a      	str	r2, [r3, #24]
  }
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355c:	e03b      	b.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	6839      	ldr	r1, [r7, #0]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f8d6 	bl	8003714 <I2C_IsErrorOccurred>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e041      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d02d      	beq.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357a:	f7fe fb85 	bl	8001c88 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x44>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d122      	bne.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d113      	bne.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00f      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d0b4      	beq.n	800355e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800360a:	e033      	b.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f87f 	bl	8003714 <I2C_IsErrorOccurred>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e031      	b.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d025      	beq.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	f7fe fb2e 	bl	8001c88 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11a      	bne.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d013      	beq.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e007      	b.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d1c4      	bne.n	800360c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003698:	e02f      	b.n	80036fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f838 	bl	8003714 <I2C_IsErrorOccurred>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e02d      	b.n	800370a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7fe faeb 	bl	8001c88 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11a      	bne.n	80036fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d013      	beq.n	80036fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e007      	b.n	800370a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b20      	cmp	r3, #32
 8003706:	d1c8      	bne.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	@ 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	d068      	beq.n	8003812 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003748:	e049      	b.n	80037de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d045      	beq.n	80037de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe fa99 	bl	8001c88 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_IsErrorOccurred+0x54>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d13a      	bne.n	80037de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003772:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800377a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800378a:	d121      	bne.n	80037d0 <I2C_IsErrorOccurred+0xbc>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003792:	d01d      	beq.n	80037d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b20      	cmp	r3, #32
 8003798:	d01a      	beq.n	80037d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037aa:	f7fe fa6d 	bl	8001c88 <HAL_GetTick>
 80037ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037b0:	e00e      	b.n	80037d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037b2:	f7fe fa69 	bl	8001c88 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b19      	cmp	r3, #25
 80037be:	d907      	bls.n	80037d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	f043 0320 	orr.w	r3, r3, #32
 80037c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80037ce:	e006      	b.n	80037de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d1e9      	bne.n	80037b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d003      	beq.n	80037f4 <I2C_IsErrorOccurred+0xe0>
 80037ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0aa      	beq.n	800374a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2220      	movs	r2, #32
 8003802:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003834:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003856:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	f043 0302 	orr.w	r3, r3, #2
 800386e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01c      	beq.n	80038c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fe3b 	bl	8003504 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <I2C_IsErrorOccurred+0x1bc>)
 800389a:	400b      	ands	r3, r1
 800389c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80038c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3728      	adds	r7, #40	@ 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	fe00e800 	.word	0xfe00e800

080038d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	817b      	strh	r3, [r7, #10]
 80038e2:	4613      	mov	r3, r2
 80038e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ec:	7a7b      	ldrb	r3, [r7, #9]
 80038ee:	041b      	lsls	r3, r3, #16
 80038f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038f4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003902:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	0d5b      	lsrs	r3, r3, #21
 800390e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003912:	4b08      	ldr	r3, [pc, #32]	@ (8003934 <I2C_TransferConfig+0x60>)
 8003914:	430b      	orrs	r3, r1
 8003916:	43db      	mvns	r3, r3
 8003918:	ea02 0103 	and.w	r1, r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	03ff63ff 	.word	0x03ff63ff

08003938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b20      	cmp	r3, #32
 800394c:	d138      	bne.n	80039c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003958:	2302      	movs	r3, #2
 800395a:	e032      	b.n	80039c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	@ 0x24
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800398a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d139      	bne.n	8003a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e033      	b.n	8003a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2224      	movs	r2, #36	@ 0x24
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af02      	add	r7, sp, #8
 8003a6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e108      	b.n	8003c8a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fefa 	bl	800188c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa6:	d102      	bne.n	8003aae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 fc14 	bl	80062e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7c1a      	ldrb	r2, [r3, #16]
 8003ac0:	f88d 2000 	strb.w	r2, [sp]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac8:	f002 fbb0 	bl	800622c <USB_CoreInit>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0d5      	b.n	8003c8a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 fc0c 	bl	8006302 <USB_SetCurrentMode>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0c6      	b.n	8003c8a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e04a      	b.n	8003b98 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3315      	adds	r3, #21
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	3314      	adds	r3, #20
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	b298      	uxth	r0, r3
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	332e      	adds	r3, #46	@ 0x2e
 8003b3e:	4602      	mov	r2, r0
 8003b40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3318      	adds	r3, #24
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	331c      	adds	r3, #28
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b6a:	7bfa      	ldrb	r2, [r7, #15]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3320      	adds	r3, #32
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3324      	adds	r3, #36	@ 0x24
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	3301      	adds	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	791b      	ldrb	r3, [r3, #4]
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3af      	bcc.n	8003b02 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	e044      	b.n	8003c32 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	791b      	ldrb	r3, [r3, #4]
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3b5      	bcc.n	8003ba8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7c1a      	ldrb	r2, [r3, #16]
 8003c44:	f88d 2000 	strb.w	r2, [sp]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4c:	f002 fba6 	bl	800639c <USB_DevInit>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e013      	b.n	8003c8a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7b1b      	ldrb	r3, [r3, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d102      	bne.n	8003c7e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f80b 	bl	8003c94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f002 fd61 	bl	800674a <USB_DevDisconnect>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cc2:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	10000003 	.word	0x10000003

08003cdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40007000 	.word	0x40007000

08003cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	4a22      	ldr	r2, [pc, #136]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d12:	4b20      	ldr	r3, [pc, #128]	@ (8003d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d2a:	f7fd ffad 	bl	8001c88 <HAL_GetTick>
 8003d2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d30:	e009      	b.n	8003d46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d32:	f7fd ffa9 	bl	8001c88 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d40:	d901      	bls.n	8003d46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e022      	b.n	8003d8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d46:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d52:	d1ee      	bne.n	8003d32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d54:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0f      	ldr	r2, [pc, #60]	@ (8003d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d60:	f7fd ff92 	bl	8001c88 <HAL_GetTick>
 8003d64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d66:	e009      	b.n	8003d7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d68:	f7fd ff8e 	bl	8001c88 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d76:	d901      	bls.n	8003d7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e007      	b.n	8003d8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d88:	d1ee      	bne.n	8003d68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40007000 	.word	0x40007000

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003da4:	2300      	movs	r3, #0
 8003da6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e29b      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8087 	beq.w	8003ece <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc0:	4b96      	ldr	r3, [pc, #600]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d00c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dcc:	4b93      	ldr	r3, [pc, #588]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d112      	bne.n	8003dfe <HAL_RCC_OscConfig+0x62>
 8003dd8:	4b90      	ldr	r3, [pc, #576]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de4:	d10b      	bne.n	8003dfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de6:	4b8d      	ldr	r3, [pc, #564]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d06c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x130>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d168      	bne.n	8003ecc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e275      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x7a>
 8003e08:	4b84      	ldr	r3, [pc, #528]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a83      	ldr	r2, [pc, #524]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e02e      	b.n	8003e74 <HAL_RCC_OscConfig+0xd8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x9c>
 8003e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7e      	ldr	r2, [pc, #504]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xd8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e42:	4b76      	ldr	r3, [pc, #472]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b73      	ldr	r3, [pc, #460]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a72      	ldr	r2, [pc, #456]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xd8>
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6e      	ldr	r2, [pc, #440]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b6c      	ldr	r3, [pc, #432]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ff04 	bl	8001c88 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd ff00 	bl	8001c88 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e229      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b61      	ldr	r3, [pc, #388]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fef0 	bl	8001c88 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd feec 	bl	8001c88 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e215      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b57      	ldr	r3, [pc, #348]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x110>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d069      	beq.n	8003fae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eda:	4b50      	ldr	r3, [pc, #320]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d11c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x190>
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d116      	bne.n	8003f2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	4b47      	ldr	r3, [pc, #284]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x17a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e1e9      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f16:	4b41      	ldr	r3, [pc, #260]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	493d      	ldr	r1, [pc, #244]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	e040      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d023      	beq.n	8003f7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f34:	4b39      	ldr	r3, [pc, #228]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a38      	ldr	r2, [pc, #224]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd fea2 	bl	8001c88 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fd fe9e 	bl	8001c88 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1c7      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5a:	4b30      	ldr	r3, [pc, #192]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4929      	ldr	r1, [pc, #164]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]
 8003f7a:	e018      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7c:	4b27      	ldr	r3, [pc, #156]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a26      	ldr	r2, [pc, #152]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd fe7e 	bl	8001c88 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fd fe7a 	bl	8001c88 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1a3      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d038      	beq.n	800402c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d019      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b16      	ldr	r3, [pc, #88]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc6:	4a15      	ldr	r2, [pc, #84]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fd fe5b 	bl	8001c88 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd6:	f7fd fe57 	bl	8001c88 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e180      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x23a>
 8003ff4:	e01a      	b.n	800402c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffa:	4a08      	ldr	r2, [pc, #32]	@ (800401c <HAL_RCC_OscConfig+0x280>)
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fd fe41 	bl	8001c88 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400a:	f7fd fe3d 	bl	8001c88 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d903      	bls.n	8004020 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e166      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
 800401c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004020:	4b92      	ldr	r3, [pc, #584]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ee      	bne.n	800400a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a4 	beq.w	8004182 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b8c      	ldr	r3, [pc, #560]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	4b89      	ldr	r3, [pc, #548]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	4a88      	ldr	r2, [pc, #544]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004050:	6413      	str	r3, [r2, #64]	@ 0x40
 8004052:	4b86      	ldr	r3, [pc, #536]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405e:	2301      	movs	r3, #1
 8004060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004062:	4b83      	ldr	r3, [pc, #524]	@ (8004270 <HAL_RCC_OscConfig+0x4d4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d118      	bne.n	80040a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800406e:	4b80      	ldr	r3, [pc, #512]	@ (8004270 <HAL_RCC_OscConfig+0x4d4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7f      	ldr	r2, [pc, #508]	@ (8004270 <HAL_RCC_OscConfig+0x4d4>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407a:	f7fd fe05 	bl	8001c88 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fd fe01 	bl	8001c88 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	@ 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e12a      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004094:	4b76      	ldr	r3, [pc, #472]	@ (8004270 <HAL_RCC_OscConfig+0x4d4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x31a>
 80040a8:	4b70      	ldr	r3, [pc, #448]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ac:	4a6f      	ldr	r2, [pc, #444]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b4:	e02d      	b.n	8004112 <HAL_RCC_OscConfig+0x376>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x33c>
 80040be:	4b6b      	ldr	r3, [pc, #428]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c2:	4a6a      	ldr	r2, [pc, #424]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ca:	4b68      	ldr	r3, [pc, #416]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ce:	4a67      	ldr	r2, [pc, #412]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d6:	e01c      	b.n	8004112 <HAL_RCC_OscConfig+0x376>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d10c      	bne.n	80040fa <HAL_RCC_OscConfig+0x35e>
 80040e0:	4b62      	ldr	r3, [pc, #392]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e4:	4a61      	ldr	r2, [pc, #388]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	f043 0304 	orr.w	r3, r3, #4
 80040ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ec:	4b5f      	ldr	r3, [pc, #380]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f0:	4a5e      	ldr	r2, [pc, #376]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f8:	e00b      	b.n	8004112 <HAL_RCC_OscConfig+0x376>
 80040fa:	4b5c      	ldr	r3, [pc, #368]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	4a5b      	ldr	r2, [pc, #364]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6713      	str	r3, [r2, #112]	@ 0x70
 8004106:	4b59      	ldr	r3, [pc, #356]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410a:	4a58      	ldr	r2, [pc, #352]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d015      	beq.n	8004146 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411a:	f7fd fdb5 	bl	8001c88 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fd fdb1 	bl	8001c88 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e0d8      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	4b4c      	ldr	r3, [pc, #304]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ee      	beq.n	8004122 <HAL_RCC_OscConfig+0x386>
 8004144:	e014      	b.n	8004170 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd fd9f 	bl	8001c88 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	e00a      	b.n	8004164 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fd fd9b 	bl	8001c88 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0c2      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004164:	4b41      	ldr	r3, [pc, #260]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ee      	bne.n	800414e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d105      	bne.n	8004182 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004176:	4b3d      	ldr	r3, [pc, #244]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4a3c      	ldr	r2, [pc, #240]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800417c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80ae 	beq.w	80042e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418c:	4b37      	ldr	r3, [pc, #220]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b08      	cmp	r3, #8
 8004196:	d06d      	beq.n	8004274 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d14b      	bne.n	8004238 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a0:	4b32      	ldr	r3, [pc, #200]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a31      	ldr	r2, [pc, #196]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80041a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd fd6c 	bl	8001c88 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fd fd68 	bl	8001c88 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e091      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	4b29      	ldr	r3, [pc, #164]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	019b      	lsls	r3, r3, #6
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	3b01      	subs	r3, #1
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	061b      	lsls	r3, r3, #24
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	071b      	lsls	r3, r3, #28
 80041fe:	491b      	ldr	r1, [pc, #108]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004204:	4b19      	ldr	r3, [pc, #100]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a18      	ldr	r2, [pc, #96]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800420a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800420e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fd3a 	bl	8001c88 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7fd fd36 	bl	8001c88 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e05f      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x47c>
 8004236:	e057      	b.n	80042e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004238:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a0b      	ldr	r2, [pc, #44]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 800423e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd fd20 	bl	8001c88 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fd fd1c 	bl	8001c88 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e045      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b03      	ldr	r3, [pc, #12]	@ (800426c <HAL_RCC_OscConfig+0x4d0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x4b0>
 800426a:	e03d      	b.n	80042e8 <HAL_RCC_OscConfig+0x54c>
 800426c:	40023800 	.word	0x40023800
 8004270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004274:	4b1f      	ldr	r3, [pc, #124]	@ (80042f4 <HAL_RCC_OscConfig+0x558>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d030      	beq.n	80042e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d129      	bne.n	80042e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d122      	bne.n	80042e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042a4:	4013      	ands	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d119      	bne.n	80042e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	3b01      	subs	r3, #1
 80042be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d10f      	bne.n	80042e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800

080042f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0d0      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b6a      	ldr	r3, [pc, #424]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d910      	bls.n	8004340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b67      	ldr	r3, [pc, #412]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 020f 	bic.w	r2, r3, #15
 8004326:	4965      	ldr	r1, [pc, #404]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b63      	ldr	r3, [pc, #396]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0b8      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004358:	4b59      	ldr	r3, [pc, #356]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a58      	ldr	r2, [pc, #352]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800435e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004370:	4b53      	ldr	r3, [pc, #332]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a52      	ldr	r2, [pc, #328]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800437a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437c:	4b50      	ldr	r3, [pc, #320]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	494d      	ldr	r1, [pc, #308]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d040      	beq.n	800441c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d115      	bne.n	80043da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07f      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b41      	ldr	r3, [pc, #260]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e073      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3d      	ldr	r3, [pc, #244]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e06b      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4936      	ldr	r1, [pc, #216]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ec:	f7fd fc4c 	bl	8001c88 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fd fc48 	bl	8001c88 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e053      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2d      	ldr	r3, [pc, #180]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b27      	ldr	r3, [pc, #156]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d210      	bcs.n	800444c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b24      	ldr	r3, [pc, #144]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 020f 	bic.w	r2, r3, #15
 8004432:	4922      	ldr	r1, [pc, #136]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b20      	ldr	r3, [pc, #128]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e032      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004458:	4b19      	ldr	r3, [pc, #100]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4916      	ldr	r1, [pc, #88]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004476:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	490e      	ldr	r1, [pc, #56]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800448a:	f000 f821 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 800448e:	4602      	mov	r2, r0
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	490a      	ldr	r1, [pc, #40]	@ (80044c4 <HAL_RCC_ClockConfig+0x1cc>)
 800449c:	5ccb      	ldrb	r3, [r1, r3]
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	4a09      	ldr	r2, [pc, #36]	@ (80044c8 <HAL_RCC_ClockConfig+0x1d0>)
 80044a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044a6:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <HAL_RCC_ClockConfig+0x1d4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd fa68 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023c00 	.word	0x40023c00
 80044c0:	40023800 	.word	0x40023800
 80044c4:	0800db38 	.word	0x0800db38
 80044c8:	20000000 	.word	0x20000000
 80044cc:	20000004 	.word	0x20000004

080044d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d4:	b094      	sub	sp, #80	@ 0x50
 80044d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	647b      	str	r3, [r7, #68]	@ 0x44
 80044dc:	2300      	movs	r3, #0
 80044de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e0:	2300      	movs	r3, #0
 80044e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e8:	4b79      	ldr	r3, [pc, #484]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d00d      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x40>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	f200 80e1 	bhi.w	80046bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x34>
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d003      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x3a>
 8004502:	e0db      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b73      	ldr	r3, [pc, #460]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004506:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004508:	e0db      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800450a:	4b73      	ldr	r3, [pc, #460]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800450c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800450e:	e0d8      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004510:	4b6f      	ldr	r3, [pc, #444]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004518:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800451a:	4b6d      	ldr	r3, [pc, #436]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d063      	beq.n	80045ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004526:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	099b      	lsrs	r3, r3, #6
 800452c:	2200      	movs	r2, #0
 800452e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004530:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004538:	633b      	str	r3, [r7, #48]	@ 0x30
 800453a:	2300      	movs	r3, #0
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
 800453e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004542:	4622      	mov	r2, r4
 8004544:	462b      	mov	r3, r5
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	0159      	lsls	r1, r3, #5
 8004550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004554:	0150      	lsls	r0, r2, #5
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4621      	mov	r1, r4
 800455c:	1a51      	subs	r1, r2, r1
 800455e:	6139      	str	r1, [r7, #16]
 8004560:	4629      	mov	r1, r5
 8004562:	eb63 0301 	sbc.w	r3, r3, r1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004574:	4659      	mov	r1, fp
 8004576:	018b      	lsls	r3, r1, #6
 8004578:	4651      	mov	r1, sl
 800457a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800457e:	4651      	mov	r1, sl
 8004580:	018a      	lsls	r2, r1, #6
 8004582:	4651      	mov	r1, sl
 8004584:	ebb2 0801 	subs.w	r8, r2, r1
 8004588:	4659      	mov	r1, fp
 800458a:	eb63 0901 	sbc.w	r9, r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a2:	4690      	mov	r8, r2
 80045a4:	4699      	mov	r9, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	eb18 0303 	adds.w	r3, r8, r3
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	462b      	mov	r3, r5
 80045b0:	eb49 0303 	adc.w	r3, r9, r3
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045c2:	4629      	mov	r1, r5
 80045c4:	024b      	lsls	r3, r1, #9
 80045c6:	4621      	mov	r1, r4
 80045c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045cc:	4621      	mov	r1, r4
 80045ce:	024a      	lsls	r2, r1, #9
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d6:	2200      	movs	r2, #0
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045e0:	f7fb fe7e 	bl	80002e0 <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4613      	mov	r3, r2
 80045ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ec:	e058      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ee:	4b38      	ldr	r3, [pc, #224]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	099b      	lsrs	r3, r3, #6
 80045f4:	2200      	movs	r2, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	4611      	mov	r1, r2
 80045fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	2300      	movs	r3, #0
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
 8004604:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	f04f 0000 	mov.w	r0, #0
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	0159      	lsls	r1, r3, #5
 8004616:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800461a:	0150      	lsls	r0, r2, #5
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4641      	mov	r1, r8
 8004622:	ebb2 0a01 	subs.w	sl, r2, r1
 8004626:	4649      	mov	r1, r9
 8004628:	eb63 0b01 	sbc.w	fp, r3, r1
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004638:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800463c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004640:	ebb2 040a 	subs.w	r4, r2, sl
 8004644:	eb63 050b 	sbc.w	r5, r3, fp
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	00eb      	lsls	r3, r5, #3
 8004652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004656:	00e2      	lsls	r2, r4, #3
 8004658:	4614      	mov	r4, r2
 800465a:	461d      	mov	r5, r3
 800465c:	4643      	mov	r3, r8
 800465e:	18e3      	adds	r3, r4, r3
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	464b      	mov	r3, r9
 8004664:	eb45 0303 	adc.w	r3, r5, r3
 8004668:	607b      	str	r3, [r7, #4]
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004676:	4629      	mov	r1, r5
 8004678:	028b      	lsls	r3, r1, #10
 800467a:	4621      	mov	r1, r4
 800467c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004680:	4621      	mov	r1, r4
 8004682:	028a      	lsls	r2, r1, #10
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800468a:	2200      	movs	r2, #0
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	61fa      	str	r2, [r7, #28]
 8004690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004694:	f7fb fe24 	bl	80002e0 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4613      	mov	r3, r2
 800469e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0c1b      	lsrs	r3, r3, #16
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	3301      	adds	r3, #1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ba:	e002      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3750      	adds	r7, #80	@ 0x50
 80046c8:	46bd      	mov	sp, r7
 80046ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	00f42400 	.word	0x00f42400
 80046d8:	007a1200 	.word	0x007a1200

080046dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e0:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000000 	.word	0x20000000

080046f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f8:	f7ff fff0 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0a9b      	lsrs	r3, r3, #10
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	@ (8004718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	0800db48 	.word	0x0800db48

0800471c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004720:	f7ff ffdc 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0b5b      	lsrs	r3, r3, #13
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	@ (8004740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	0800db48 	.word	0x0800db48

08004744 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	220f      	movs	r2, #15
 8004752:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004754:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0203 	and.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004760:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800476c:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004778:	4b09      	ldr	r3, [pc, #36]	@ (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004786:	4b07      	ldr	r3, [pc, #28]	@ (80047a4 <HAL_RCC_GetClockConfig+0x60>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	601a      	str	r2, [r3, #0]
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40023c00 	.word	0x40023c00

080047a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d012      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047d0:	4b69      	ldr	r3, [pc, #420]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a68      	ldr	r2, [pc, #416]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047da:	6093      	str	r3, [r2, #8]
 80047dc:	4b66      	ldr	r3, [pc, #408]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e4:	4964      	ldr	r1, [pc, #400]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d017      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004802:	4b5d      	ldr	r3, [pc, #372]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004808:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004810:	4959      	ldr	r1, [pc, #356]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004820:	d101      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d017      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800483e:	4b4e      	ldr	r3, [pc, #312]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004844:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	494a      	ldr	r1, [pc, #296]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800485c:	d101      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800487a:	2301      	movs	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 808b 	beq.w	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800488c:	4b3a      	ldr	r3, [pc, #232]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	4a39      	ldr	r2, [pc, #228]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004896:	6413      	str	r3, [r2, #64]	@ 0x40
 8004898:	4b37      	ldr	r3, [pc, #220]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048a4:	4b35      	ldr	r3, [pc, #212]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a34      	ldr	r2, [pc, #208]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fd f9ea 	bl	8001c88 <HAL_GetTick>
 80048b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd f9e6 	bl	8001c88 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	@ 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e38f      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048ca:	4b2c      	ldr	r3, [pc, #176]	@ (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048d6:	4b28      	ldr	r3, [pc, #160]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d035      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d02e      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f4:	4b20      	ldr	r3, [pc, #128]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004908:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800490a:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490e:	4a1a      	ldr	r2, [pc, #104]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004914:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800491c:	4b16      	ldr	r3, [pc, #88]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d114      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd f9ae 	bl	8001c88 <HAL_GetTick>
 800492c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	e00a      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd f9aa 	bl	8001c88 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e351      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004946:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800495e:	d111      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004960:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800496c:	4b04      	ldr	r3, [pc, #16]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800496e:	400b      	ands	r3, r1
 8004970:	4901      	ldr	r1, [pc, #4]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
 8004976:	e00b      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004978:	40023800 	.word	0x40023800
 800497c:	40007000 	.word	0x40007000
 8004980:	0ffffcff 	.word	0x0ffffcff
 8004984:	4bac      	ldr	r3, [pc, #688]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4aab      	ldr	r2, [pc, #684]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800498e:	6093      	str	r3, [r2, #8]
 8004990:	4ba9      	ldr	r3, [pc, #676]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004992:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	49a6      	ldr	r1, [pc, #664]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049ae:	4ba2      	ldr	r3, [pc, #648]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049b4:	4aa0      	ldr	r2, [pc, #640]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049be:	4b9e      	ldr	r3, [pc, #632]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	499b      	ldr	r1, [pc, #620]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049dc:	4b96      	ldr	r3, [pc, #600]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049ea:	4993      	ldr	r1, [pc, #588]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049fe:	4b8e      	ldr	r3, [pc, #568]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a0c:	498a      	ldr	r1, [pc, #552]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a20:	4b85      	ldr	r3, [pc, #532]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a2e:	4982      	ldr	r1, [pc, #520]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a42:	4b7d      	ldr	r3, [pc, #500]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a50:	4979      	ldr	r1, [pc, #484]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a64:	4b74      	ldr	r3, [pc, #464]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	4971      	ldr	r1, [pc, #452]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a86:	4b6c      	ldr	r3, [pc, #432]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8c:	f023 020c 	bic.w	r2, r3, #12
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a94:	4968      	ldr	r1, [pc, #416]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aa8:	4b63      	ldr	r3, [pc, #396]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	4960      	ldr	r1, [pc, #384]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aca:	4b5b      	ldr	r3, [pc, #364]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad8:	4957      	ldr	r1, [pc, #348]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aec:	4b52      	ldr	r3, [pc, #328]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afa:	494f      	ldr	r1, [pc, #316]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1c:	4946      	ldr	r1, [pc, #280]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b30:	4b41      	ldr	r3, [pc, #260]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3e:	493e      	ldr	r1, [pc, #248]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b52:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b60:	4935      	ldr	r1, [pc, #212]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b74:	4b30      	ldr	r3, [pc, #192]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b82:	492d      	ldr	r1, [pc, #180]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d011      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b96:	4b28      	ldr	r3, [pc, #160]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba4:	4924      	ldr	r1, [pc, #144]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bd6:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bdc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be4:	4914      	ldr	r1, [pc, #80]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c08:	490b      	ldr	r1, [pc, #44]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00f      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c2c:	4902      	ldr	r1, [pc, #8]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c34:	e002      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c48:	4b8a      	ldr	r3, [pc, #552]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c58:	4986      	ldr	r1, [pc, #536]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c6c:	4b81      	ldr	r3, [pc, #516]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c7c:	497d      	ldr	r1, [pc, #500]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d006      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80d6 	beq.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c98:	4b76      	ldr	r3, [pc, #472]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a75      	ldr	r2, [pc, #468]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fc fff0 	bl	8001c88 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cac:	f7fc ffec 	bl	8001c88 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e195      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d021      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11d      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cde:	4b65      	ldr	r3, [pc, #404]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cec:	4b61      	ldr	r3, [pc, #388]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf2:	0e1b      	lsrs	r3, r3, #24
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	019a      	lsls	r2, r3, #6
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	061b      	lsls	r3, r3, #24
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	4958      	ldr	r1, [pc, #352]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02e      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d44:	d129      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d46:	4b4b      	ldr	r3, [pc, #300]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d54:	4b47      	ldr	r3, [pc, #284]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d5a:	0f1b      	lsrs	r3, r3, #28
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	019a      	lsls	r2, r3, #6
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	061b      	lsls	r3, r3, #24
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	071b      	lsls	r3, r3, #28
 8004d7a:	493e      	ldr	r1, [pc, #248]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d82:	4b3c      	ldr	r3, [pc, #240]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d88:	f023 021f 	bic.w	r2, r3, #31
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	3b01      	subs	r3, #1
 8004d92:	4938      	ldr	r1, [pc, #224]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01d      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004da6:	4b33      	ldr	r3, [pc, #204]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dac:	0e1b      	lsrs	r3, r3, #24
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004db4:	4b2f      	ldr	r3, [pc, #188]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dba:	0f1b      	lsrs	r3, r3, #28
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	019a      	lsls	r2, r3, #6
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	071b      	lsls	r3, r3, #28
 8004dda:	4926      	ldr	r1, [pc, #152]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	019a      	lsls	r2, r3, #6
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	491a      	ldr	r1, [pc, #104]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1e:	f7fc ff33 	bl	8001c88 <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e26:	f7fc ff2f 	bl	8001c88 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b64      	cmp	r3, #100	@ 0x64
 8004e32:	d901      	bls.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d8      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	f040 80ce 	bne.w	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a08      	ldr	r2, [pc, #32]	@ (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fc ff16 	bl	8001c88 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e60:	f7fc ff12 	bl	8001c88 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	@ 0x64
 8004e6c:	d904      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0bb      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e78:	4b5e      	ldr	r3, [pc, #376]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e84:	d0ec      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02e      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d12a      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eae:	4b51      	ldr	r3, [pc, #324]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	0f1b      	lsrs	r3, r3, #28
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	019a      	lsls	r2, r3, #6
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	061b      	lsls	r3, r3, #24
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	071b      	lsls	r3, r3, #28
 8004ee2:	4944      	ldr	r1, [pc, #272]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eea:	4b42      	ldr	r3, [pc, #264]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	493d      	ldr	r1, [pc, #244]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d022      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f18:	d11d      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f1a:	4b36      	ldr	r3, [pc, #216]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f20:	0e1b      	lsrs	r3, r3, #24
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f28:	4b32      	ldr	r3, [pc, #200]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2e:	0f1b      	lsrs	r3, r3, #28
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	019a      	lsls	r2, r3, #6
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	431a      	orrs	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	071b      	lsls	r3, r3, #28
 8004f4e:	4929      	ldr	r1, [pc, #164]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d028      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f62:	4b24      	ldr	r3, [pc, #144]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	0e1b      	lsrs	r3, r3, #24
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f70:	4b20      	ldr	r3, [pc, #128]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	019a      	lsls	r2, r3, #6
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	4917      	ldr	r1, [pc, #92]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	4911      	ldr	r1, [pc, #68]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc0:	f7fc fe62 	bl	8001c88 <HAL_GetTick>
 8004fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fc8:	f7fc fe5e 	bl	8001c88 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	@ 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e007      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fe6:	d1ef      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800

08004ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e049      	b.n	800509e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fbb4 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f000 fa4e 	bl	80054d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d001      	beq.n	80050c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e04c      	b.n	800515a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a26      	ldr	r2, [pc, #152]	@ (8005168 <HAL_TIM_Base_Start+0xc0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_TIM_Base_Start+0x70>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050da:	d01d      	beq.n	8005118 <HAL_TIM_Base_Start+0x70>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a22      	ldr	r2, [pc, #136]	@ (800516c <HAL_TIM_Base_Start+0xc4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_TIM_Base_Start+0x70>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a21      	ldr	r2, [pc, #132]	@ (8005170 <HAL_TIM_Base_Start+0xc8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_TIM_Base_Start+0x70>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005174 <HAL_TIM_Base_Start+0xcc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_TIM_Base_Start+0x70>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005178 <HAL_TIM_Base_Start+0xd0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_TIM_Base_Start+0x70>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <HAL_TIM_Base_Start+0xd4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIM_Base_Start+0x70>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <HAL_TIM_Base_Start+0xd8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d115      	bne.n	8005144 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	4b19      	ldr	r3, [pc, #100]	@ (8005184 <HAL_TIM_Base_Start+0xdc>)
 8005120:	4013      	ands	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b06      	cmp	r3, #6
 8005128:	d015      	beq.n	8005156 <HAL_TIM_Base_Start+0xae>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005130:	d011      	beq.n	8005156 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	e008      	b.n	8005156 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e000      	b.n	8005158 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40001800 	.word	0x40001800
 8005184:	00010007 	.word	0x00010007

08005188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d001      	beq.n	80051a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e054      	b.n	800524a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a26      	ldr	r2, [pc, #152]	@ (8005258 <HAL_TIM_Base_Start_IT+0xd0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d022      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x80>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ca:	d01d      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a22      	ldr	r2, [pc, #136]	@ (800525c <HAL_TIM_Base_Start_IT+0xd4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a21      	ldr	r2, [pc, #132]	@ (8005260 <HAL_TIM_Base_Start_IT+0xd8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x80>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005264 <HAL_TIM_Base_Start_IT+0xdc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x80>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <HAL_TIM_Base_Start_IT+0xe0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x80>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	@ (800526c <HAL_TIM_Base_Start_IT+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0x80>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_TIM_Base_Start_IT+0xe8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d115      	bne.n	8005234 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <HAL_TIM_Base_Start_IT+0xec>)
 8005210:	4013      	ands	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b06      	cmp	r3, #6
 8005218:	d015      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0xbe>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005220:	d011      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	e008      	b.n	8005246 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e000      	b.n	8005248 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40001800 	.word	0x40001800
 8005274:	00010007 	.word	0x00010007

08005278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0202 	mvn.w	r2, #2
 80052ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8e9 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8db 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f8ec 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0204 	mvn.w	r2, #4
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8c3 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8b5 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8c6 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0208 	mvn.w	r2, #8
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f89d 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f88f 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8a0 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d020      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01b      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2208      	movs	r2, #8
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f877 	bl	800549a <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f869 	bl	8005486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f87a 	bl	80054ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0201 	mvn.w	r2, #1
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc f83c 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f9a1 	bl	8005754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00c      	beq.n	8005436 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800542e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f999 	bl	8005768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f834 	bl	80054c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f06f 0220 	mvn.w	r2, #32
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f961 	bl	8005740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a43      	ldr	r2, [pc, #268]	@ (80055f8 <TIM_Base_SetConfig+0x120>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f6:	d00f      	beq.n	8005518 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a40      	ldr	r2, [pc, #256]	@ (80055fc <TIM_Base_SetConfig+0x124>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00b      	beq.n	8005518 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3f      	ldr	r2, [pc, #252]	@ (8005600 <TIM_Base_SetConfig+0x128>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d007      	beq.n	8005518 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3e      	ldr	r2, [pc, #248]	@ (8005604 <TIM_Base_SetConfig+0x12c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3d      	ldr	r2, [pc, #244]	@ (8005608 <TIM_Base_SetConfig+0x130>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d108      	bne.n	800552a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a32      	ldr	r2, [pc, #200]	@ (80055f8 <TIM_Base_SetConfig+0x120>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d02b      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005538:	d027      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a2f      	ldr	r2, [pc, #188]	@ (80055fc <TIM_Base_SetConfig+0x124>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d023      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2e      	ldr	r2, [pc, #184]	@ (8005600 <TIM_Base_SetConfig+0x128>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01f      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2d      	ldr	r2, [pc, #180]	@ (8005604 <TIM_Base_SetConfig+0x12c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01b      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2c      	ldr	r2, [pc, #176]	@ (8005608 <TIM_Base_SetConfig+0x130>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d017      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2b      	ldr	r2, [pc, #172]	@ (800560c <TIM_Base_SetConfig+0x134>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2a      	ldr	r2, [pc, #168]	@ (8005610 <TIM_Base_SetConfig+0x138>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a29      	ldr	r2, [pc, #164]	@ (8005614 <TIM_Base_SetConfig+0x13c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a28      	ldr	r2, [pc, #160]	@ (8005618 <TIM_Base_SetConfig+0x140>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a27      	ldr	r2, [pc, #156]	@ (800561c <TIM_Base_SetConfig+0x144>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a26      	ldr	r2, [pc, #152]	@ (8005620 <TIM_Base_SetConfig+0x148>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a0e      	ldr	r2, [pc, #56]	@ (80055f8 <TIM_Base_SetConfig+0x120>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0xf2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a10      	ldr	r2, [pc, #64]	@ (8005608 <TIM_Base_SetConfig+0x130>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d103      	bne.n	80055d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800
 8005618:	40001800 	.word	0x40001800
 800561c:	40001c00 	.word	0x40001c00
 8005620:	40002000 	.word	0x40002000

08005624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005638:	2302      	movs	r3, #2
 800563a:	e06d      	b.n	8005718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a30      	ldr	r2, [pc, #192]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2f      	ldr	r2, [pc, #188]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a20      	ldr	r2, [pc, #128]	@ (8005724 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d022      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ae:	d01d      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1d      	ldr	r2, [pc, #116]	@ (800572c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d018      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a15      	ldr	r2, [pc, #84]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d10c      	bne.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	40010000 	.word	0x40010000
 8005728:	40010400 	.word	0x40010400
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e040      	b.n	8005810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc f814 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2224      	movs	r2, #36	@ 0x24
 80057a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fb16 	bl	8005df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f8af 	bl	800592c <UART_SetConfig>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e01b      	b.n	8005810 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fb95 	bl	8005f38 <UART_CheckIdleState>
 800580e:	4603      	mov	r3, r0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	@ 0x28
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	4613      	mov	r3, r2
 8005826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800582c:	2b20      	cmp	r3, #32
 800582e:	d177      	bne.n	8005920 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_UART_Transmit+0x24>
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e070      	b.n	8005922 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2221      	movs	r2, #33	@ 0x21
 800584c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800584e:	f7fc fa1b 	bl	8001c88 <HAL_GetTick>
 8005852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586c:	d108      	bne.n	8005880 <HAL_UART_Transmit+0x68>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e003      	b.n	8005888 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005888:	e02f      	b.n	80058ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2200      	movs	r2, #0
 8005892:	2180      	movs	r1, #128	@ 0x80
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fbf7 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e03b      	b.n	8005922 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10b      	bne.n	80058c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	3302      	adds	r3, #2
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e007      	b.n	80058d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	781a      	ldrb	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1c9      	bne.n	800588a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2140      	movs	r1, #64	@ 0x40
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fbc1 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e005      	b.n	8005922 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4ba6      	ldr	r3, [pc, #664]	@ (8005bf0 <UART_SetConfig+0x2c4>)
 8005958:	4013      	ands	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	6979      	ldr	r1, [r7, #20]
 8005960:	430b      	orrs	r3, r1
 8005962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	430a      	orrs	r2, r1
 800599c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a94      	ldr	r2, [pc, #592]	@ (8005bf4 <UART_SetConfig+0x2c8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d120      	bne.n	80059ea <UART_SetConfig+0xbe>
 80059a8:	4b93      	ldr	r3, [pc, #588]	@ (8005bf8 <UART_SetConfig+0x2cc>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d816      	bhi.n	80059e4 <UART_SetConfig+0xb8>
 80059b6:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <UART_SetConfig+0x90>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059cd 	.word	0x080059cd
 80059c0:	080059d9 	.word	0x080059d9
 80059c4:	080059d3 	.word	0x080059d3
 80059c8:	080059df 	.word	0x080059df
 80059cc:	2301      	movs	r3, #1
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e150      	b.n	8005c74 <UART_SetConfig+0x348>
 80059d2:	2302      	movs	r3, #2
 80059d4:	77fb      	strb	r3, [r7, #31]
 80059d6:	e14d      	b.n	8005c74 <UART_SetConfig+0x348>
 80059d8:	2304      	movs	r3, #4
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e14a      	b.n	8005c74 <UART_SetConfig+0x348>
 80059de:	2308      	movs	r3, #8
 80059e0:	77fb      	strb	r3, [r7, #31]
 80059e2:	e147      	b.n	8005c74 <UART_SetConfig+0x348>
 80059e4:	2310      	movs	r3, #16
 80059e6:	77fb      	strb	r3, [r7, #31]
 80059e8:	e144      	b.n	8005c74 <UART_SetConfig+0x348>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a83      	ldr	r2, [pc, #524]	@ (8005bfc <UART_SetConfig+0x2d0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d132      	bne.n	8005a5a <UART_SetConfig+0x12e>
 80059f4:	4b80      	ldr	r3, [pc, #512]	@ (8005bf8 <UART_SetConfig+0x2cc>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b0c      	cmp	r3, #12
 8005a00:	d828      	bhi.n	8005a54 <UART_SetConfig+0x128>
 8005a02:	a201      	add	r2, pc, #4	@ (adr r2, 8005a08 <UART_SetConfig+0xdc>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005a55 	.word	0x08005a55
 8005a10:	08005a55 	.word	0x08005a55
 8005a14:	08005a55 	.word	0x08005a55
 8005a18:	08005a49 	.word	0x08005a49
 8005a1c:	08005a55 	.word	0x08005a55
 8005a20:	08005a55 	.word	0x08005a55
 8005a24:	08005a55 	.word	0x08005a55
 8005a28:	08005a43 	.word	0x08005a43
 8005a2c:	08005a55 	.word	0x08005a55
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a55 	.word	0x08005a55
 8005a38:	08005a4f 	.word	0x08005a4f
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e118      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a42:	2302      	movs	r3, #2
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e115      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e112      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a4e:	2308      	movs	r3, #8
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e10f      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a54:	2310      	movs	r3, #16
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e10c      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a68      	ldr	r2, [pc, #416]	@ (8005c00 <UART_SetConfig+0x2d4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d120      	bne.n	8005aa6 <UART_SetConfig+0x17a>
 8005a64:	4b64      	ldr	r3, [pc, #400]	@ (8005bf8 <UART_SetConfig+0x2cc>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a6e:	2b30      	cmp	r3, #48	@ 0x30
 8005a70:	d013      	beq.n	8005a9a <UART_SetConfig+0x16e>
 8005a72:	2b30      	cmp	r3, #48	@ 0x30
 8005a74:	d814      	bhi.n	8005aa0 <UART_SetConfig+0x174>
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d009      	beq.n	8005a8e <UART_SetConfig+0x162>
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d810      	bhi.n	8005aa0 <UART_SetConfig+0x174>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <UART_SetConfig+0x15c>
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d006      	beq.n	8005a94 <UART_SetConfig+0x168>
 8005a86:	e00b      	b.n	8005aa0 <UART_SetConfig+0x174>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	77fb      	strb	r3, [r7, #31]
 8005a8c:	e0f2      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e0ef      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a94:	2304      	movs	r3, #4
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e0ec      	b.n	8005c74 <UART_SetConfig+0x348>
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e0e9      	b.n	8005c74 <UART_SetConfig+0x348>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e0e6      	b.n	8005c74 <UART_SetConfig+0x348>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a56      	ldr	r2, [pc, #344]	@ (8005c04 <UART_SetConfig+0x2d8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d120      	bne.n	8005af2 <UART_SetConfig+0x1c6>
 8005ab0:	4b51      	ldr	r3, [pc, #324]	@ (8005bf8 <UART_SetConfig+0x2cc>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005abc:	d013      	beq.n	8005ae6 <UART_SetConfig+0x1ba>
 8005abe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ac0:	d814      	bhi.n	8005aec <UART_SetConfig+0x1c0>
 8005ac2:	2b80      	cmp	r3, #128	@ 0x80
 8005ac4:	d009      	beq.n	8005ada <UART_SetConfig+0x1ae>
 8005ac6:	2b80      	cmp	r3, #128	@ 0x80
 8005ac8:	d810      	bhi.n	8005aec <UART_SetConfig+0x1c0>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <UART_SetConfig+0x1a8>
 8005ace:	2b40      	cmp	r3, #64	@ 0x40
 8005ad0:	d006      	beq.n	8005ae0 <UART_SetConfig+0x1b4>
 8005ad2:	e00b      	b.n	8005aec <UART_SetConfig+0x1c0>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e0cc      	b.n	8005c74 <UART_SetConfig+0x348>
 8005ada:	2302      	movs	r3, #2
 8005adc:	77fb      	strb	r3, [r7, #31]
 8005ade:	e0c9      	b.n	8005c74 <UART_SetConfig+0x348>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	77fb      	strb	r3, [r7, #31]
 8005ae4:	e0c6      	b.n	8005c74 <UART_SetConfig+0x348>
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	e0c3      	b.n	8005c74 <UART_SetConfig+0x348>
 8005aec:	2310      	movs	r3, #16
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e0c0      	b.n	8005c74 <UART_SetConfig+0x348>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a44      	ldr	r2, [pc, #272]	@ (8005c08 <UART_SetConfig+0x2dc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d125      	bne.n	8005b48 <UART_SetConfig+0x21c>
 8005afc:	4b3e      	ldr	r3, [pc, #248]	@ (8005bf8 <UART_SetConfig+0x2cc>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b0a:	d017      	beq.n	8005b3c <UART_SetConfig+0x210>
 8005b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b10:	d817      	bhi.n	8005b42 <UART_SetConfig+0x216>
 8005b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b16:	d00b      	beq.n	8005b30 <UART_SetConfig+0x204>
 8005b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1c:	d811      	bhi.n	8005b42 <UART_SetConfig+0x216>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <UART_SetConfig+0x1fe>
 8005b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b26:	d006      	beq.n	8005b36 <UART_SetConfig+0x20a>
 8005b28:	e00b      	b.n	8005b42 <UART_SetConfig+0x216>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e0a1      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b30:	2302      	movs	r3, #2
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e09e      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b36:	2304      	movs	r3, #4
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e09b      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e098      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b42:	2310      	movs	r3, #16
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e095      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c0c <UART_SetConfig+0x2e0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d125      	bne.n	8005b9e <UART_SetConfig+0x272>
 8005b52:	4b29      	ldr	r3, [pc, #164]	@ (8005bf8 <UART_SetConfig+0x2cc>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b60:	d017      	beq.n	8005b92 <UART_SetConfig+0x266>
 8005b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b66:	d817      	bhi.n	8005b98 <UART_SetConfig+0x26c>
 8005b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b6c:	d00b      	beq.n	8005b86 <UART_SetConfig+0x25a>
 8005b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b72:	d811      	bhi.n	8005b98 <UART_SetConfig+0x26c>
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <UART_SetConfig+0x254>
 8005b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7c:	d006      	beq.n	8005b8c <UART_SetConfig+0x260>
 8005b7e:	e00b      	b.n	8005b98 <UART_SetConfig+0x26c>
 8005b80:	2301      	movs	r3, #1
 8005b82:	77fb      	strb	r3, [r7, #31]
 8005b84:	e076      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b86:	2302      	movs	r3, #2
 8005b88:	77fb      	strb	r3, [r7, #31]
 8005b8a:	e073      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e070      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b92:	2308      	movs	r3, #8
 8005b94:	77fb      	strb	r3, [r7, #31]
 8005b96:	e06d      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e06a      	b.n	8005c74 <UART_SetConfig+0x348>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <UART_SetConfig+0x2e4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d138      	bne.n	8005c1a <UART_SetConfig+0x2ee>
 8005ba8:	4b13      	ldr	r3, [pc, #76]	@ (8005bf8 <UART_SetConfig+0x2cc>)
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005bb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bb6:	d017      	beq.n	8005be8 <UART_SetConfig+0x2bc>
 8005bb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bbc:	d82a      	bhi.n	8005c14 <UART_SetConfig+0x2e8>
 8005bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc2:	d00b      	beq.n	8005bdc <UART_SetConfig+0x2b0>
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc8:	d824      	bhi.n	8005c14 <UART_SetConfig+0x2e8>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <UART_SetConfig+0x2aa>
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd2:	d006      	beq.n	8005be2 <UART_SetConfig+0x2b6>
 8005bd4:	e01e      	b.n	8005c14 <UART_SetConfig+0x2e8>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	77fb      	strb	r3, [r7, #31]
 8005bda:	e04b      	b.n	8005c74 <UART_SetConfig+0x348>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	77fb      	strb	r3, [r7, #31]
 8005be0:	e048      	b.n	8005c74 <UART_SetConfig+0x348>
 8005be2:	2304      	movs	r3, #4
 8005be4:	77fb      	strb	r3, [r7, #31]
 8005be6:	e045      	b.n	8005c74 <UART_SetConfig+0x348>
 8005be8:	2308      	movs	r3, #8
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e042      	b.n	8005c74 <UART_SetConfig+0x348>
 8005bee:	bf00      	nop
 8005bf0:	efff69f3 	.word	0xefff69f3
 8005bf4:	40011000 	.word	0x40011000
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	40004400 	.word	0x40004400
 8005c00:	40004800 	.word	0x40004800
 8005c04:	40004c00 	.word	0x40004c00
 8005c08:	40005000 	.word	0x40005000
 8005c0c:	40011400 	.word	0x40011400
 8005c10:	40007800 	.word	0x40007800
 8005c14:	2310      	movs	r3, #16
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e02c      	b.n	8005c74 <UART_SetConfig+0x348>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a72      	ldr	r2, [pc, #456]	@ (8005de8 <UART_SetConfig+0x4bc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d125      	bne.n	8005c70 <UART_SetConfig+0x344>
 8005c24:	4b71      	ldr	r3, [pc, #452]	@ (8005dec <UART_SetConfig+0x4c0>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c2e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c32:	d017      	beq.n	8005c64 <UART_SetConfig+0x338>
 8005c34:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c38:	d817      	bhi.n	8005c6a <UART_SetConfig+0x33e>
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c3e:	d00b      	beq.n	8005c58 <UART_SetConfig+0x32c>
 8005c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c44:	d811      	bhi.n	8005c6a <UART_SetConfig+0x33e>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <UART_SetConfig+0x326>
 8005c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c4e:	d006      	beq.n	8005c5e <UART_SetConfig+0x332>
 8005c50:	e00b      	b.n	8005c6a <UART_SetConfig+0x33e>
 8005c52:	2300      	movs	r3, #0
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e00d      	b.n	8005c74 <UART_SetConfig+0x348>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e00a      	b.n	8005c74 <UART_SetConfig+0x348>
 8005c5e:	2304      	movs	r3, #4
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e007      	b.n	8005c74 <UART_SetConfig+0x348>
 8005c64:	2308      	movs	r3, #8
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e004      	b.n	8005c74 <UART_SetConfig+0x348>
 8005c6a:	2310      	movs	r3, #16
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e001      	b.n	8005c74 <UART_SetConfig+0x348>
 8005c70:	2310      	movs	r3, #16
 8005c72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c7c:	d15b      	bne.n	8005d36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d828      	bhi.n	8005cd6 <UART_SetConfig+0x3aa>
 8005c84:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <UART_SetConfig+0x360>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cd7 	.word	0x08005cd7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cd7 	.word	0x08005cd7
 8005ca4:	08005cd7 	.word	0x08005cd7
 8005ca8:	08005cd7 	.word	0x08005cd7
 8005cac:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fe fd20 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	61b8      	str	r0, [r7, #24]
        break;
 8005cb6:	e013      	b.n	8005ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7fe fd30 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8005cbc:	61b8      	str	r0, [r7, #24]
        break;
 8005cbe:	e00f      	b.n	8005ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8005df0 <UART_SetConfig+0x4c4>)
 8005cc2:	61bb      	str	r3, [r7, #24]
        break;
 8005cc4:	e00c      	b.n	8005ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fe fc03 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 8005cca:	61b8      	str	r0, [r7, #24]
        break;
 8005ccc:	e008      	b.n	8005ce0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd2:	61bb      	str	r3, [r7, #24]
        break;
 8005cd4:	e004      	b.n	8005ce0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8005cde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d074      	beq.n	8005dd0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	005a      	lsls	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	441a      	add	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b0f      	cmp	r3, #15
 8005d00:	d916      	bls.n	8005d30 <UART_SetConfig+0x404>
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d08:	d212      	bcs.n	8005d30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f023 030f 	bic.w	r3, r3, #15
 8005d12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	89fb      	ldrh	r3, [r7, #14]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	89fa      	ldrh	r2, [r7, #14]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	e04f      	b.n	8005dd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77bb      	strb	r3, [r7, #30]
 8005d34:	e04c      	b.n	8005dd0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d36:	7ffb      	ldrb	r3, [r7, #31]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d828      	bhi.n	8005d8e <UART_SetConfig+0x462>
 8005d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <UART_SetConfig+0x418>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005d8f 	.word	0x08005d8f
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005d8f 	.word	0x08005d8f
 8005d60:	08005d8f 	.word	0x08005d8f
 8005d64:	08005d87 	.word	0x08005d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d68:	f7fe fcc4 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 8005d6c:	61b8      	str	r0, [r7, #24]
        break;
 8005d6e:	e013      	b.n	8005d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d70:	f7fe fcd4 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8005d74:	61b8      	str	r0, [r7, #24]
        break;
 8005d76:	e00f      	b.n	8005d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	@ (8005df0 <UART_SetConfig+0x4c4>)
 8005d7a:	61bb      	str	r3, [r7, #24]
        break;
 8005d7c:	e00c      	b.n	8005d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7e:	f7fe fba7 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 8005d82:	61b8      	str	r0, [r7, #24]
        break;
 8005d84:	e008      	b.n	8005d98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d8a:	61bb      	str	r3, [r7, #24]
        break;
 8005d8c:	e004      	b.n	8005d98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	77bb      	strb	r3, [r7, #30]
        break;
 8005d96:	bf00      	nop
    }

    if (pclk != 0U)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d018      	beq.n	8005dd0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	085a      	lsrs	r2, r3, #1
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	441a      	add	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b0f      	cmp	r3, #15
 8005db6:	d909      	bls.n	8005dcc <UART_SetConfig+0x4a0>
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dbe:	d205      	bcs.n	8005dcc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	e001      	b.n	8005dd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ddc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3720      	adds	r7, #32
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40007c00 	.word	0x40007c00
 8005dec:	40023800 	.word	0x40023800
 8005df0:	00f42400 	.word	0x00f42400

08005df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ef2:	d10a      	bne.n	8005f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b098      	sub	sp, #96	@ 0x60
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f48:	f7fb fe9e 	bl	8001c88 <HAL_GetTick>
 8005f4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d12e      	bne.n	8005fba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f88c 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d021      	beq.n	8005fba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e062      	b.n	8006080 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d149      	bne.n	800605c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f856 	bl	8006088 <UART_WaitOnFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d03c      	beq.n	800605c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006000:	633b      	str	r3, [r7, #48]	@ 0x30
 8006002:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e6      	bne.n	8005fe2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60fb      	str	r3, [r7, #12]
   return(result);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006034:	61fa      	str	r2, [r7, #28]
 8006036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	617b      	str	r3, [r7, #20]
   return(result);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e011      	b.n	8006080 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3758      	adds	r7, #88	@ 0x58
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006098:	e04f      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d04b      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7fb fdf1 	bl	8001c88 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e04e      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d037      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b80      	cmp	r3, #128	@ 0x80
 80060ce:	d034      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b40      	cmp	r3, #64	@ 0x40
 80060d4:	d031      	beq.n	800613a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d110      	bne.n	8006106 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2208      	movs	r2, #8
 80060ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f838 	bl	8006162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2208      	movs	r2, #8
 80060f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e029      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006114:	d111      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800611e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f81e 	bl	8006162 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e00f      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	429a      	cmp	r2, r3
 8006156:	d0a0      	beq.n	800609a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006162:	b480      	push	{r7}
 8006164:	b095      	sub	sp, #84	@ 0x54
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800617e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006188:	643b      	str	r3, [r7, #64]	@ 0x40
 800618a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800618e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006190:	e841 2300 	strex	r3, r2, [r1]
 8006194:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e6      	bne.n	800616a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3308      	adds	r3, #8
 80061a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3308      	adds	r3, #8
 80061ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e5      	bne.n	800619c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d118      	bne.n	800620a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	613b      	str	r3, [r7, #16]
   return(result);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e6      	bne.n	80061d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800621e:	bf00      	nop
 8006220:	3754      	adds	r7, #84	@ 0x54
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800622c:	b084      	sub	sp, #16
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	f107 001c 	add.w	r0, r7, #28
 800623a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800623e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006242:	2b01      	cmp	r3, #1
 8006244:	d121      	bne.n	800628a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	4b21      	ldr	r3, [pc, #132]	@ (80062dc <USB_CoreInit+0xb0>)
 8006258:	4013      	ands	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800626a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800626e:	2b01      	cmp	r3, #1
 8006270:	d105      	bne.n	800627e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fa92 	bl	80067a8 <USB_CoreReset>
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	e010      	b.n	80062ac <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa86 	bl	80067a8 <USB_CoreReset>
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80062ac:	7fbb      	ldrb	r3, [r7, #30]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10b      	bne.n	80062ca <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f043 0206 	orr.w	r2, r3, #6
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f043 0220 	orr.w	r2, r3, #32
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062d6:	b004      	add	sp, #16
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	ffbdffbf 	.word	0xffbdffbf

080062e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 0201 	bic.w	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d115      	bne.n	8006350 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006330:	200a      	movs	r0, #10
 8006332:	f7fb fcb5 	bl	8001ca0 <HAL_Delay>
      ms += 10U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	330a      	adds	r3, #10
 800633a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fa25 	bl	800678c <USB_GetMode>
 8006342:	4603      	mov	r3, r0
 8006344:	2b01      	cmp	r3, #1
 8006346:	d01e      	beq.n	8006386 <USB_SetCurrentMode+0x84>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2bc7      	cmp	r3, #199	@ 0xc7
 800634c:	d9f0      	bls.n	8006330 <USB_SetCurrentMode+0x2e>
 800634e:	e01a      	b.n	8006386 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d115      	bne.n	8006382 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006362:	200a      	movs	r0, #10
 8006364:	f7fb fc9c 	bl	8001ca0 <HAL_Delay>
      ms += 10U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	330a      	adds	r3, #10
 800636c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa0c 	bl	800678c <USB_GetMode>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <USB_SetCurrentMode+0x84>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2bc7      	cmp	r3, #199	@ 0xc7
 800637e:	d9f0      	bls.n	8006362 <USB_SetCurrentMode+0x60>
 8006380:	e001      	b.n	8006386 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e005      	b.n	8006392 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2bc8      	cmp	r3, #200	@ 0xc8
 800638a:	d101      	bne.n	8006390 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800639c:	b084      	sub	sp, #16
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	e009      	b.n	80063d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3340      	adds	r3, #64	@ 0x40
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	3301      	adds	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0e      	cmp	r3, #14
 80063d4:	d9f2      	bls.n	80063bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d11c      	bne.n	8006418 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ec:	f043 0302 	orr.w	r3, r3, #2
 80063f0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e005      	b.n	8006424 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800642a:	461a      	mov	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006430:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10d      	bne.n	8006454 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006440:	2100      	movs	r1, #0
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f968 	bl	8006718 <USB_SetDevSpeed>
 8006448:	e008      	b.n	800645c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800644a:	2101      	movs	r1, #1
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f963 	bl	8006718 <USB_SetDevSpeed>
 8006452:	e003      	b.n	800645c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006454:	2103      	movs	r1, #3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f95e 	bl	8006718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800645c:	2110      	movs	r1, #16
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8fa 	bl	8006658 <USB_FlushTxFifo>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f924 	bl	80066bc <USB_FlushRxFifo>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006484:	461a      	mov	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006490:	461a      	mov	r2, r3
 8006492:	2300      	movs	r3, #0
 8006494:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649c:	461a      	mov	r2, r3
 800649e:	2300      	movs	r3, #0
 80064a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	e043      	b.n	8006530 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064be:	d118      	bne.n	80064f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e013      	b.n	8006504 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e8:	461a      	mov	r2, r3
 80064ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	e008      	b.n	8006504 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064fe:	461a      	mov	r2, r3
 8006500:	2300      	movs	r3, #0
 8006502:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006510:	461a      	mov	r2, r3
 8006512:	2300      	movs	r3, #0
 8006514:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006522:	461a      	mov	r2, r3
 8006524:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006528:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3301      	adds	r3, #1
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006534:	461a      	mov	r2, r3
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4293      	cmp	r3, r2
 800653a:	d3b5      	bcc.n	80064a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	e043      	b.n	80065ca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006558:	d118      	bne.n	800658c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656c:	461a      	mov	r2, r3
 800656e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	e013      	b.n	800659e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006582:	461a      	mov	r2, r3
 8006584:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e008      	b.n	800659e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065aa:	461a      	mov	r2, r3
 80065ac:	2300      	movs	r3, #0
 80065ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065bc:	461a      	mov	r2, r3
 80065be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	3301      	adds	r3, #1
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065ce:	461a      	mov	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d3b5      	bcc.n	8006542 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80065f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f043 0210 	orr.w	r2, r3, #16
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	4b0f      	ldr	r3, [pc, #60]	@ (8006650 <USB_DevInit+0x2b4>)
 8006612:	4313      	orrs	r3, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006618:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f043 0208 	orr.w	r2, r3, #8
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800662c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699a      	ldr	r2, [r3, #24]
 8006638:	4b06      	ldr	r3, [pc, #24]	@ (8006654 <USB_DevInit+0x2b8>)
 800663a:	4313      	orrs	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr
 8006650:	803c3800 	.word	0x803c3800
 8006654:	40000004 	.word	0x40000004

08006658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006672:	d901      	bls.n	8006678 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e01b      	b.n	80066b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	daf2      	bge.n	8006666 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	019b      	lsls	r3, r3, #6
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800669c:	d901      	bls.n	80066a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e006      	b.n	80066b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	d0f0      	beq.n	8006690 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066d4:	d901      	bls.n	80066da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e018      	b.n	800670c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	daf2      	bge.n	80066c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2210      	movs	r2, #16
 80066ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066f8:	d901      	bls.n	80066fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e006      	b.n	800670c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b10      	cmp	r3, #16
 8006708:	d0f0      	beq.n	80066ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006764:	f023 0303 	bic.w	r3, r3, #3
 8006768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006778:	f043 0302 	orr.w	r3, r3, #2
 800677c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0301 	and.w	r3, r3, #1
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067c0:	d901      	bls.n	80067c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e022      	b.n	800680c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	daf2      	bge.n	80067b4 <USB_CoreReset+0xc>

  count = 10U;
 80067ce:	230a      	movs	r3, #10
 80067d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80067d2:	e002      	b.n	80067da <USB_CoreReset+0x32>
  {
    count--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f9      	bne.n	80067d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f043 0201 	orr.w	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067f8:	d901      	bls.n	80067fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e006      	b.n	800680c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	d0f0      	beq.n	80067ec <USB_CoreReset+0x44>

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4603      	mov	r3, r0
 8006828:	817b      	strh	r3, [r7, #10]
 800682a:	460b      	mov	r3, r1
 800682c:	813b      	strh	r3, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8006832:	897a      	ldrh	r2, [r7, #10]
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	4413      	add	r3, r2
 8006838:	b298      	uxth	r0, r3
 800683a:	893a      	ldrh	r2, [r7, #8]
 800683c:	8b3b      	ldrh	r3, [r7, #24]
 800683e:	4413      	add	r3, r2
 8006840:	b29b      	uxth	r3, r3
 8006842:	893a      	ldrh	r2, [r7, #8]
 8006844:	8979      	ldrh	r1, [r7, #10]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	4603      	mov	r3, r0
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 fb3a 	bl	8007ec4 <u8g2_IsIntersection>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d012      	beq.n	800687c <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8006856:	e00d      	b.n	8006874 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	893a      	ldrh	r2, [r7, #8]
 800685c:	8979      	ldrh	r1, [r7, #10]
 800685e:	2000      	movs	r0, #0
 8006860:	9000      	str	r0, [sp, #0]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f001 fa0b 	bl	8007c7e <u8g2_DrawHVLine>
    y++;    
 8006868:	893b      	ldrh	r3, [r7, #8]
 800686a:	3301      	adds	r3, #1
 800686c:	813b      	strh	r3, [r7, #8]
    h--;
 800686e:	8b3b      	ldrh	r3, [r7, #24]
 8006870:	3b01      	subs	r3, #1
 8006872:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8006874:	8b3b      	ldrh	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1ee      	bne.n	8006858 <u8g2_DrawBox+0x40>
 800687a:	e000      	b.n	800687e <u8g2_DrawBox+0x66>
    return;
 800687c:	bf00      	nop
  }
}
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	4608      	mov	r0, r1
 800688e:	4611      	mov	r1, r2
 8006890:	461a      	mov	r2, r3
 8006892:	4603      	mov	r3, r0
 8006894:	817b      	strh	r3, [r7, #10]
 8006896:	460b      	mov	r3, r1
 8006898:	813b      	strh	r3, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 800689e:	897b      	ldrh	r3, [r7, #10]
 80068a0:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80068a2:	897a      	ldrh	r2, [r7, #10]
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	4413      	add	r3, r2
 80068a8:	b298      	uxth	r0, r3
 80068aa:	893a      	ldrh	r2, [r7, #8]
 80068ac:	8c3b      	ldrh	r3, [r7, #32]
 80068ae:	4413      	add	r3, r2
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	893a      	ldrh	r2, [r7, #8]
 80068b4:	8979      	ldrh	r1, [r7, #10]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	4603      	mov	r3, r0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f001 fb02 	bl	8007ec4 <u8g2_IsIntersection>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d037      	beq.n	8006936 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	893a      	ldrh	r2, [r7, #8]
 80068ca:	8979      	ldrh	r1, [r7, #10]
 80068cc:	2000      	movs	r0, #0
 80068ce:	9000      	str	r0, [sp, #0]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f001 f9d4 	bl	8007c7e <u8g2_DrawHVLine>
  if (h >= 2) {
 80068d6:	8c3b      	ldrh	r3, [r7, #32]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d92d      	bls.n	8006938 <u8g2_DrawFrame+0xb4>
    h-=2;
 80068dc:	8c3b      	ldrh	r3, [r7, #32]
 80068de:	3b02      	subs	r3, #2
 80068e0:	843b      	strh	r3, [r7, #32]
    y++;
 80068e2:	893b      	ldrh	r3, [r7, #8]
 80068e4:	3301      	adds	r3, #1
 80068e6:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 80068e8:	8c3b      	ldrh	r3, [r7, #32]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01a      	beq.n	8006924 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80068ee:	8c3b      	ldrh	r3, [r7, #32]
 80068f0:	893a      	ldrh	r2, [r7, #8]
 80068f2:	8979      	ldrh	r1, [r7, #10]
 80068f4:	2001      	movs	r0, #1
 80068f6:	9000      	str	r0, [sp, #0]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f001 f9c0 	bl	8007c7e <u8g2_DrawHVLine>
      x+=w;
 80068fe:	897a      	ldrh	r2, [r7, #10]
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	4413      	add	r3, r2
 8006904:	817b      	strh	r3, [r7, #10]
      x--;
 8006906:	897b      	ldrh	r3, [r7, #10]
 8006908:	3b01      	subs	r3, #1
 800690a:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800690c:	8c3b      	ldrh	r3, [r7, #32]
 800690e:	893a      	ldrh	r2, [r7, #8]
 8006910:	8979      	ldrh	r1, [r7, #10]
 8006912:	2001      	movs	r0, #1
 8006914:	9000      	str	r0, [sp, #0]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f001 f9b1 	bl	8007c7e <u8g2_DrawHVLine>
      y+=h;
 800691c:	893a      	ldrh	r2, [r7, #8]
 800691e:	8c3b      	ldrh	r3, [r7, #32]
 8006920:	4413      	add	r3, r2
 8006922:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	893a      	ldrh	r2, [r7, #8]
 8006928:	8af9      	ldrh	r1, [r7, #22]
 800692a:	2000      	movs	r0, #0
 800692c:	9000      	str	r0, [sp, #0]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 f9a5 	bl	8007c7e <u8g2_DrawHVLine>
 8006934:	e000      	b.n	8006938 <u8g2_DrawFrame+0xb4>
    return;
 8006936:	bf00      	nop
  }
}
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <u8g2_DrawRFrame>:
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b08a      	sub	sp, #40	@ 0x28
 8006942:	af02      	add	r7, sp, #8
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	461a      	mov	r2, r3
 800694c:	4603      	mov	r3, r0
 800694e:	817b      	strh	r3, [r7, #10]
 8006950:	460b      	mov	r3, r1
 8006952:	813b      	strh	r3, [r7, #8]
 8006954:	4613      	mov	r3, r2
 8006956:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8006958:	897a      	ldrh	r2, [r7, #10]
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	4413      	add	r3, r2
 800695e:	b298      	uxth	r0, r3
 8006960:	893a      	ldrh	r2, [r7, #8]
 8006962:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006964:	4413      	add	r3, r2
 8006966:	b29b      	uxth	r3, r3
 8006968:	893a      	ldrh	r2, [r7, #8]
 800696a:	8979      	ldrh	r1, [r7, #10]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4603      	mov	r3, r0
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f001 faa7 	bl	8007ec4 <u8g2_IsIntersection>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8091 	beq.w	8006aa0 <u8g2_DrawRFrame+0x162>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 800697e:	897b      	ldrh	r3, [r7, #10]
 8006980:	83fb      	strh	r3, [r7, #30]
  xl += r;
 8006982:	8bfa      	ldrh	r2, [r7, #30]
 8006984:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006986:	4413      	add	r3, r2
 8006988:	83fb      	strh	r3, [r7, #30]
  yu = y;
 800698a:	893b      	ldrh	r3, [r7, #8]
 800698c:	83bb      	strh	r3, [r7, #28]
  yu += r;
 800698e:	8bba      	ldrh	r2, [r7, #28]
 8006990:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006992:	4413      	add	r3, r2
 8006994:	83bb      	strh	r3, [r7, #28]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8006996:	897b      	ldrh	r3, [r7, #10]
 8006998:	837b      	strh	r3, [r7, #26]
    xr += w;
 800699a:	8b7a      	ldrh	r2, [r7, #26]
 800699c:	88fb      	ldrh	r3, [r7, #6]
 800699e:	4413      	add	r3, r2
 80069a0:	837b      	strh	r3, [r7, #26]
    xr -= r;
 80069a2:	8b7a      	ldrh	r2, [r7, #26]
 80069a4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	837b      	strh	r3, [r7, #26]
    xr -= 1;
 80069aa:	8b7b      	ldrh	r3, [r7, #26]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	837b      	strh	r3, [r7, #26]
    
    yl = y;
 80069b0:	893b      	ldrh	r3, [r7, #8]
 80069b2:	833b      	strh	r3, [r7, #24]
    yl += h;
 80069b4:	8b3a      	ldrh	r2, [r7, #24]
 80069b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80069b8:	4413      	add	r3, r2
 80069ba:	833b      	strh	r3, [r7, #24]
    yl -= r; 
 80069bc:	8b3a      	ldrh	r2, [r7, #24]
 80069be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	833b      	strh	r3, [r7, #24]
    yl -= 1;
 80069c4:	8b3b      	ldrh	r3, [r7, #24]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	833b      	strh	r3, [r7, #24]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 80069ca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069cc:	8bba      	ldrh	r2, [r7, #28]
 80069ce:	8bf9      	ldrh	r1, [r7, #30]
 80069d0:	2002      	movs	r0, #2
 80069d2:	9000      	str	r0, [sp, #0]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fa1c 	bl	8006e12 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 80069da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069dc:	8bba      	ldrh	r2, [r7, #28]
 80069de:	8b79      	ldrh	r1, [r7, #26]
 80069e0:	2001      	movs	r0, #1
 80069e2:	9000      	str	r0, [sp, #0]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fa14 	bl	8006e12 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 80069ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069ec:	8b3a      	ldrh	r2, [r7, #24]
 80069ee:	8bf9      	ldrh	r1, [r7, #30]
 80069f0:	2004      	movs	r0, #4
 80069f2:	9000      	str	r0, [sp, #0]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fa0c 	bl	8006e12 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 80069fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069fc:	8b3a      	ldrh	r2, [r7, #24]
 80069fe:	8b79      	ldrh	r1, [r7, #26]
 8006a00:	2008      	movs	r0, #8
 8006a02:	9000      	str	r0, [sp, #0]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fa04 	bl	8006e12 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 8006a0e:	8afa      	ldrh	r2, [r7, #22]
 8006a10:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	82fb      	strh	r3, [r7, #22]
    ww -= r;
 8006a16:	8afa      	ldrh	r2, [r7, #22]
 8006a18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	82fb      	strh	r3, [r7, #22]
    hh = h;
 8006a1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a20:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 8006a22:	8aba      	ldrh	r2, [r7, #20]
 8006a24:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	82bb      	strh	r3, [r7, #20]
    hh -= r;
 8006a2a:	8aba      	ldrh	r2, [r7, #20]
 8006a2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	82bb      	strh	r3, [r7, #20]
    
    xl++;
 8006a32:	8bfb      	ldrh	r3, [r7, #30]
 8006a34:	3301      	adds	r3, #1
 8006a36:	83fb      	strh	r3, [r7, #30]
    yu++;
 8006a38:	8bbb      	ldrh	r3, [r7, #28]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	83bb      	strh	r3, [r7, #28]
    
    if ( ww >= 3 )
 8006a3e:	8afb      	ldrh	r3, [r7, #22]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d914      	bls.n	8006a6e <u8g2_DrawRFrame+0x130>
    {
      ww -= 2;
 8006a44:	8afb      	ldrh	r3, [r7, #22]
 8006a46:	3b02      	subs	r3, #2
 8006a48:	82fb      	strh	r3, [r7, #22]
      h--;
 8006a4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	853b      	strh	r3, [r7, #40]	@ 0x28
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8006a50:	8afb      	ldrh	r3, [r7, #22]
 8006a52:	893a      	ldrh	r2, [r7, #8]
 8006a54:	8bf9      	ldrh	r1, [r7, #30]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 f99c 	bl	8007d94 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8006a5c:	893a      	ldrh	r2, [r7, #8]
 8006a5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a60:	4413      	add	r3, r2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	8afb      	ldrh	r3, [r7, #22]
 8006a66:	8bf9      	ldrh	r1, [r7, #30]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f001 f993 	bl	8007d94 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8006a6e:	8abb      	ldrh	r3, [r7, #20]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d916      	bls.n	8006aa2 <u8g2_DrawRFrame+0x164>
    {
      hh -= 2;
 8006a74:	8abb      	ldrh	r3, [r7, #20]
 8006a76:	3b02      	subs	r3, #2
 8006a78:	82bb      	strh	r3, [r7, #20]
      w--;
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	80fb      	strh	r3, [r7, #6]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8006a80:	8abb      	ldrh	r3, [r7, #20]
 8006a82:	8bba      	ldrh	r2, [r7, #28]
 8006a84:	8979      	ldrh	r1, [r7, #10]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f001 f99d 	bl	8007dc6 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8006a8c:	897a      	ldrh	r2, [r7, #10]
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	4413      	add	r3, r2
 8006a92:	b299      	uxth	r1, r3
 8006a94:	8abb      	ldrh	r3, [r7, #20]
 8006a96:	8bba      	ldrh	r2, [r7, #28]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f001 f994 	bl	8007dc6 <u8g2_DrawVLine>
 8006a9e:	e000      	b.n	8006aa2 <u8g2_DrawRFrame+0x164>
    return;
 8006aa0:	bf00      	nop
    }
  }
}
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	7c1b      	ldrb	r3, [r3, #16]
 8006ab6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	fb02 f303 	mul.w	r3, r2, r3
 8006ac6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f005 ffb4 	bl	800ca44 <memset>
}
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
 8006af0:	4613      	mov	r3, r2
 8006af2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	7c1b      	ldrb	r3, [r3, #16]
 8006afa:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b04:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	89ba      	ldrh	r2, [r7, #12]
 8006b0c:	fb12 f303 	smulbb	r3, r2, r3
 8006b10:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8006b12:	89bb      	ldrh	r3, [r7, #12]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8006b18:	89bb      	ldrh	r3, [r7, #12]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8006b20:	7bf9      	ldrb	r1, [r7, #15]
 8006b22:	78ba      	ldrb	r2, [r7, #2]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fed8 	bl	80088e2 <u8x8_DrawTile>
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b4c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006b54:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	7c5b      	ldrb	r3, [r3, #17]
 8006b5c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8006b5e:	7bba      	ldrb	r2, [r7, #14]
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff ffbd 	bl	8006ae4 <u8g2_send_tile_row>
    src_row++;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	3301      	adds	r3, #1
 8006b74:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8006b76:	7bfa      	ldrb	r2, [r7, #15]
 8006b78:	7b7b      	ldrb	r3, [r7, #13]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d203      	bcs.n	8006b86 <u8g2_send_buffer+0x4c>
 8006b7e:	7bba      	ldrb	r2, [r7, #14]
 8006b80:	7b3b      	ldrb	r3, [r7, #12]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d3eb      	bcc.n	8006b5e <u8g2_send_buffer+0x24>
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	78fa      	ldrb	r2, [r7, #3]
 8006b9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  u8g2->cb->update_dimension(u8g2);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ff69 	bl	8006aa8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff ffd8 	bl	8006b8e <u8g2_SetBufferCurrTileRow>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ffa3 	bl	8006b3a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006bfa:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	4413      	add	r3, r2
 8006c06:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	7c5b      	ldrb	r3, [r3, #17]
 8006c0e:	7bfa      	ldrb	r2, [r7, #15]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d304      	bcc.n	8006c1e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 feb5 	bl	8008984 <u8x8_RefreshDisplay>
    return 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e00d      	b.n	8006c3a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff ff3d 	bl	8006aa8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ffab 	bl	8006b8e <u8g2_SetBufferCurrTileRow>
  return 1;
 8006c38:	2301      	movs	r3, #1
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4603      	mov	r3, r0
 8006c52:	817b      	strh	r3, [r7, #10]
 8006c54:	460b      	mov	r3, r1
 8006c56:	813b      	strh	r3, [r7, #8]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	80fb      	strh	r3, [r7, #6]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8006c5c:	7f3b      	ldrb	r3, [r7, #28]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d017      	beq.n	8006c96 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	897b      	ldrh	r3, [r7, #10]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	b299      	uxth	r1, r3
 8006c6e:	8b3a      	ldrh	r2, [r7, #24]
 8006c70:	893b      	ldrh	r3, [r7, #8]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f001 f8bd 	bl	8007df8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	893b      	ldrh	r3, [r7, #8]
 8006c82:	4413      	add	r3, r2
 8006c84:	b299      	uxth	r1, r3
 8006c86:	8b3a      	ldrh	r2, [r7, #24]
 8006c88:	897b      	ldrh	r3, [r7, #10]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f001 f8b1 	bl	8007df8 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8006c96:	7f3b      	ldrb	r3, [r7, #28]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d017      	beq.n	8006cd0 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	897b      	ldrh	r3, [r7, #10]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	b299      	uxth	r1, r3
 8006ca8:	8b3a      	ldrh	r2, [r7, #24]
 8006caa:	893b      	ldrh	r3, [r7, #8]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f001 f8a0 	bl	8007df8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8006cb8:	88fa      	ldrh	r2, [r7, #6]
 8006cba:	893b      	ldrh	r3, [r7, #8]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	b299      	uxth	r1, r3
 8006cc0:	8b3a      	ldrh	r2, [r7, #24]
 8006cc2:	897b      	ldrh	r3, [r7, #10]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f001 f894 	bl	8007df8 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8006cd0:	7f3b      	ldrb	r3, [r7, #28]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d017      	beq.n	8006d0a <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	897b      	ldrh	r3, [r7, #10]
 8006cde:	4413      	add	r3, r2
 8006ce0:	b299      	uxth	r1, r3
 8006ce2:	8b3a      	ldrh	r2, [r7, #24]
 8006ce4:	893b      	ldrh	r3, [r7, #8]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f001 f883 	bl	8007df8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	893b      	ldrh	r3, [r7, #8]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	b299      	uxth	r1, r3
 8006cfa:	8b3a      	ldrh	r2, [r7, #24]
 8006cfc:	897b      	ldrh	r3, [r7, #10]
 8006cfe:	4413      	add	r3, r2
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f001 f877 	bl	8007df8 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8006d0a:	7f3b      	ldrb	r3, [r7, #28]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d017      	beq.n	8006d44 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	897b      	ldrh	r3, [r7, #10]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	b299      	uxth	r1, r3
 8006d1c:	8b3a      	ldrh	r2, [r7, #24]
 8006d1e:	893b      	ldrh	r3, [r7, #8]
 8006d20:	4413      	add	r3, r2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f001 f866 	bl	8007df8 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	893b      	ldrh	r3, [r7, #8]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	b299      	uxth	r1, r3
 8006d34:	8b3a      	ldrh	r2, [r7, #24]
 8006d36:	897b      	ldrh	r3, [r7, #10]
 8006d38:	4413      	add	r3, r2
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f001 f85a 	bl	8007df8 <u8g2_DrawPixel>
    }
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	@ 0x28
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	817b      	strh	r3, [r7, #10]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	813b      	strh	r3, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8006d66:	2301      	movs	r3, #1
 8006d68:	83fb      	strh	r3, [r7, #30]
    f -= rad;
 8006d6a:	8bfa      	ldrh	r2, [r7, #30]
 8006d6c:	88fb      	ldrh	r3, [r7, #6]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	83fb      	strh	r3, [r7, #30]
    ddF_x = 1;
 8006d74:	2301      	movs	r3, #1
 8006d76:	83bb      	strh	r3, [r7, #28]
    ddF_y = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	837b      	strh	r3, [r7, #26]
    ddF_y -= rad;
 8006d7c:	8b7a      	ldrh	r2, [r7, #26]
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	837b      	strh	r3, [r7, #26]
    ddF_y *= 2;
 8006d86:	8b7b      	ldrh	r3, [r7, #26]
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	837b      	strh	r3, [r7, #26]
    x = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	833b      	strh	r3, [r7, #24]
    y = rad;
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	82fb      	strh	r3, [r7, #22]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8006d96:	8978      	ldrh	r0, [r7, #10]
 8006d98:	8afa      	ldrh	r2, [r7, #22]
 8006d9a:	8b39      	ldrh	r1, [r7, #24]
 8006d9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	893b      	ldrh	r3, [r7, #8]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	4603      	mov	r3, r0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ff4a 	bl	8006c42 <u8g2_draw_circle_section>
    
    while ( x < y )
 8006dae:	e027      	b.n	8006e00 <u8g2_draw_circle+0xb4>
    {
      if (f >= 0) 
 8006db0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	db0b      	blt.n	8006dd0 <u8g2_draw_circle+0x84>
      {
        y--;
 8006db8:	8afb      	ldrh	r3, [r7, #22]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	82fb      	strh	r3, [r7, #22]
        ddF_y += 2;
 8006dbe:	8b7b      	ldrh	r3, [r7, #26]
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	837b      	strh	r3, [r7, #26]
        f += ddF_y;
 8006dc6:	8bfa      	ldrh	r2, [r7, #30]
 8006dc8:	8b7b      	ldrh	r3, [r7, #26]
 8006dca:	4413      	add	r3, r2
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	83fb      	strh	r3, [r7, #30]
      }
      x++;
 8006dd0:	8b3b      	ldrh	r3, [r7, #24]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	833b      	strh	r3, [r7, #24]
      ddF_x += 2;
 8006dd6:	8bbb      	ldrh	r3, [r7, #28]
 8006dd8:	3302      	adds	r3, #2
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	83bb      	strh	r3, [r7, #28]
      f += ddF_x;
 8006dde:	8bfa      	ldrh	r2, [r7, #30]
 8006de0:	8bbb      	ldrh	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	83fb      	strh	r3, [r7, #30]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8006de8:	8978      	ldrh	r0, [r7, #10]
 8006dea:	8afa      	ldrh	r2, [r7, #22]
 8006dec:	8b39      	ldrh	r1, [r7, #24]
 8006dee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	893b      	ldrh	r3, [r7, #8]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	4603      	mov	r3, r0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff ff21 	bl	8006c42 <u8g2_draw_circle_section>
    while ( x < y )
 8006e00:	8b3a      	ldrh	r2, [r7, #24]
 8006e02:	8afb      	ldrh	r3, [r7, #22]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d3d3      	bcc.n	8006db0 <u8g2_draw_circle+0x64>
    }
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8006e12:	b590      	push	{r4, r7, lr}
 8006e14:	b087      	sub	sp, #28
 8006e16:	af02      	add	r7, sp, #8
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	4608      	mov	r0, r1
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	461a      	mov	r2, r3
 8006e20:	4603      	mov	r3, r0
 8006e22:	817b      	strh	r3, [r7, #10]
 8006e24:	460b      	mov	r3, r1
 8006e26:	813b      	strh	r3, [r7, #8]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	80fb      	strh	r3, [r7, #6]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8006e2c:	897a      	ldrh	r2, [r7, #10]
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	b299      	uxth	r1, r3
 8006e34:	893a      	ldrh	r2, [r7, #8]
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	b298      	uxth	r0, r3
 8006e3c:	897a      	ldrh	r2, [r7, #10]
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	4413      	add	r3, r2
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3301      	adds	r3, #1
 8006e46:	b29c      	uxth	r4, r3
 8006e48:	893a      	ldrh	r2, [r7, #8]
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3301      	adds	r3, #1
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4623      	mov	r3, r4
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f001 f832 	bl	8007ec4 <u8g2_IsIntersection>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <u8g2_DrawCircle+0x6a>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8006e66:	88f8      	ldrh	r0, [r7, #6]
 8006e68:	893a      	ldrh	r2, [r7, #8]
 8006e6a:	8979      	ldrh	r1, [r7, #10]
 8006e6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	4603      	mov	r3, r0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f7ff ff69 	bl	8006d4c <u8g2_draw_circle>
 8006e7a:	e000      	b.n	8006e7e <u8g2_DrawCircle+0x6c>
      return;
 8006e7c:	bf00      	nop
}
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}

08006e84 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2208      	movs	r2, #8
 8006e90:	701a      	strb	r2, [r3, #0]
  return buf;
 8006e92:	4b03      	ldr	r3, [pc, #12]	@ (8006ea0 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20000a28 	.word	0x20000a28

08006ea4 <u8g2_Setup_sh1106_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 f */
void u8g2_Setup_sh1106_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8006ee8 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x44>)
 8006eba:	490c      	ldr	r1, [pc, #48]	@ (8006eec <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x48>)
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f001 fdc1 	bl	8008a44 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8006ec2:	f107 0313 	add.w	r3, r7, #19
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff ffdc 	bl	8006e84 <u8g2_m_16_8_f>
 8006ecc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8006ece:	7cfa      	ldrb	r2, [r7, #19]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <u8g2_Setup_sh1106_i2c_128x64_noname_f+0x4c>)
 8006ed6:	6979      	ldr	r1, [r7, #20]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f001 f8dd 	bl	8008098 <u8g2_SetupBuffer>
}
 8006ede:	bf00      	nop
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	08008581 	.word	0x08008581
 8006eec:	080087dd 	.word	0x080087dd
 8006ef0:	08007f1b 	.word	0x08007f1b

08006ef4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	4413      	add	r3, r2
 8006f06:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	81fb      	strh	r3, [r7, #14]
    font++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3301      	adds	r3, #1
 8006f36:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8006f38:	89fb      	ldrh	r3, [r7, #14]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	89fb      	ldrh	r3, [r7, #14]
 8006f46:	4413      	add	r3, r2
 8006f48:	81fb      	strh	r3, [r7, #14]
    return pos;
 8006f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8006f62:	2100      	movs	r1, #0
 8006f64:	6838      	ldr	r0, [r7, #0]
 8006f66:	f7ff ffc5 	bl	8006ef4 <u8g2_font_get_byte>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8006f72:	2101      	movs	r1, #1
 8006f74:	6838      	ldr	r0, [r7, #0]
 8006f76:	f7ff ffbd 	bl	8006ef4 <u8g2_font_get_byte>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8006f82:	2102      	movs	r1, #2
 8006f84:	6838      	ldr	r0, [r7, #0]
 8006f86:	f7ff ffb5 	bl	8006ef4 <u8g2_font_get_byte>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8006f92:	2103      	movs	r1, #3
 8006f94:	6838      	ldr	r0, [r7, #0]
 8006f96:	f7ff ffad 	bl	8006ef4 <u8g2_font_get_byte>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8006fa2:	2104      	movs	r1, #4
 8006fa4:	6838      	ldr	r0, [r7, #0]
 8006fa6:	f7ff ffa5 	bl	8006ef4 <u8g2_font_get_byte>
 8006faa:	4603      	mov	r3, r0
 8006fac:	461a      	mov	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8006fb2:	2105      	movs	r1, #5
 8006fb4:	6838      	ldr	r0, [r7, #0]
 8006fb6:	f7ff ff9d 	bl	8006ef4 <u8g2_font_get_byte>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8006fc2:	2106      	movs	r1, #6
 8006fc4:	6838      	ldr	r0, [r7, #0]
 8006fc6:	f7ff ff95 	bl	8006ef4 <u8g2_font_get_byte>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	461a      	mov	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8006fd2:	2107      	movs	r1, #7
 8006fd4:	6838      	ldr	r0, [r7, #0]
 8006fd6:	f7ff ff8d 	bl	8006ef4 <u8g2_font_get_byte>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8006fe2:	2108      	movs	r1, #8
 8006fe4:	6838      	ldr	r0, [r7, #0]
 8006fe6:	f7ff ff85 	bl	8006ef4 <u8g2_font_get_byte>
 8006fea:	4603      	mov	r3, r0
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8006ff2:	2109      	movs	r1, #9
 8006ff4:	6838      	ldr	r0, [r7, #0]
 8006ff6:	f7ff ff7d 	bl	8006ef4 <u8g2_font_get_byte>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	b25a      	sxtb	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8007002:	210a      	movs	r1, #10
 8007004:	6838      	ldr	r0, [r7, #0]
 8007006:	f7ff ff75 	bl	8006ef4 <u8g2_font_get_byte>
 800700a:	4603      	mov	r3, r0
 800700c:	b25a      	sxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8007012:	210b      	movs	r1, #11
 8007014:	6838      	ldr	r0, [r7, #0]
 8007016:	f7ff ff6d 	bl	8006ef4 <u8g2_font_get_byte>
 800701a:	4603      	mov	r3, r0
 800701c:	b25a      	sxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8007022:	210c      	movs	r1, #12
 8007024:	6838      	ldr	r0, [r7, #0]
 8007026:	f7ff ff65 	bl	8006ef4 <u8g2_font_get_byte>
 800702a:	4603      	mov	r3, r0
 800702c:	b25a      	sxtb	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8007032:	210d      	movs	r1, #13
 8007034:	6838      	ldr	r0, [r7, #0]
 8007036:	f7ff ff5d 	bl	8006ef4 <u8g2_font_get_byte>
 800703a:	4603      	mov	r3, r0
 800703c:	b25a      	sxtb	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8007042:	210e      	movs	r1, #14
 8007044:	6838      	ldr	r0, [r7, #0]
 8007046:	f7ff ff55 	bl	8006ef4 <u8g2_font_get_byte>
 800704a:	4603      	mov	r3, r0
 800704c:	b25a      	sxtb	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8007052:	210f      	movs	r1, #15
 8007054:	6838      	ldr	r0, [r7, #0]
 8007056:	f7ff ff4d 	bl	8006ef4 <u8g2_font_get_byte>
 800705a:	4603      	mov	r3, r0
 800705c:	b25a      	sxtb	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8007062:	2110      	movs	r1, #16
 8007064:	6838      	ldr	r0, [r7, #0]
 8007066:	f7ff ff45 	bl	8006ef4 <u8g2_font_get_byte>
 800706a:	4603      	mov	r3, r0
 800706c:	b25a      	sxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8007072:	2111      	movs	r1, #17
 8007074:	6838      	ldr	r0, [r7, #0]
 8007076:	f7ff ff4f 	bl	8006f18 <u8g2_font_get_word>
 800707a:	4603      	mov	r3, r0
 800707c:	461a      	mov	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8007082:	2113      	movs	r1, #19
 8007084:	6838      	ldr	r0, [r7, #0]
 8007086:	f7ff ff47 	bl	8006f18 <u8g2_font_get_word>
 800708a:	4603      	mov	r3, r0
 800708c:	461a      	mov	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8007092:	2115      	movs	r1, #21
 8007094:	6838      	ldr	r0, [r7, #0]
 8007096:	f7ff ff3f 	bl	8006f18 <u8g2_font_get_word>
 800709a:	4603      	mov	r3, r0
 800709c:	461a      	mov	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	82da      	strh	r2, [r3, #22]
#endif
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7b1b      	ldrb	r3, [r3, #12]
 80070ba:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80070c4:	7bfa      	ldrb	r2, [r7, #15]
 80070c6:	7b7b      	ldrb	r3, [r7, #13]
 80070c8:	fa42 f303 	asr.w	r3, r2, r3
 80070cc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80070ce:	7b7b      	ldrb	r3, [r7, #13]
 80070d0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80070d2:	7bba      	ldrb	r2, [r7, #14]
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	4413      	add	r3, r2
 80070d8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b07      	cmp	r3, #7
 80070de:	d91a      	bls.n	8007116 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80070e0:	2308      	movs	r3, #8
 80070e2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80070e4:	7b3a      	ldrb	r2, [r7, #12]
 80070e6:	7b7b      	ldrb	r3, [r7, #13]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	7b3b      	ldrb	r3, [r7, #12]
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	b25a      	sxtb	r2, r3
 8007106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800710a:	4313      	orrs	r3, r2
 800710c:	b25b      	sxtb	r3, r3
 800710e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	3b08      	subs	r3, #8
 8007114:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	b2db      	uxtb	r3, r3
 8007122:	43db      	mvns	r3, r3
 8007124:	b2da      	uxtb	r2, r3
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	4013      	ands	r3, r2
 800712a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	7bba      	ldrb	r2, [r7, #14]
 8007130:	731a      	strb	r2, [r3, #12]
  return val;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ffaa 	bl	80070aa <u8g2_font_decode_get_unsigned_bits>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	3b01      	subs	r3, #1
 8007162:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8007164:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8007170:	7bfa      	ldrb	r2, [r7, #15]
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	b2db      	uxtb	r3, r3
 8007178:	73fb      	strb	r3, [r7, #15]
  return v;
 800717a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8007186:	b490      	push	{r4, r7}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	4604      	mov	r4, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	461a      	mov	r2, r3
 8007194:	4623      	mov	r3, r4
 8007196:	80fb      	strh	r3, [r7, #6]
 8007198:	4603      	mov	r3, r0
 800719a:	717b      	strb	r3, [r7, #5]
 800719c:	460b      	mov	r3, r1
 800719e:	713b      	strb	r3, [r7, #4]
 80071a0:	4613      	mov	r3, r2
 80071a2:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d014      	beq.n	80071d4 <u8g2_add_vector_y+0x4e>
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	dc19      	bgt.n	80071e2 <u8g2_add_vector_y+0x5c>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <u8g2_add_vector_y+0x32>
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d007      	beq.n	80071c6 <u8g2_add_vector_y+0x40>
 80071b6:	e014      	b.n	80071e2 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80071b8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80071bc:	b29a      	uxth	r2, r3
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	4413      	add	r3, r2
 80071c2:	80fb      	strh	r3, [r7, #6]
      break;
 80071c4:	e014      	b.n	80071f0 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80071c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	4413      	add	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
      break;
 80071d2:	e00d      	b.n	80071f0 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80071d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	80fb      	strh	r3, [r7, #6]
      break;
 80071e0:	e006      	b.n	80071f0 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80071e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	80fb      	strh	r3, [r7, #6]
      break;      
 80071ee:	bf00      	nop
  }
  return dy;
 80071f0:	88fb      	ldrh	r3, [r7, #6]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc90      	pop	{r4, r7}
 80071fa:	4770      	bx	lr

080071fc <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80071fc:	b490      	push	{r4, r7}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	461a      	mov	r2, r3
 800720a:	4623      	mov	r3, r4
 800720c:	80fb      	strh	r3, [r7, #6]
 800720e:	4603      	mov	r3, r0
 8007210:	717b      	strb	r3, [r7, #5]
 8007212:	460b      	mov	r3, r1
 8007214:	713b      	strb	r3, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d014      	beq.n	800724a <u8g2_add_vector_x+0x4e>
 8007220:	2b02      	cmp	r3, #2
 8007222:	dc19      	bgt.n	8007258 <u8g2_add_vector_x+0x5c>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <u8g2_add_vector_x+0x32>
 8007228:	2b01      	cmp	r3, #1
 800722a:	d007      	beq.n	800723c <u8g2_add_vector_x+0x40>
 800722c:	e014      	b.n	8007258 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800722e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8007232:	b29a      	uxth	r2, r3
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	4413      	add	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
      break;
 800723a:	e014      	b.n	8007266 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800723c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8007240:	b29b      	uxth	r3, r3
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	80fb      	strh	r3, [r7, #6]
      break;
 8007248:	e00d      	b.n	8007266 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800724a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800724e:	b29b      	uxth	r3, r3
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	80fb      	strh	r3, [r7, #6]
      break;
 8007256:	e006      	b.n	8007266 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8007258:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800725c:	b29a      	uxth	r2, r3
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	4413      	add	r3, r2
 8007262:	80fb      	strh	r3, [r7, #6]
      break;      
 8007264:	bf00      	nop
  }
  return dx;
 8007266:	88fb      	ldrh	r3, [r7, #6]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bc90      	pop	{r4, r7}
 8007270:	4770      	bx	lr

08007272 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b088      	sub	sp, #32
 8007276:	af02      	add	r7, sp, #8
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
 800727e:	4613      	mov	r3, r2
 8007280:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3360      	adds	r3, #96	@ 0x60
 8007286:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007292:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800729a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80072a2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80072a4:	7bfa      	ldrb	r2, [r7, #15]
 80072a6:	7d7b      	ldrb	r3, [r7, #21]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80072b0:	7dfa      	ldrb	r2, [r7, #23]
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d201      	bcs.n	80072bc <u8g2_font_decode_len+0x4a>
      current = cnt;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	889b      	ldrh	r3, [r3, #4]
 80072c0:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	88db      	ldrh	r3, [r3, #6]
 80072c6:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80072c8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80072cc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	7c1b      	ldrb	r3, [r3, #16]
 80072d4:	89b8      	ldrh	r0, [r7, #12]
 80072d6:	f7ff ff91 	bl	80071fc <u8g2_add_vector_x>
 80072da:	4603      	mov	r3, r0
 80072dc:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80072de:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80072e2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	7c1b      	ldrb	r3, [r3, #16]
 80072ea:	8978      	ldrh	r0, [r7, #10]
 80072ec:	f7ff ff4b 	bl	8007186 <u8g2_add_vector_y>
 80072f0:	4603      	mov	r3, r0
 80072f2:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80072f4:	78bb      	ldrb	r3, [r7, #2]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	7b9a      	ldrb	r2, [r3, #14]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 8007304:	7dbb      	ldrb	r3, [r7, #22]
 8007306:	b298      	uxth	r0, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	7c1b      	ldrb	r3, [r3, #16]
 800730c:	897a      	ldrh	r2, [r7, #10]
 800730e:	89b9      	ldrh	r1, [r7, #12]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4603      	mov	r3, r0
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fcb2 	bl	8007c7e <u8g2_DrawHVLine>
 800731a:	e013      	b.n	8007344 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	7b5b      	ldrb	r3, [r3, #13]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10f      	bne.n	8007344 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	7bda      	ldrb	r2, [r3, #15]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 800732e:	7dbb      	ldrb	r3, [r7, #22]
 8007330:	b298      	uxth	r0, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	7c1b      	ldrb	r3, [r3, #16]
 8007336:	897a      	ldrh	r2, [r7, #10]
 8007338:	89b9      	ldrh	r1, [r7, #12]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	4603      	mov	r3, r0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fc9d 	bl	8007c7e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8007344:	7dfa      	ldrb	r2, [r7, #23]
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	429a      	cmp	r2, r3
 800734a:	d309      	bcc.n	8007360 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800734c:	7dfa      	ldrb	r2, [r7, #23]
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	757b      	strb	r3, [r7, #21]
    ly++;
 8007358:	7d3b      	ldrb	r3, [r7, #20]
 800735a:	3301      	adds	r3, #1
 800735c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800735e:	e79d      	b.n	800729c <u8g2_font_decode_len+0x2a>
      break;
 8007360:	bf00      	nop
  }
  lx += cnt;
 8007362:	7d7a      	ldrb	r2, [r7, #21]
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	4413      	add	r3, r2
 8007368:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800736a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8007372:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	725a      	strb	r2, [r3, #9]
}
 800737a:	bf00      	nop
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3360      	adds	r3, #96	@ 0x60
 8007390:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80073a4:	4619      	mov	r1, r3
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff fe7f 	bl	80070aa <u8g2_font_decode_get_unsigned_bits>
 80073ac:	4603      	mov	r3, r0
 80073ae:	b25a      	sxtb	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80073ba:	4619      	mov	r1, r3
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fe74 	bl	80070aa <u8g2_font_decode_get_unsigned_bits>
 80073c2:	4603      	mov	r3, r0
 80073c4:	b25a      	sxtb	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	7b9b      	ldrb	r3, [r3, #14]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	73da      	strb	r2, [r3, #15]
}
 80073e8:	bf00      	nop
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	@ 0x28
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3360      	adds	r3, #96	@ 0x60
 80073fe:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ffbd 	bl	8007382 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800740e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8007416:	4619      	mov	r1, r3
 8007418:	6978      	ldr	r0, [r7, #20]
 800741a:	f7ff fe91 	bl	8007140 <u8g2_font_decode_get_signed_bits>
 800741e:	4603      	mov	r3, r0
 8007420:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8007428:	4619      	mov	r1, r3
 800742a:	6978      	ldr	r0, [r7, #20]
 800742c:	f7ff fe88 	bl	8007140 <u8g2_font_decode_get_signed_bits>
 8007430:	4603      	mov	r3, r0
 8007432:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800743a:	4619      	mov	r1, r3
 800743c:	6978      	ldr	r0, [r7, #20]
 800743e:	f7ff fe7f 	bl	8007140 <u8g2_font_decode_get_signed_bits>
 8007442:	4603      	mov	r3, r0
 8007444:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f340 80d7 	ble.w	8007600 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	8898      	ldrh	r0, [r3, #4]
 8007456:	7cfa      	ldrb	r2, [r7, #19]
 8007458:	7c7b      	ldrb	r3, [r7, #17]
 800745a:	4413      	add	r3, r2
 800745c:	b2db      	uxtb	r3, r3
 800745e:	425b      	negs	r3, r3
 8007460:	b2db      	uxtb	r3, r3
 8007462:	b25a      	sxtb	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	7c1b      	ldrb	r3, [r3, #16]
 8007468:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800746c:	f7ff fec6 	bl	80071fc <u8g2_add_vector_x>
 8007470:	4603      	mov	r3, r0
 8007472:	461a      	mov	r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	88d8      	ldrh	r0, [r3, #6]
 800747c:	7cfa      	ldrb	r2, [r7, #19]
 800747e:	7c7b      	ldrb	r3, [r7, #17]
 8007480:	4413      	add	r3, r2
 8007482:	b2db      	uxtb	r3, r3
 8007484:	425b      	negs	r3, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	b25a      	sxtb	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	7c1b      	ldrb	r3, [r3, #16]
 800748e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8007492:	f7ff fe78 	bl	8007186 <u8g2_add_vector_y>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	889b      	ldrh	r3, [r3, #4]
 80074a2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	88db      	ldrh	r3, [r3, #6]
 80074a8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80074aa:	8bfb      	ldrh	r3, [r7, #30]
 80074ac:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80074ae:	8b7b      	ldrh	r3, [r7, #26]
 80074b0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	7c1b      	ldrb	r3, [r3, #16]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d85a      	bhi.n	8007570 <u8g2_font_decode_glyph+0x180>
 80074ba:	a201      	add	r2, pc, #4	@ (adr r2, 80074c0 <u8g2_font_decode_glyph+0xd0>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	08007515 	.word	0x08007515
 80074cc:	08007549 	.word	0x08007549
      {
	case 0:
	    x1 += decode->glyph_width;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	8bbb      	ldrh	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80074de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	8b3b      	ldrh	r3, [r7, #24]
 80074e6:	4413      	add	r3, r2
 80074e8:	833b      	strh	r3, [r7, #24]
	    break;
 80074ea:	e041      	b.n	8007570 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80074ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	8bfa      	ldrh	r2, [r7, #30]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80074f8:	8bfb      	ldrh	r3, [r7, #30]
 80074fa:	3301      	adds	r3, #1
 80074fc:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80074fe:	8bbb      	ldrh	r3, [r7, #28]
 8007500:	3301      	adds	r3, #1
 8007502:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800750a:	b29a      	uxth	r2, r3
 800750c:	8b3b      	ldrh	r3, [r7, #24]
 800750e:	4413      	add	r3, r2
 8007510:	833b      	strh	r3, [r7, #24]
	    break;
 8007512:	e02d      	b.n	8007570 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800751a:	b29b      	uxth	r3, r3
 800751c:	8bfa      	ldrh	r2, [r7, #30]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8007522:	8bfb      	ldrh	r3, [r7, #30]
 8007524:	3301      	adds	r3, #1
 8007526:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8007528:	8bbb      	ldrh	r3, [r7, #28]
 800752a:	3301      	adds	r3, #1
 800752c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800752e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007532:	b29b      	uxth	r3, r3
 8007534:	8b7a      	ldrh	r2, [r7, #26]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800753a:	8b7b      	ldrh	r3, [r7, #26]
 800753c:	3301      	adds	r3, #1
 800753e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8007540:	8b3b      	ldrh	r3, [r7, #24]
 8007542:	3301      	adds	r3, #1
 8007544:	833b      	strh	r3, [r7, #24]
	    break;	  
 8007546:	e013      	b.n	8007570 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8007548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800754c:	b29a      	uxth	r2, r3
 800754e:	8bbb      	ldrh	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800755a:	b29b      	uxth	r3, r3
 800755c:	8b7a      	ldrh	r2, [r7, #26]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8007562:	8b7b      	ldrh	r3, [r7, #26]
 8007564:	3301      	adds	r3, #1
 8007566:	837b      	strh	r3, [r7, #26]
	    y1++;
 8007568:	8b3b      	ldrh	r3, [r7, #24]
 800756a:	3301      	adds	r3, #1
 800756c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800756e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8007570:	8bb8      	ldrh	r0, [r7, #28]
 8007572:	8b7a      	ldrh	r2, [r7, #26]
 8007574:	8bf9      	ldrh	r1, [r7, #30]
 8007576:	8b3b      	ldrh	r3, [r7, #24]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	4603      	mov	r3, r0
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fca1 	bl	8007ec4 <u8g2_IsIntersection>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <u8g2_font_decode_glyph+0x19e>
	return d;
 8007588:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800758c:	e03a      	b.n	8007604 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2200      	movs	r2, #0
 8007592:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2200      	movs	r2, #0
 8007598:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80075a0:	4619      	mov	r1, r3
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f7ff fd81 	bl	80070aa <u8g2_font_decode_get_unsigned_bits>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80075b2:	4619      	mov	r1, r3
 80075b4:	6978      	ldr	r0, [r7, #20]
 80075b6:	f7ff fd78 	bl	80070aa <u8g2_font_decode_get_unsigned_bits>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2200      	movs	r2, #0
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff fe54 	bl	8007272 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2201      	movs	r2, #1
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff fe4e 	bl	8007272 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80075d6:	2101      	movs	r1, #1
 80075d8:	6978      	ldr	r0, [r7, #20]
 80075da:	f7ff fd66 	bl	80070aa <u8g2_font_decode_get_unsigned_bits>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1ec      	bne.n	80075be <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80075ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	dd00      	ble.n	80075f4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80075f2:	e7d2      	b.n	800759a <u8g2_font_decode_glyph+0x1aa>
	break;
 80075f4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	7b9a      	ldrb	r2, [r3, #14]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 8007600:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	3317      	adds	r3, #23
 8007622:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8007624:	887b      	ldrh	r3, [r7, #2]
 8007626:	2bff      	cmp	r3, #255	@ 0xff
 8007628:	d82a      	bhi.n	8007680 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800762a:	887b      	ldrh	r3, [r7, #2]
 800762c:	2b60      	cmp	r3, #96	@ 0x60
 800762e:	d907      	bls.n	8007640 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8007636:	461a      	mov	r2, r3
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	4413      	add	r3, r2
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	e009      	b.n	8007654 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8007640:	887b      	ldrh	r3, [r7, #2]
 8007642:	2b40      	cmp	r3, #64	@ 0x40
 8007644:	d906      	bls.n	8007654 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800764c:	461a      	mov	r2, r3
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	4413      	add	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	3301      	adds	r3, #1
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d04e      	beq.n	80076fc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	887b      	ldrh	r3, [r7, #2]
 8007666:	4293      	cmp	r3, r2
 8007668:	d102      	bne.n	8007670 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	3302      	adds	r3, #2
 800766e:	e049      	b.n	8007704 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3301      	adds	r3, #1
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	4413      	add	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800767e:	e7e9      	b.n	8007654 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8007686:	461a      	mov	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8007692:	2100      	movs	r1, #0
 8007694:	6938      	ldr	r0, [r7, #16]
 8007696:	f7ff fc3f 	bl	8006f18 <u8g2_font_get_word>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	4413      	add	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80076a4:	2102      	movs	r1, #2
 80076a6:	6938      	ldr	r0, [r7, #16]
 80076a8:	f7ff fc36 	bl	8006f18 <u8g2_font_get_word>
 80076ac:	4603      	mov	r3, r0
 80076ae:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	3304      	adds	r3, #4
 80076b4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80076b6:	89fa      	ldrh	r2, [r7, #14]
 80076b8:	887b      	ldrh	r3, [r7, #2]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d3e9      	bcc.n	8007692 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80076c4:	89fb      	ldrh	r3, [r7, #14]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	3301      	adds	r3, #1
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	89fb      	ldrh	r3, [r7, #14]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d010      	beq.n	8007700 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80076de:	89fa      	ldrh	r2, [r7, #14]
 80076e0:	887b      	ldrh	r3, [r7, #2]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d102      	bne.n	80076ec <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	3303      	adds	r3, #3
 80076ea:	e00b      	b.n	8007704 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3302      	adds	r3, #2
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	4413      	add	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80076fa:	e7e0      	b.n	80076be <u8g2_font_get_glyph_data+0xb2>
	break;
 80076fc:	bf00      	nop
 80076fe:	e000      	b.n	8007702 <u8g2_font_get_glyph_data+0xf6>
	break;
 8007700:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	4608      	mov	r0, r1
 8007716:	4611      	mov	r1, r2
 8007718:	461a      	mov	r2, r3
 800771a:	4603      	mov	r3, r0
 800771c:	817b      	strh	r3, [r7, #10]
 800771e:	460b      	mov	r3, r1
 8007720:	813b      	strh	r3, [r7, #8]
 8007722:	4613      	mov	r3, r2
 8007724:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	897a      	ldrh	r2, [r7, #10]
 800772e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	893a      	ldrh	r2, [r7, #8]
 8007736:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	4619      	mov	r1, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff ff64 	bl	800760c <u8g2_font_get_glyph_data>
 8007744:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800774c:	6939      	ldr	r1, [r7, #16]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7ff fe4e 	bl	80073f0 <u8g2_font_decode_glyph>
 8007754:	4603      	mov	r3, r0
 8007756:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8007758:	8afb      	ldrh	r3, [r7, #22]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 800776e:	887b      	ldrh	r3, [r7, #2]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff ff4a 	bl	800760c <u8g2_font_get_glyph_data>
 8007778:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8007780:	2300      	movs	r3, #0
 8007782:	e027      	b.n	80077d4 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8007784:	68f9      	ldr	r1, [r7, #12]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff fdfb 	bl	8007382 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7ff fcd0 	bl	8007140 <u8g2_font_decode_get_signed_bits>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80077b6:	4619      	mov	r1, r3
 80077b8:	4610      	mov	r0, r2
 80077ba:	f7ff fcc1 	bl	8007140 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f7ff fcb7 	bl	8007140 <u8g2_font_decode_get_signed_bits>
 80077d2:	4603      	mov	r3, r0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	461a      	mov	r2, r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	817b      	strh	r3, [r7, #10]
 80077ee:	460b      	mov	r3, r1
 80077f0:	813b      	strh	r3, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d833      	bhi.n	8007868 <u8g2_DrawGlyph+0x8c>
 8007800:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <u8g2_DrawGlyph+0x2c>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	08007819 	.word	0x08007819
 800780c:	0800782d 	.word	0x0800782d
 8007810:	08007841 	.word	0x08007841
 8007814:	08007855 	.word	0x08007855
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	4798      	blx	r3
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	893b      	ldrh	r3, [r7, #8]
 8007826:	4413      	add	r3, r2
 8007828:	813b      	strh	r3, [r7, #8]
      break;
 800782a:	e01d      	b.n	8007868 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	461a      	mov	r2, r3
 8007838:	897b      	ldrh	r3, [r7, #10]
 800783a:	1a9b      	subs	r3, r3, r2
 800783c:	817b      	strh	r3, [r7, #10]
      break;
 800783e:	e013      	b.n	8007868 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	4798      	blx	r3
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	893b      	ldrh	r3, [r7, #8]
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	813b      	strh	r3, [r7, #8]
      break;
 8007852:	e009      	b.n	8007868 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	4798      	blx	r3
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	897b      	ldrh	r3, [r7, #10]
 8007862:	4413      	add	r3, r2
 8007864:	817b      	strh	r3, [r7, #10]
      break;
 8007866:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	893a      	ldrh	r2, [r7, #8]
 800786c:	8979      	ldrh	r1, [r7, #10]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff ff4c 	bl	800770c <u8g2_font_draw_glyph>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop

08007880 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	817b      	strh	r3, [r7, #10]
 800788e:	4613      	mov	r3, r2
 8007890:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 fd46 	bl	8008324 <u8x8_utf8_init>
  sum = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	4611      	mov	r1, r2
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80078ae:	8abb      	ldrh	r3, [r7, #20]
 80078b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d038      	beq.n	800792a <u8g2_draw_string+0xaa>
      break;
    str++;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3301      	adds	r3, #1
 80078bc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80078be:	8abb      	ldrh	r3, [r7, #20]
 80078c0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d0e9      	beq.n	800789c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80078c8:	8abb      	ldrh	r3, [r7, #20]
 80078ca:	893a      	ldrh	r2, [r7, #8]
 80078cc:	8979      	ldrh	r1, [r7, #10]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7ff ff84 	bl	80077dc <u8g2_DrawGlyph>
 80078d4:	4603      	mov	r3, r0
 80078d6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d81e      	bhi.n	8007920 <u8g2_draw_string+0xa0>
 80078e2:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <u8g2_draw_string+0x68>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	08007903 	.word	0x08007903
 80078f0:	0800790d 	.word	0x0800790d
 80078f4:	08007917 	.word	0x08007917
      {
	case 0:
	  x += delta;
 80078f8:	897a      	ldrh	r2, [r7, #10]
 80078fa:	8a7b      	ldrh	r3, [r7, #18]
 80078fc:	4413      	add	r3, r2
 80078fe:	817b      	strh	r3, [r7, #10]
	  break;
 8007900:	e00e      	b.n	8007920 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8007902:	893a      	ldrh	r2, [r7, #8]
 8007904:	8a7b      	ldrh	r3, [r7, #18]
 8007906:	4413      	add	r3, r2
 8007908:	813b      	strh	r3, [r7, #8]
	  break;
 800790a:	e009      	b.n	8007920 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800790c:	897a      	ldrh	r2, [r7, #10]
 800790e:	8a7b      	ldrh	r3, [r7, #18]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	817b      	strh	r3, [r7, #10]
	  break;
 8007914:	e004      	b.n	8007920 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8007916:	893a      	ldrh	r2, [r7, #8]
 8007918:	8a7b      	ldrh	r3, [r7, #18]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	813b      	strh	r3, [r7, #8]
	  break;
 800791e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8007920:	8afa      	ldrh	r2, [r7, #22]
 8007922:	8a7b      	ldrh	r3, [r7, #18]
 8007924:	4413      	add	r3, r2
 8007926:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007928:	e7b8      	b.n	800789c <u8g2_draw_string+0x1c>
      break;
 800792a:	bf00      	nop
    }
  }
  return sum;
 800792c:	8afb      	ldrh	r3, [r7, #22]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop

08007938 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	607b      	str	r3, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	817b      	strh	r3, [r7, #10]
 8007946:	4613      	mov	r3, r2
 8007948:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4a06      	ldr	r2, [pc, #24]	@ (8007968 <u8g2_DrawStr+0x30>)
 800794e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8007950:	893a      	ldrh	r2, [r7, #8]
 8007952:	8979      	ldrh	r1, [r7, #10]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ff92 	bl	8007880 <u8g2_draw_string>
 800795c:	4603      	mov	r3, r0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	08008341 	.word	0x08008341

0800796c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007978:	2b00      	cmp	r3, #0
 800797a:	d05d      	beq.n	8007a38 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800799a:	2b00      	cmp	r3, #0
 800799c:	d04d      	beq.n	8007a3a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d11c      	bne.n	80079e2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 80079b4:	429a      	cmp	r2, r3
 80079b6:	da05      	bge.n	80079c4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 80079d0:	429a      	cmp	r2, r3
 80079d2:	dd32      	ble.n	8007a3a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 80079e0:	e02b      	b.n	8007a3a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 80079e8:	461a      	mov	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 80079f0:	4619      	mov	r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 80079f8:	440b      	add	r3, r1
 80079fa:	429a      	cmp	r2, r3
 80079fc:	da0d      	bge.n	8007a1a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	4413      	add	r3, r2
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	b25a      	sxtb	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8007a26:	429a      	cmp	r2, r3
 8007a28:	dd07      	ble.n	8007a3a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8007a36:	e000      	b.n	8007a3a <u8g2_UpdateRefHeight+0xce>
    return;
 8007a38:	bf00      	nop
  }  
}
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  return 0;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
	...

08007a5c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a04      	ldr	r2, [pc, #16]	@ (8007a78 <u8g2_SetFontPosBaseline+0x1c>)
 8007a68:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	08007a45 	.word	0x08007a45

08007a7c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d00b      	beq.n	8007aa8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3374      	adds	r3, #116	@ 0x74
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fa5b 	bl	8006f58 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff ff62 	bl	800796c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 8007aba:	23c0      	movs	r3, #192	@ 0xc0
 8007abc:	72fb      	strb	r3, [r7, #11]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fc2c 	bl	8008324 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	7812      	ldrb	r2, [r2, #0]
 8007adc:	4611      	mov	r1, r2
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	813b      	strh	r3, [r7, #8]
    if ( e == 0x0ffff )
 8007ae6:	893b      	ldrh	r3, [r7, #8]
 8007ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d01c      	beq.n	8007b2a <u8g2_string_width+0x7a>
      break;
    str++;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8007af6:	893b      	ldrh	r3, [r7, #8]
 8007af8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d0e9      	beq.n	8007ad4 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph, side effect: updates u8g2->glyph_x_offset */
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fe2c 	bl	8007762 <u8g2_GetGlyphWidth>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 8007b0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007b12:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8007b16:	d103      	bne.n	8007b20 <u8g2_string_width+0x70>
        initial_x_offset = u8g2->glyph_x_offset;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8007b1e:	72fb      	strb	r3, [r7, #11]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 8007b20:	89fa      	ldrh	r2, [r7, #14]
 8007b22:	89bb      	ldrh	r3, [r7, #12]
 8007b24:	4413      	add	r3, r2
 8007b26:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007b28:	e7d4      	b.n	8007ad4 <u8g2_string_width+0x24>
      break;
 8007b2a:	bf00      	nop
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01b      	beq.n	8007b6e <u8g2_string_width+0xbe>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 8007b36:	89fa      	ldrh	r2, [r7, #14]
 8007b38:	89bb      	ldrh	r3, [r7, #12]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f993 306a 	ldrsb.w	r3, [r3, #106]	@ 0x6a
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	89fb      	ldrh	r3, [r7, #14]
 8007b48:	4413      	add	r3, r2
 8007b4a:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f993 3090 	ldrsb.w	r3, [r3, #144]	@ 0x90
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	89fb      	ldrh	r3, [r7, #14]
 8007b56:	4413      	add	r3, r2
 8007b58:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 8007b5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd05      	ble.n	8007b6e <u8g2_string_width+0xbe>
      w+=initial_x_offset;
 8007b62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	89fb      	ldrh	r3, [r7, #14]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	81fb      	strh	r3, [r7, #14]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 8007b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a05      	ldr	r2, [pc, #20]	@ (8007b9c <u8g2_GetStrWidth+0x24>)
 8007b86:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff ff90 	bl	8007ab0 <u8g2_string_width>
 8007b90:	4603      	mov	r3, r0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	08008341 	.word	0x08008341

08007ba0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4611      	mov	r1, r2
 8007bac:	461a      	mov	r2, r3
 8007bae:	460b      	mov	r3, r1
 8007bb0:	80fb      	strh	r3, [r7, #6]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8007bbc:	8afb      	ldrh	r3, [r7, #22]
 8007bbe:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	881a      	ldrh	r2, [r3, #0]
 8007bc4:	8abb      	ldrh	r3, [r7, #20]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8007bca:	8afa      	ldrh	r2, [r7, #22]
 8007bcc:	8abb      	ldrh	r3, [r7, #20]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d90b      	bls.n	8007bea <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8007bd2:	8afa      	ldrh	r2, [r7, #22]
 8007bd4:	88bb      	ldrh	r3, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d205      	bcs.n	8007be6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8007bda:	88bb      	ldrh	r3, [r7, #4]
 8007bdc:	82bb      	strh	r3, [r7, #20]
      b--;
 8007bde:	8abb      	ldrh	r3, [r7, #20]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	82bb      	strh	r3, [r7, #20]
 8007be4:	e001      	b.n	8007bea <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8007bea:	8afa      	ldrh	r2, [r7, #22]
 8007bec:	88bb      	ldrh	r3, [r7, #4]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d301      	bcc.n	8007bf6 <u8g2_clip_intersection2+0x56>
    return 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e01c      	b.n	8007c30 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8007bf6:	8aba      	ldrh	r2, [r7, #20]
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d801      	bhi.n	8007c02 <u8g2_clip_intersection2+0x62>
    return 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e016      	b.n	8007c30 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8007c02:	8afa      	ldrh	r2, [r7, #22]
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d201      	bcs.n	8007c0e <u8g2_clip_intersection2+0x6e>
    a = c;
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8007c0e:	8aba      	ldrh	r2, [r7, #20]
 8007c10:	88bb      	ldrh	r3, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d901      	bls.n	8007c1a <u8g2_clip_intersection2+0x7a>
    b = d;
 8007c16:	88bb      	ldrh	r3, [r7, #4]
 8007c18:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8afa      	ldrh	r2, [r7, #22]
 8007c1e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8007c20:	8aba      	ldrh	r2, [r7, #20]
 8007c22:	8afb      	ldrh	r3, [r7, #22]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	8aba      	ldrh	r2, [r7, #20]
 8007c2c:	801a      	strh	r2, [r3, #0]
  return 1;
 8007c2e:	2301      	movs	r3, #1
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007c3c:	b590      	push	{r4, r7, lr}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	4608      	mov	r0, r1
 8007c46:	4611      	mov	r1, r2
 8007c48:	461a      	mov	r2, r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	817b      	strh	r3, [r7, #10]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	813b      	strh	r3, [r7, #8]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c5a:	893a      	ldrh	r2, [r7, #8]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007c64:	88f8      	ldrh	r0, [r7, #6]
 8007c66:	893a      	ldrh	r2, [r7, #8]
 8007c68:	8979      	ldrh	r1, [r7, #10]
 8007c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4603      	mov	r3, r0
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	47a0      	blx	r4
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd90      	pop	{r4, r7, pc}

08007c7e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007c7e:	b590      	push	{r4, r7, lr}
 8007c80:	b087      	sub	sp, #28
 8007c82:	af02      	add	r7, sp, #8
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	4608      	mov	r0, r1
 8007c88:	4611      	mov	r1, r2
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	817b      	strh	r3, [r7, #10]
 8007c90:	460b      	mov	r3, r1
 8007c92:	813b      	strh	r3, [r7, #8]
 8007c94:	4613      	mov	r3, r2
 8007c96:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d075      	beq.n	8007d8e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d072      	beq.n	8007d8e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d91a      	bls.n	8007ce4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8007cae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d109      	bne.n	8007cca <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8007cb6:	897a      	ldrh	r2, [r7, #10]
 8007cb8:	88fb      	ldrh	r3, [r7, #6]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	817b      	strh	r3, [r7, #10]
	  x++;
 8007cc0:	897b      	ldrh	r3, [r7, #10]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	817b      	strh	r3, [r7, #10]
 8007cc8:	e00c      	b.n	8007ce4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8007cca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d108      	bne.n	8007ce4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8007cd2:	893a      	ldrh	r2, [r7, #8]
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	813b      	strh	r3, [r7, #8]
	  y++;
 8007cdc:	893b      	ldrh	r3, [r7, #8]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8007ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8007cf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d11a      	bne.n	8007d2e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8007cfe:	893b      	ldrh	r3, [r7, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d83b      	bhi.n	8007d7c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8007d0a:	893b      	ldrh	r3, [r7, #8]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d937      	bls.n	8007d80 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8007d1c:	1db9      	adds	r1, r7, #6
 8007d1e:	f107 000a 	add.w	r0, r7, #10
 8007d22:	f7ff ff3d 	bl	8007ba0 <u8g2_clip_intersection2>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d11a      	bne.n	8007d62 <u8g2_DrawHVLine+0xe4>
	  return;
 8007d2c:	e02f      	b.n	8007d8e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8007d34:	897b      	ldrh	r3, [r7, #10]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d824      	bhi.n	8007d84 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8007d40:	897b      	ldrh	r3, [r7, #10]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d920      	bls.n	8007d88 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8007d52:	1db9      	adds	r1, r7, #6
 8007d54:	f107 0008 	add.w	r0, r7, #8
 8007d58:	f7ff ff22 	bl	8007ba0 <u8g2_clip_intersection2>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d014      	beq.n	8007d8c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d66:	689c      	ldr	r4, [r3, #8]
 8007d68:	8979      	ldrh	r1, [r7, #10]
 8007d6a:	893a      	ldrh	r2, [r7, #8]
 8007d6c:	88f8      	ldrh	r0, [r7, #6]
 8007d6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	4603      	mov	r3, r0
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	47a0      	blx	r4
 8007d7a:	e008      	b.n	8007d8e <u8g2_DrawHVLine+0x110>
	  return;
 8007d7c:	bf00      	nop
 8007d7e:	e006      	b.n	8007d8e <u8g2_DrawHVLine+0x110>
	  return;
 8007d80:	bf00      	nop
 8007d82:	e004      	b.n	8007d8e <u8g2_DrawHVLine+0x110>
	  return;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <u8g2_DrawHVLine+0x110>
	  return;
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <u8g2_DrawHVLine+0x110>
	  return;
 8007d8c:	bf00      	nop
    }
}
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd90      	pop	{r4, r7, pc}

08007d94 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	461a      	mov	r2, r3
 8007da2:	4603      	mov	r3, r0
 8007da4:	817b      	strh	r3, [r7, #10]
 8007da6:	460b      	mov	r3, r1
 8007da8:	813b      	strh	r3, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8007dae:	88fb      	ldrh	r3, [r7, #6]
 8007db0:	893a      	ldrh	r2, [r7, #8]
 8007db2:	8979      	ldrh	r1, [r7, #10]
 8007db4:	2000      	movs	r0, #0
 8007db6:	9000      	str	r0, [sp, #0]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff ff60 	bl	8007c7e <u8g2_DrawHVLine>
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af02      	add	r7, sp, #8
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	817b      	strh	r3, [r7, #10]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	813b      	strh	r3, [r7, #8]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	893a      	ldrh	r2, [r7, #8]
 8007de4:	8979      	ldrh	r1, [r7, #10]
 8007de6:	2001      	movs	r0, #1
 8007de8:	9000      	str	r0, [sp, #0]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f7ff ff47 	bl	8007c7e <u8g2_DrawHVLine>
}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
 8007e04:	4613      	mov	r3, r2
 8007e06:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8007e0e:	883a      	ldrh	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d31a      	bcc.n	8007e4a <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8007e1a:	883a      	ldrh	r2, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d216      	bcs.n	8007e4e <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007e26:	887a      	ldrh	r2, [r7, #2]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d312      	bcc.n	8007e52 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8007e32:	887a      	ldrh	r2, [r7, #2]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d20e      	bcs.n	8007e56 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8007e38:	883a      	ldrh	r2, [r7, #0]
 8007e3a:	8879      	ldrh	r1, [r7, #2]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2301      	movs	r3, #1
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff ff1b 	bl	8007c7e <u8g2_DrawHVLine>
 8007e48:	e006      	b.n	8007e58 <u8g2_DrawPixel+0x60>
    return;
 8007e4a:	bf00      	nop
 8007e4c:	e004      	b.n	8007e58 <u8g2_DrawPixel+0x60>
    return;
 8007e4e:	bf00      	nop
 8007e50:	e002      	b.n	8007e58 <u8g2_DrawPixel+0x60>
    return;
 8007e52:	bf00      	nop
 8007e54:	e000      	b.n	8007e58 <u8g2_DrawPixel+0x60>
    return;
 8007e56:	bf00      	nop
}
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8007e5e:	b490      	push	{r4, r7}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	4604      	mov	r4, r0
 8007e66:	4608      	mov	r0, r1
 8007e68:	4611      	mov	r1, r2
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4623      	mov	r3, r4
 8007e6e:	80fb      	strh	r3, [r7, #6]
 8007e70:	4603      	mov	r3, r0
 8007e72:	80bb      	strh	r3, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	807b      	strh	r3, [r7, #2]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8007e7c:	887a      	ldrh	r2, [r7, #2]
 8007e7e:	88bb      	ldrh	r3, [r7, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d20d      	bcs.n	8007ea0 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8007e84:	883a      	ldrh	r2, [r7, #0]
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d901      	bls.n	8007e90 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e014      	b.n	8007eba <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8007e90:	887a      	ldrh	r2, [r7, #2]
 8007e92:	883b      	ldrh	r3, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d901      	bls.n	8007e9c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e00e      	b.n	8007eba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e00c      	b.n	8007eba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8007ea0:	883a      	ldrh	r2, [r7, #0]
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d907      	bls.n	8007eb8 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8007ea8:	887a      	ldrh	r2, [r7, #2]
 8007eaa:	883b      	ldrh	r3, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d901      	bls.n	8007eb4 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e002      	b.n	8007eba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e000      	b.n	8007eba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8007eb8:	2300      	movs	r3, #0
    }
  }
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc90      	pop	{r4, r7}
 8007ec2:	4770      	bx	lr

08007ec4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	4608      	mov	r0, r1
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	817b      	strh	r3, [r7, #10]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	813b      	strh	r3, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8007eea:	8b3b      	ldrh	r3, [r7, #24]
 8007eec:	893a      	ldrh	r2, [r7, #8]
 8007eee:	f7ff ffb6 	bl	8007e5e <u8g2_is_intersection_decision_tree>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <u8g2_IsIntersection+0x38>
    return 0; 
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e00a      	b.n	8007f12 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	897a      	ldrh	r2, [r7, #10]
 8007f0c:	f7ff ffa7 	bl	8007e5e <u8g2_is_intersection_decision_tree>
 8007f10:	4603      	mov	r3, r0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b089      	sub	sp, #36	@ 0x24
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	4603      	mov	r3, r0
 8007f2a:	817b      	strh	r3, [r7, #10]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	813b      	strh	r3, [r7, #8]
 8007f30:	4613      	mov	r3, r2
 8007f32:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8007f34:	893b      	ldrh	r3, [r7, #8]
 8007f36:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8007f38:	7efb      	ldrb	r3, [r7, #27]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8007f40:	2301      	movs	r3, #1
 8007f42:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8007f44:	7e3a      	ldrb	r2, [r7, #24]
 8007f46:	7efb      	ldrb	r3, [r7, #27]
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d801      	bhi.n	8007f64 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8007f60:	7e3b      	ldrb	r3, [r7, #24]
 8007f62:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d001      	beq.n	8007f72 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8007f6e:	7e3b      	ldrb	r3, [r7, #24]
 8007f70:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8007f72:	893b      	ldrh	r3, [r7, #8]
 8007f74:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8007f76:	8afb      	ldrh	r3, [r7, #22]
 8007f78:	f023 0307 	bic.w	r3, r3, #7
 8007f7c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	7c1b      	ldrb	r3, [r3, #16]
 8007f84:	461a      	mov	r2, r3
 8007f86:	8afb      	ldrh	r3, [r7, #22]
 8007f88:	fb13 f302 	smulbb	r3, r3, r2
 8007f8c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f92:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8007f94:	8afb      	ldrh	r3, [r7, #22]
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8007f9c:	897b      	ldrh	r3, [r7, #10]
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8007fa4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d117      	bne.n	8007fdc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	781a      	ldrb	r2, [r3, #0]
 8007fb0:	7ebb      	ldrb	r3, [r7, #26]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	7e7b      	ldrb	r3, [r7, #25]
 8007fc0:	4053      	eors	r3, r2
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	701a      	strb	r2, [r3, #0]
	ptr++;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	61fb      	str	r3, [r7, #28]
	len--;
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8007fd4:	88fb      	ldrh	r3, [r7, #6]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e8      	bne.n	8007fac <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8007fda:	e038      	b.n	800804e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	7ebb      	ldrb	r3, [r7, #26]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	7e7b      	ldrb	r3, [r7, #25]
 8007ff0:	4053      	eors	r3, r2
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8007ff8:	7efb      	ldrb	r3, [r7, #27]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8007ffe:	7efb      	ldrb	r3, [r7, #27]
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	76fb      	strb	r3, [r7, #27]
      len--;
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	3b01      	subs	r3, #1
 800800a:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800800c:	7efb      	ldrb	r3, [r7, #27]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d114      	bne.n	800803c <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8008016:	461a      	mov	r2, r3
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	4413      	add	r3, r2
 800801c:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8008024:	2b01      	cmp	r3, #1
 8008026:	d801      	bhi.n	800802c <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8008028:	2301      	movs	r3, #1
 800802a:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8008032:	2b01      	cmp	r3, #1
 8008034:	d008      	beq.n	8008048 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	767b      	strb	r3, [r7, #25]
 800803a:	e005      	b.n	8008048 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800803c:	7ebb      	ldrb	r3, [r7, #26]
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8008042:	7e7b      	ldrb	r3, [r7, #25]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1c6      	bne.n	8007fdc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800804e:	bf00      	nop
 8008050:	3724      	adds	r7, #36	@ 0x24
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008078:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008082:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	79fa      	ldrb	r2, [r7, #7]
 80080be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff ffa9 	bl	800805a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff fca7 	bl	8007a5c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008132:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	89fa      	ldrh	r2, [r7, #14]
 800813e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	7c1b      	ldrb	r3, [r3, #16]
 8008144:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8008146:	89fb      	ldrh	r3, [r7, #14]
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	89fa      	ldrh	r2, [r7, #14]
 8008150:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008158:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800815a:	89fb      	ldrh	r3, [r7, #14]
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	89fa      	ldrh	r2, [r7, #14]
 8008164:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800816c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800816e:	89fb      	ldrh	r3, [r7, #14]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8008176:	4413      	add	r3, r2
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	7c52      	ldrb	r2, [r2, #17]
 800817c:	4293      	cmp	r3, r2
 800817e:	dd07      	ble.n	8008190 <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	7c5b      	ldrb	r3, [r3, #17]
 8008184:	461a      	mov	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	4413      	add	r3, r2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	8a9a      	ldrh	r2, [r3, #20]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	8ada      	ldrh	r2, [r3, #22]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af02      	add	r7, sp, #8
 80081e4:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4603      	mov	r3, r0
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fe5e 	bl	8007ec4 <u8g2_IsIntersection>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d104      	bne.n	8008218 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8008216:	e03b      	b.n	8008290 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800822c:	429a      	cmp	r2, r3
 800822e:	d205      	bcs.n	800823c <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008248:	429a      	cmp	r2, r3
 800824a:	d905      	bls.n	8008258 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008264:	429a      	cmp	r2, r3
 8008266:	d205      	bcs.n	8008274 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008280:	429a      	cmp	r2, r3
 8008282:	d905      	bls.n	8008290 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff ff3c 	bl	800811e <u8g2_update_dimension_common>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff ff7b 	bl	80081de <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	4608      	mov	r0, r1
 80082fa:	4611      	mov	r1, r2
 80082fc:	461a      	mov	r2, r3
 80082fe:	4603      	mov	r3, r0
 8008300:	817b      	strh	r3, [r7, #10]
 8008302:	460b      	mov	r3, r1
 8008304:	813b      	strh	r3, [r7, #8]
 8008306:	4613      	mov	r3, r2
 8008308:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800830a:	88f8      	ldrh	r0, [r7, #6]
 800830c:	893a      	ldrh	r2, [r7, #8]
 800830e:	8979      	ldrh	r1, [r7, #10]
 8008310:	7e3b      	ldrb	r3, [r7, #24]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4603      	mov	r3, r0
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff fc90 	bl	8007c3c <u8g2_draw_hv_line_2dir>
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <u8x8_ascii_next+0x18>
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	2b0a      	cmp	r3, #10
 8008356:	d102      	bne.n	800835e <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8008358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800835c:	e001      	b.n	8008362 <u8x8_ascii_next+0x22>
  return b;
 800835e:	78fb      	ldrb	r3, [r7, #3]
 8008360:	b29b      	uxth	r3, r3
}
 8008362:	4618      	mov	r0, r3
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800836e:	b590      	push	{r4, r7, lr}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	460b      	mov	r3, r1
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	691c      	ldr	r4, [r3, #16]
 8008380:	7afa      	ldrb	r2, [r7, #11]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2117      	movs	r1, #23
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	47a0      	blx	r4
 800838a:	4603      	mov	r3, r0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	bd90      	pop	{r4, r7, pc}

08008394 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80083a0:	1cfb      	adds	r3, r7, #3
 80083a2:	461a      	mov	r2, r3
 80083a4:	2101      	movs	r1, #1
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff ffe1 	bl	800836e <u8x8_byte_SendBytes>
 80083ac:	4603      	mov	r3, r0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80083b6:	b590      	push	{r4, r7, lr}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691c      	ldr	r4, [r3, #16]
 80083c2:	2300      	movs	r3, #0
 80083c4:	2200      	movs	r2, #0
 80083c6:	2118      	movs	r1, #24
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	47a0      	blx	r4
 80083cc:	4603      	mov	r3, r0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd90      	pop	{r4, r7, pc}

080083d6 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80083d6:	b590      	push	{r4, r7, lr}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691c      	ldr	r4, [r3, #16]
 80083e2:	2300      	movs	r3, #0
 80083e4:	2200      	movs	r2, #0
 80083e6:	2119      	movs	r1, #25
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	47a0      	blx	r4
 80083ec:	4603      	mov	r3, r0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd90      	pop	{r4, r7, pc}

080083f6 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80083f6:	b590      	push	{r4, r7, lr}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68dc      	ldr	r4, [r3, #12]
 8008406:	78fa      	ldrb	r2, [r7, #3]
 8008408:	2300      	movs	r3, #0
 800840a:	2115      	movs	r1, #21
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	47a0      	blx	r4
 8008410:	4603      	mov	r3, r0
}
 8008412:	4618      	mov	r0, r3
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}

0800841a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800841a:	b590      	push	{r4, r7, lr}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68dc      	ldr	r4, [r3, #12]
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	2300      	movs	r3, #0
 800842e:	2116      	movs	r1, #22
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	47a0      	blx	r4
 8008434:	4603      	mov	r3, r0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	bd90      	pop	{r4, r7, pc}

0800843e <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800843e:	b590      	push	{r4, r7, lr}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	460b      	mov	r3, r1
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68dc      	ldr	r4, [r3, #12]
 8008450:	7afa      	ldrb	r2, [r7, #11]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2117      	movs	r1, #23
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	47a0      	blx	r4
 800845a:	4603      	mov	r3, r0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	bd90      	pop	{r4, r7, pc}

08008464 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68dc      	ldr	r4, [r3, #12]
 8008470:	2300      	movs	r3, #0
 8008472:	2200      	movs	r2, #0
 8008474:	2118      	movs	r1, #24
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	47a0      	blx	r4
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}

08008484 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8008484:	b590      	push	{r4, r7, lr}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68dc      	ldr	r4, [r3, #12]
 8008490:	2300      	movs	r3, #0
 8008492:	2200      	movs	r2, #0
 8008494:	2119      	movs	r1, #25
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	47a0      	blx	r4
 800849a:	4603      	mov	r3, r0
}
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}

080084a4 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	73fb      	strb	r3, [r7, #15]
    data++;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	3301      	adds	r3, #1
 80084b8:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80084be:	d031      	beq.n	8008524 <u8x8_cad_SendSequence+0x80>
 80084c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80084c2:	dc3d      	bgt.n	8008540 <u8x8_cad_SendSequence+0x9c>
 80084c4:	2b19      	cmp	r3, #25
 80084c6:	dc3b      	bgt.n	8008540 <u8x8_cad_SendSequence+0x9c>
 80084c8:	2b18      	cmp	r3, #24
 80084ca:	da23      	bge.n	8008514 <u8x8_cad_SendSequence+0x70>
 80084cc:	2b16      	cmp	r3, #22
 80084ce:	dc02      	bgt.n	80084d6 <u8x8_cad_SendSequence+0x32>
 80084d0:	2b15      	cmp	r3, #21
 80084d2:	da03      	bge.n	80084dc <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80084d4:	e034      	b.n	8008540 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80084d6:	2b17      	cmp	r3, #23
 80084d8:	d00e      	beq.n	80084f8 <u8x8_cad_SendSequence+0x54>
	return;
 80084da:	e031      	b.n	8008540 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68dc      	ldr	r4, [r3, #12]
 80084e6:	7bba      	ldrb	r2, [r7, #14]
 80084e8:	7bf9      	ldrb	r1, [r7, #15]
 80084ea:	2300      	movs	r3, #0
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	47a0      	blx	r4
	  data++;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	603b      	str	r3, [r7, #0]
	  break;
 80084f6:	e022      	b.n	800853e <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80084fe:	f107 030e 	add.w	r3, r7, #14
 8008502:	461a      	mov	r2, r3
 8008504:	2101      	movs	r1, #1
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ff99 	bl	800843e <u8x8_cad_SendData>
	  data++;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	603b      	str	r3, [r7, #0]
	  break;
 8008512:	e014      	b.n	800853e <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68dc      	ldr	r4, [r3, #12]
 8008518:	7bf9      	ldrb	r1, [r7, #15]
 800851a:	2300      	movs	r3, #0
 800851c:	2200      	movs	r2, #0
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	47a0      	blx	r4
	  break;
 8008522:	e00c      	b.n	800853e <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	461a      	mov	r2, r3
 800852e:	2129      	movs	r1, #41	@ 0x29
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fa36 	bl	80089a2 <u8x8_gpio_call>
	  data++;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	603b      	str	r3, [r7, #0]
	  break;
 800853c:	bf00      	nop
    cmd = *data;
 800853e:	e7b6      	b.n	80084ae <u8x8_cad_SendSequence+0xa>
	return;
 8008540:	bf00      	nop
    }
  }
}
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	bd90      	pop	{r4, r7, pc}

08008548 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	460b      	mov	r3, r1
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff ff2d 	bl	80083b6 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800855c:	2140      	movs	r1, #64	@ 0x40
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff ff18 	bl	8008394 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	691c      	ldr	r4, [r3, #16]
 8008568:	7afa      	ldrb	r2, [r7, #11]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2117      	movs	r1, #23
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff ff2f 	bl	80083d6 <u8x8_byte_EndTransfer>
}
 8008578:	bf00      	nop
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	bd90      	pop	{r4, r7, pc}

08008580 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008580:	b590      	push	{r4, r7, lr}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	607b      	str	r3, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	72fb      	strb	r3, [r7, #11]
 800858e:	4613      	mov	r3, r2
 8008590:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	3b14      	subs	r3, #20
 8008596:	2b05      	cmp	r3, #5
 8008598:	d86e      	bhi.n	8008678 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 800859a:	a201      	add	r2, pc, #4	@ (adr r2, 80085a0 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	08008637 	.word	0x08008637
 80085a4:	080085b9 	.word	0x080085b9
 80085a8:	080085e7 	.word	0x080085e7
 80085ac:	080085f3 	.word	0x080085f3
 80085b0:	0800865b 	.word	0x0800865b
 80085b4:	08008663 	.word	0x08008663
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80085b8:	4b33      	ldr	r3, [pc, #204]	@ (8008688 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff ff08 	bl	80083d6 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f7ff fef5 	bl	80083b6 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f7ff fee0 	bl	8008394 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80085d4:	7abb      	ldrb	r3, [r7, #10]
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fedb 	bl	8008394 <u8x8_byte_SendByte>
      in_transfer = 1;
 80085de:	4b2a      	ldr	r3, [pc, #168]	@ (8008688 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80085e4:	e04a      	b.n	800867c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80085e6:	7abb      	ldrb	r3, [r7, #10]
 80085e8:	4619      	mov	r1, r3
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fed2 	bl	8008394 <u8x8_byte_SendByte>
      break;      
 80085f0:	e044      	b.n	800867c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80085f2:	4b25      	ldr	r3, [pc, #148]	@ (8008688 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff feeb 	bl	80083d6 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8008604:	e00a      	b.n	800861c <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	2118      	movs	r1, #24
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff ff9c 	bl	8008548 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8008610:	7abb      	ldrb	r3, [r7, #10]
 8008612:	3b18      	subs	r3, #24
 8008614:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	3318      	adds	r3, #24
 800861a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800861c:	7abb      	ldrb	r3, [r7, #10]
 800861e:	2b18      	cmp	r3, #24
 8008620:	d8f1      	bhi.n	8008606 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8008622:	7abb      	ldrb	r3, [r7, #10]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4619      	mov	r1, r3
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f7ff ff8d 	bl	8008548 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800862e:	4b16      	ldr	r3, [pc, #88]	@ (8008688 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]
      break;
 8008634:	e022      	b.n	800867c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800863c:	2bff      	cmp	r3, #255	@ 0xff
 800863e:	d103      	bne.n	8008648 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2278      	movs	r2, #120	@ 0x78
 8008644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	691c      	ldr	r4, [r3, #16]
 800864c:	7aba      	ldrb	r2, [r7, #10]
 800864e:	7af9      	ldrb	r1, [r7, #11]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	47a0      	blx	r4
 8008656:	4603      	mov	r3, r0
 8008658:	e011      	b.n	800867e <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800865a:	4b0b      	ldr	r3, [pc, #44]	@ (8008688 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
      break;
 8008660:	e00c      	b.n	800867c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8008662:	4b09      	ldr	r3, [pc, #36]	@ (8008688 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff feb3 	bl	80083d6 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8008670:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
      break;
 8008676:	e001      	b.n	800867c <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8008678:	2300      	movs	r3, #0
 800867a:	e000      	b.n	800867e <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 800867c:	2301      	movs	r3, #1
}
 800867e:	4618      	mov	r0, r3
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	bd90      	pop	{r4, r7, pc}
 8008686:	bf00      	nop
 8008688:	20000e28 	.word	0x20000e28

0800868c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	72fb      	strb	r3, [r7, #11]
 800869a:	4613      	mov	r3, r2
 800869c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800869e:	7afb      	ldrb	r3, [r7, #11]
 80086a0:	3b0b      	subs	r3, #11
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	f200 808a 	bhi.w	80087bc <u8x8_d_ssd1306_sh1106_generic+0x130>
 80086a8:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086c5 	.word	0x080086c5
 80086b4:	080087bd 	.word	0x080087bd
 80086b8:	080086df 	.word	0x080086df
 80086bc:	08008711 	.word	0x08008711
 80086c0:	08008731 	.word	0x08008731
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80086c4:	7abb      	ldrb	r3, [r7, #10]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d104      	bne.n	80086d4 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80086ca:	4940      	ldr	r1, [pc, #256]	@ (80087cc <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fee9 	bl	80084a4 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80086d2:	e075      	b.n	80087c0 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80086d4:	493e      	ldr	r1, [pc, #248]	@ (80087d0 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff fee4 	bl	80084a4 <u8x8_cad_SendSequence>
      break;
 80086dc:	e070      	b.n	80087c0 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80086de:	7abb      	ldrb	r3, [r7, #10]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80086e4:	493b      	ldr	r1, [pc, #236]	@ (80087d4 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7ff fedc 	bl	80084a4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	7c9a      	ldrb	r2, [r3, #18]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80086f8:	e062      	b.n	80087c0 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80086fa:	4937      	ldr	r1, [pc, #220]	@ (80087d8 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff fed1 	bl	80084a4 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	7cda      	ldrb	r2, [r3, #19]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 800870e:	e057      	b.n	80087c0 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff fea7 	bl	8008464 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8008716:	2181      	movs	r1, #129	@ 0x81
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff fe6c 	bl	80083f6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800871e:	7abb      	ldrb	r3, [r7, #10]
 8008720:	4619      	mov	r1, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff fe79 	bl	800841a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff feab 	bl	8008484 <u8x8_cad_EndTransfer>
      break;
 800872e:	e047      	b.n	80087c0 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff fe97 	bl	8008464 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	795b      	ldrb	r3, [r3, #5]
 800873a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	4413      	add	r3, r2
 800874c:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800874e:	2140      	movs	r1, #64	@ 0x40
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff fe50 	bl	80083f6 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	091b      	lsrs	r3, r3, #4
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f043 0310 	orr.w	r3, r3, #16
 8008760:	b2db      	uxtb	r3, r3
 8008762:	4619      	mov	r1, r3
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fe46 	bl	80083f6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	b2db      	uxtb	r3, r3
 8008772:	4619      	mov	r1, r3
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff fe50 	bl	800841a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	799b      	ldrb	r3, [r3, #6]
 800877e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8008782:	b2db      	uxtb	r3, r3
 8008784:	4619      	mov	r1, r3
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7ff fe47 	bl	800841a <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	791b      	ldrb	r3, [r3, #4]
 8008790:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8008798:	7dbb      	ldrb	r3, [r7, #22]
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	b2db      	uxtb	r3, r3
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	4619      	mov	r1, r3
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff fe4b 	bl	800843e <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80087a8:	7abb      	ldrb	r3, [r7, #10]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80087ae:	7abb      	ldrb	r3, [r7, #10]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1eb      	bne.n	800878c <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7ff fe65 	bl	8008484 <u8x8_cad_EndTransfer>
      break;
 80087ba:	e001      	b.n	80087c0 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	e000      	b.n	80087c2 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80087c0:	2301      	movs	r3, #1
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	0800e5c4 	.word	0x0800e5c4
 80087d0:	0800e5cc 	.word	0x0800e5cc
 80087d4:	0800e5d4 	.word	0x0800e5d4
 80087d8:	0800e5dc 	.word	0x0800e5dc

080087dc <u8x8_d_sh1106_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	72fb      	strb	r3, [r7, #11]
 80087ea:	4613      	mov	r3, r2
 80087ec:	72bb      	strb	r3, [r7, #10]
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80087ee:	7aba      	ldrb	r2, [r7, #10]
 80087f0:	7af9      	ldrb	r1, [r7, #11]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f7ff ff49 	bl	800868c <u8x8_d_ssd1306_sh1106_generic>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <u8x8_d_sh1106_128x64_noname+0x28>
    return 1;
 8008800:	2301      	movs	r3, #1
 8008802:	e014      	b.n	800882e <u8x8_d_sh1106_128x64_noname+0x52>
  
  switch(msg)
 8008804:	7afb      	ldrb	r3, [r7, #11]
 8008806:	2b09      	cmp	r3, #9
 8008808:	d009      	beq.n	800881e <u8x8_d_sh1106_128x64_noname+0x42>
 800880a:	2b0a      	cmp	r3, #10
 800880c:	d10c      	bne.n	8008828 <u8x8_d_sh1106_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 f82a 	bl	8008868 <u8x8_d_helper_display_init>
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8008814:	4908      	ldr	r1, [pc, #32]	@ (8008838 <u8x8_d_sh1106_128x64_noname+0x5c>)
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff fe44 	bl	80084a4 <u8x8_cad_SendSequence>
      break;
 800881c:	e006      	b.n	800882c <u8x8_d_sh1106_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
 800881e:	4907      	ldr	r1, [pc, #28]	@ (800883c <u8x8_d_sh1106_128x64_noname+0x60>)
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f80d 	bl	8008840 <u8x8_d_helper_display_setup_memory>
      break;
 8008826:	e001      	b.n	800882c <u8x8_d_sh1106_128x64_noname+0x50>
    default:
      return 0;
 8008828:	2300      	movs	r3, #0
 800882a:	e000      	b.n	800882e <u8x8_d_sh1106_128x64_noname+0x52>
  }
  return 1;
 800882c:	2301      	movs	r3, #1
    
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	0800e58c 	.word	0x0800e58c
 800883c:	0800e5e4 	.word	0x0800e5e4

08008840 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	7c9a      	ldrb	r2, [r3, #18]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695c      	ldr	r4, [r3, #20]
 8008874:	2300      	movs	r3, #0
 8008876:	2200      	movs	r2, #0
 8008878:	2128      	movs	r1, #40	@ 0x28
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68dc      	ldr	r4, [r3, #12]
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	2114      	movs	r1, #20
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800888c:	2201      	movs	r2, #1
 800888e:	214b      	movs	r1, #75	@ 0x4b
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f886 	bl	80089a2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	791b      	ldrb	r3, [r3, #4]
 800889c:	461a      	mov	r2, r3
 800889e:	2129      	movs	r1, #41	@ 0x29
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f87e 	bl	80089a2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80088a6:	2200      	movs	r2, #0
 80088a8:	214b      	movs	r1, #75	@ 0x4b
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f879 	bl	80089a2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	791b      	ldrb	r3, [r3, #4]
 80088b6:	461a      	mov	r2, r3
 80088b8:	2129      	movs	r1, #41	@ 0x29
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f871 	bl	80089a2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80088c0:	2201      	movs	r2, #1
 80088c2:	214b      	movs	r1, #75	@ 0x4b
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f86c 	bl	80089a2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	795b      	ldrb	r3, [r3, #5]
 80088d0:	461a      	mov	r2, r3
 80088d2:	2129      	movs	r1, #41	@ 0x29
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f864 	bl	80089a2 <u8x8_gpio_call>
}    
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd90      	pop	{r4, r7, pc}

080088e2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80088e2:	b590      	push	{r4, r7, lr}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	4608      	mov	r0, r1
 80088ec:	4611      	mov	r1, r2
 80088ee:	461a      	mov	r2, r3
 80088f0:	4603      	mov	r3, r0
 80088f2:	70fb      	strb	r3, [r7, #3]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70bb      	strb	r3, [r7, #2]
 80088f8:	4613      	mov	r3, r2
 80088fa:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8008900:	78bb      	ldrb	r3, [r7, #2]
 8008902:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8008904:	787b      	ldrb	r3, [r7, #1]
 8008906:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689c      	ldr	r4, [r3, #8]
 8008910:	f107 0308 	add.w	r3, r7, #8
 8008914:	2201      	movs	r2, #1
 8008916:	210f      	movs	r1, #15
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	47a0      	blx	r4
 800891c:	4603      	mov	r3, r0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	bd90      	pop	{r4, r7, pc}

08008926 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8008926:	b590      	push	{r4, r7, lr}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689c      	ldr	r4, [r3, #8]
 8008932:	2300      	movs	r3, #0
 8008934:	2200      	movs	r2, #0
 8008936:	2109      	movs	r1, #9
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	47a0      	blx	r4
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8008944:	b590      	push	{r4, r7, lr}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689c      	ldr	r4, [r3, #8]
 8008950:	2300      	movs	r3, #0
 8008952:	2200      	movs	r2, #0
 8008954:	210a      	movs	r1, #10
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	bd90      	pop	{r4, r7, pc}

08008962 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8008962:	b590      	push	{r4, r7, lr}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689c      	ldr	r4, [r3, #8]
 8008972:	78fa      	ldrb	r2, [r7, #3]
 8008974:	2300      	movs	r3, #0
 8008976:	210b      	movs	r1, #11
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	47a0      	blx	r4
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	bd90      	pop	{r4, r7, pc}

08008984 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8008984:	b590      	push	{r4, r7, lr}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689c      	ldr	r4, [r3, #8]
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	2110      	movs	r1, #16
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	47a0      	blx	r4
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd90      	pop	{r4, r7, pc}

080089a2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80089a2:	b590      	push	{r4, r7, lr}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
 80089ae:	4613      	mov	r3, r2
 80089b0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695c      	ldr	r4, [r3, #20]
 80089b6:	78ba      	ldrb	r2, [r7, #2]
 80089b8:	78f9      	ldrb	r1, [r7, #3]
 80089ba:	2300      	movs	r3, #0
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	47a0      	blx	r4
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}

080089c8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	607b      	str	r3, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	72fb      	strb	r3, [r7, #11]
 80089d6:	4613      	mov	r3, r2
 80089d8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a11      	ldr	r2, [pc, #68]	@ (8008a40 <u8x8_SetupDefaults+0x58>)
 80089fa:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a10      	ldr	r2, [pc, #64]	@ (8008a40 <u8x8_SetupDefaults+0x58>)
 8008a00:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a0e      	ldr	r2, [pc, #56]	@ (8008a40 <u8x8_SetupDefaults+0x58>)
 8008a06:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8008a40 <u8x8_SetupDefaults+0x58>)
 8008a0c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	22ff      	movs	r2, #255	@ 0xff
 8008a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	22ff      	movs	r2, #255	@ 0xff
 8008a30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	080089c9 	.word	0x080089c9

08008a44 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7ff ffc8 	bl	80089e8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff ff58 	bl	8008926 <u8x8_SetupMemory>
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a7e:	b480      	push	{r7}
 8008a80:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008a82:	bf00      	nop
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a92:	f3ef 8305 	mrs	r3, IPSR
 8008a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10f      	bne.n	8008abe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa2:	607b      	str	r3, [r7, #4]
  return(result);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d105      	bne.n	8008ab6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8008aae:	603b      	str	r3, [r7, #0]
  return(result);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <osKernelInitialize+0x3a>
 8008ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8008af0 <osKernelInitialize+0x64>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d103      	bne.n	8008ac6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008abe:	f06f 0305 	mvn.w	r3, #5
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e00c      	b.n	8008ae0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8008af0 <osKernelInitialize+0x64>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d105      	bne.n	8008ada <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ace:	4b08      	ldr	r3, [pc, #32]	@ (8008af0 <osKernelInitialize+0x64>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	e002      	b.n	8008ae0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000e2c 	.word	0x20000e2c

08008af4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008afa:	f3ef 8305 	mrs	r3, IPSR
 8008afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10f      	bne.n	8008b26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b06:	f3ef 8310 	mrs	r3, PRIMASK
 8008b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d105      	bne.n	8008b1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b12:	f3ef 8311 	mrs	r3, BASEPRI
 8008b16:	603b      	str	r3, [r7, #0]
  return(result);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d007      	beq.n	8008b2e <osKernelStart+0x3a>
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b5c <osKernelStart+0x68>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d103      	bne.n	8008b2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008b26:	f06f 0305 	mvn.w	r3, #5
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	e010      	b.n	8008b50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b5c <osKernelStart+0x68>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d109      	bne.n	8008b4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008b36:	f7ff ffa2 	bl	8008a7e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008b3a:	4b08      	ldr	r3, [pc, #32]	@ (8008b5c <osKernelStart+0x68>)
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008b40:	f001 ff3c 	bl	800a9bc <vTaskStartScheduler>
      stat = osOK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	e002      	b.n	8008b50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008b50:	68fb      	ldr	r3, [r7, #12]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000e2c 	.word	0x20000e2c

08008b60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b66:	f3ef 8305 	mrs	r3, IPSR
 8008b6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10f      	bne.n	8008b92 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b72:	f3ef 8310 	mrs	r3, PRIMASK
 8008b76:	607b      	str	r3, [r7, #4]
  return(result);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8008b82:	603b      	str	r3, [r7, #0]
  return(result);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d007      	beq.n	8008b9a <osKernelGetTickCount+0x3a>
 8008b8a:	4b08      	ldr	r3, [pc, #32]	@ (8008bac <osKernelGetTickCount+0x4c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d103      	bne.n	8008b9a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008b92:	f002 f845 	bl	800ac20 <xTaskGetTickCountFromISR>
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	e002      	b.n	8008ba0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008b9a:	f002 f831 	bl	800ac00 <xTaskGetTickCount>
 8008b9e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000e2c 	.word	0x20000e2c

08008bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b090      	sub	sp, #64	@ 0x40
 8008bb4:	af04      	add	r7, sp, #16
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc0:	f3ef 8305 	mrs	r3, IPSR
 8008bc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8008bc6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f040 8090 	bne.w	8008cee <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bce:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d105      	bne.n	8008be6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bda:	f3ef 8311 	mrs	r3, BASEPRI
 8008bde:	617b      	str	r3, [r7, #20]
  return(result);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <osThreadNew+0x3e>
 8008be6:	4b44      	ldr	r3, [pc, #272]	@ (8008cf8 <osThreadNew+0x148>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d07f      	beq.n	8008cee <osThreadNew+0x13e>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d07c      	beq.n	8008cee <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8008bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008bfa:	2318      	movs	r3, #24
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8008c02:	f04f 33ff 	mov.w	r3, #4294967295
 8008c06:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d045      	beq.n	8008c9a <osThreadNew+0xea>
      if (attr->name != NULL) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <osThreadNew+0x6c>
        name = attr->name;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <osThreadNew+0x92>
 8008c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c32:	2b38      	cmp	r3, #56	@ 0x38
 8008c34:	d805      	bhi.n	8008c42 <osThreadNew+0x92>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <osThreadNew+0x96>
        return (NULL);
 8008c42:	2300      	movs	r3, #0
 8008c44:	e054      	b.n	8008cf0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	089b      	lsrs	r3, r3, #2
 8008c54:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00e      	beq.n	8008c7c <osThreadNew+0xcc>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	2ba7      	cmp	r3, #167	@ 0xa7
 8008c64:	d90a      	bls.n	8008c7c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d006      	beq.n	8008c7c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <osThreadNew+0xcc>
        mem = 1;
 8008c76:	2301      	movs	r3, #1
 8008c78:	623b      	str	r3, [r7, #32]
 8008c7a:	e010      	b.n	8008c9e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10c      	bne.n	8008c9e <osThreadNew+0xee>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d108      	bne.n	8008c9e <osThreadNew+0xee>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <osThreadNew+0xee>
          mem = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	623b      	str	r3, [r7, #32]
 8008c98:	e001      	b.n	8008c9e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d110      	bne.n	8008cc6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008cac:	9202      	str	r2, [sp, #8]
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f001 fbfa 	bl	800a4b4 <xTaskCreateStatic>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	e013      	b.n	8008cee <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d110      	bne.n	8008cee <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f107 0310 	add.w	r3, r7, #16
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f001 fc4e 	bl	800a580 <xTaskCreate>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d001      	beq.n	8008cee <osThreadNew+0x13e>
          hTask = NULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008cee:	693b      	ldr	r3, [r7, #16]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3730      	adds	r7, #48	@ 0x30
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20000e2c 	.word	0x20000e2c

08008cfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d04:	f3ef 8305 	mrs	r3, IPSR
 8008d08:	613b      	str	r3, [r7, #16]
  return(result);
 8008d0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10f      	bne.n	8008d30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d10:	f3ef 8310 	mrs	r3, PRIMASK
 8008d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d105      	bne.n	8008d28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d1c:	f3ef 8311 	mrs	r3, BASEPRI
 8008d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d007      	beq.n	8008d38 <osDelay+0x3c>
 8008d28:	4b0a      	ldr	r3, [pc, #40]	@ (8008d54 <osDelay+0x58>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d103      	bne.n	8008d38 <osDelay+0x3c>
    stat = osErrorISR;
 8008d30:	f06f 0305 	mvn.w	r3, #5
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e007      	b.n	8008d48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fe02 	bl	800a94c <vTaskDelay>
    }
  }

  return (stat);
 8008d48:	697b      	ldr	r3, [r7, #20]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000e2c 	.word	0x20000e2c

08008d58 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d60:	f3ef 8305 	mrs	r3, IPSR
 8008d64:	617b      	str	r3, [r7, #20]
  return(result);
 8008d66:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10f      	bne.n	8008d8c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d70:	613b      	str	r3, [r7, #16]
  return(result);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d105      	bne.n	8008d84 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d78:	f3ef 8311 	mrs	r3, BASEPRI
 8008d7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <osDelayUntil+0x3c>
 8008d84:	4b13      	ldr	r3, [pc, #76]	@ (8008dd4 <osDelayUntil+0x7c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d103      	bne.n	8008d94 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8008d8c:	f06f 0305 	mvn.w	r3, #5
 8008d90:	61fb      	str	r3, [r7, #28]
 8008d92:	e019      	b.n	8008dc8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8008d98:	f001 ff32 	bl	800ac00 <xTaskGetTickCount>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <osDelayUntil+0x6a>
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	db06      	blt.n	8008dc2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8008db4:	f107 0308 	add.w	r3, r7, #8
 8008db8:	69b9      	ldr	r1, [r7, #24]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 fd40 	bl	800a840 <vTaskDelayUntil>
 8008dc0:	e002      	b.n	8008dc8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008dc2:	f06f 0303 	mvn.w	r3, #3
 8008dc6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008dc8:	69fb      	ldr	r3, [r7, #28]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000e2c 	.word	0x20000e2c

08008dd8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	@ 0x28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008de4:	f3ef 8305 	mrs	r3, IPSR
 8008de8:	613b      	str	r3, [r7, #16]
  return(result);
 8008dea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f040 8085 	bne.w	8008efc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df2:	f3ef 8310 	mrs	r3, PRIMASK
 8008df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d105      	bne.n	8008e0a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8008e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <osMutexNew+0x3a>
 8008e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8008f08 <osMutexNew+0x130>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d074      	beq.n	8008efc <osMutexNew+0x124>
    if (attr != NULL) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	623b      	str	r3, [r7, #32]
 8008e1e:	e001      	b.n	8008e24 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <osMutexNew+0x5c>
      rmtx = 1U;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	e001      	b.n	8008e38 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d15c      	bne.n	8008efc <osMutexNew+0x124>
      mem = -1;
 8008e42:	f04f 33ff 	mov.w	r3, #4294967295
 8008e46:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d015      	beq.n	8008e7a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d006      	beq.n	8008e64 <osMutexNew+0x8c>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8008e5c:	d902      	bls.n	8008e64 <osMutexNew+0x8c>
          mem = 1;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	e00c      	b.n	8008e7e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d108      	bne.n	8008e7e <osMutexNew+0xa6>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <osMutexNew+0xa6>
            mem = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	e001      	b.n	8008e7e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d112      	bne.n	8008eaa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d007      	beq.n	8008e9a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	2004      	movs	r0, #4
 8008e92:	f000 fcc8 	bl	8009826 <xQueueCreateMutexStatic>
 8008e96:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e98:	e016      	b.n	8008ec8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	f000 fcc0 	bl	8009826 <xQueueCreateMutexStatic>
 8008ea6:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ea8:	e00e      	b.n	8008ec8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10b      	bne.n	8008ec8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008eb6:	2004      	movs	r0, #4
 8008eb8:	f000 fc9d 	bl	80097f6 <xQueueCreateMutex>
 8008ebc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ebe:	e003      	b.n	8008ec8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	f000 fc98 	bl	80097f6 <xQueueCreateMutex>
 8008ec6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00c      	beq.n	8008ee8 <osMutexNew+0x110>
        if (attr != NULL) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <osMutexNew+0x104>
          name = attr->name;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e001      	b.n	8008ee0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008ee0:	6979      	ldr	r1, [r7, #20]
 8008ee2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ee4:	f001 fa88 	bl	800a3f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <osMutexNew+0x124>
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	f043 0301 	orr.w	r3, r3, #1
 8008efa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3728      	adds	r7, #40	@ 0x28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20000e2c 	.word	0x20000e2c

08008f0c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f2a:	f3ef 8305 	mrs	r3, IPSR
 8008f2e:	613b      	str	r3, [r7, #16]
  return(result);
 8008f30:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10f      	bne.n	8008f56 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f36:	f3ef 8310 	mrs	r3, PRIMASK
 8008f3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d105      	bne.n	8008f4e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f42:	f3ef 8311 	mrs	r3, BASEPRI
 8008f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <osMutexAcquire+0x52>
 8008f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc4 <osMutexAcquire+0xb8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d103      	bne.n	8008f5e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008f56:	f06f 0305 	mvn.w	r3, #5
 8008f5a:	61fb      	str	r3, [r7, #28]
 8008f5c:	e02c      	b.n	8008fb8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d103      	bne.n	8008f6c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008f64:	f06f 0303 	mvn.w	r3, #3
 8008f68:	61fb      	str	r3, [r7, #28]
 8008f6a:	e025      	b.n	8008fb8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d011      	beq.n	8008f96 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	69b8      	ldr	r0, [r7, #24]
 8008f76:	f000 fca8 	bl	80098ca <xQueueTakeMutexRecursive>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d01b      	beq.n	8008fb8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008f86:	f06f 0301 	mvn.w	r3, #1
 8008f8a:	61fb      	str	r3, [r7, #28]
 8008f8c:	e014      	b.n	8008fb8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008f8e:	f06f 0302 	mvn.w	r3, #2
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	e010      	b.n	8008fb8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	69b8      	ldr	r0, [r7, #24]
 8008f9a:	f000 ff65 	bl	8009e68 <xQueueSemaphoreTake>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d009      	beq.n	8008fb8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008faa:	f06f 0301 	mvn.w	r3, #1
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	e002      	b.n	8008fb8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008fb2:	f06f 0302 	mvn.w	r3, #2
 8008fb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3720      	adds	r7, #32
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000e2c 	.word	0x20000e2c

08008fc8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f023 0301 	bic.w	r3, r3, #1
 8008fd6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fe4:	f3ef 8305 	mrs	r3, IPSR
 8008fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8008fea:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10f      	bne.n	8009010 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8009000:	60bb      	str	r3, [r7, #8]
  return(result);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <osMutexRelease+0x50>
 8009008:	4b16      	ldr	r3, [pc, #88]	@ (8009064 <osMutexRelease+0x9c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d103      	bne.n	8009018 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009010:	f06f 0305 	mvn.w	r3, #5
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e01f      	b.n	8009058 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800901e:	f06f 0303 	mvn.w	r3, #3
 8009022:	61fb      	str	r3, [r7, #28]
 8009024:	e018      	b.n	8009058 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800902c:	69b8      	ldr	r0, [r7, #24]
 800902e:	f000 fc15 	bl	800985c <xQueueGiveMutexRecursive>
 8009032:	4603      	mov	r3, r0
 8009034:	2b01      	cmp	r3, #1
 8009036:	d00f      	beq.n	8009058 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009038:	f06f 0302 	mvn.w	r3, #2
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	e00b      	b.n	8009058 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009040:	2300      	movs	r3, #0
 8009042:	2200      	movs	r2, #0
 8009044:	2100      	movs	r1, #0
 8009046:	69b8      	ldr	r0, [r7, #24]
 8009048:	f000 fc78 	bl	800993c <xQueueGenericSend>
 800904c:	4603      	mov	r3, r0
 800904e:	2b01      	cmp	r3, #1
 8009050:	d002      	beq.n	8009058 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009052:	f06f 0302 	mvn.w	r3, #2
 8009056:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009058:	69fb      	ldr	r3, [r7, #28]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000e2c 	.word	0x20000e2c

08009068 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009068:	b580      	push	{r7, lr}
 800906a:	b08c      	sub	sp, #48	@ 0x30
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009074:	2300      	movs	r3, #0
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009078:	f3ef 8305 	mrs	r3, IPSR
 800907c:	61bb      	str	r3, [r7, #24]
  return(result);
 800907e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009080:	2b00      	cmp	r3, #0
 8009082:	d16f      	bne.n	8009164 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009084:	f3ef 8310 	mrs	r3, PRIMASK
 8009088:	617b      	str	r3, [r7, #20]
  return(result);
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d105      	bne.n	800909c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009090:	f3ef 8311 	mrs	r3, BASEPRI
 8009094:	613b      	str	r3, [r7, #16]
  return(result);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <osMessageQueueNew+0x3c>
 800909c:	4b34      	ldr	r3, [pc, #208]	@ (8009170 <osMessageQueueNew+0x108>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d05f      	beq.n	8009164 <osMessageQueueNew+0xfc>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d05c      	beq.n	8009164 <osMessageQueueNew+0xfc>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d059      	beq.n	8009164 <osMessageQueueNew+0xfc>
    mem = -1;
 80090b0:	f04f 33ff 	mov.w	r3, #4294967295
 80090b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d029      	beq.n	8009110 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d012      	beq.n	80090ea <osMessageQueueNew+0x82>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80090ca:	d90e      	bls.n	80090ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00a      	beq.n	80090ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	695a      	ldr	r2, [r3, #20]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d302      	bcc.n	80090ea <osMessageQueueNew+0x82>
        mem = 1;
 80090e4:	2301      	movs	r3, #1
 80090e6:	623b      	str	r3, [r7, #32]
 80090e8:	e014      	b.n	8009114 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d110      	bne.n	8009114 <osMessageQueueNew+0xac>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10c      	bne.n	8009114 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d108      	bne.n	8009114 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d104      	bne.n	8009114 <osMessageQueueNew+0xac>
          mem = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	623b      	str	r3, [r7, #32]
 800910e:	e001      	b.n	8009114 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d10b      	bne.n	8009132 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691a      	ldr	r2, [r3, #16]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2100      	movs	r1, #0
 8009124:	9100      	str	r1, [sp, #0]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 fa5d 	bl	80095e8 <xQueueGenericCreateStatic>
 800912e:	6278      	str	r0, [r7, #36]	@ 0x24
 8009130:	e008      	b.n	8009144 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d105      	bne.n	8009144 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009138:	2200      	movs	r2, #0
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 fada 	bl	80096f6 <xQueueGenericCreate>
 8009142:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00c      	beq.n	8009164 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	61fb      	str	r3, [r7, #28]
 8009156:	e001      	b.n	800915c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800915c:	69f9      	ldr	r1, [r7, #28]
 800915e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009160:	f001 f94a 	bl	800a3f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009166:	4618      	mov	r0, r3
 8009168:	3728      	adds	r7, #40	@ 0x28
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000e2c 	.word	0x20000e2c

08009174 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009174:	b580      	push	{r7, lr}
 8009176:	b08a      	sub	sp, #40	@ 0x28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	4613      	mov	r3, r2
 8009182:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009188:	2300      	movs	r3, #0
 800918a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918c:	f3ef 8305 	mrs	r3, IPSR
 8009190:	61fb      	str	r3, [r7, #28]
  return(result);
 8009192:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10f      	bne.n	80091b8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009198:	f3ef 8310 	mrs	r3, PRIMASK
 800919c:	61bb      	str	r3, [r7, #24]
  return(result);
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091a4:	f3ef 8311 	mrs	r3, BASEPRI
 80091a8:	617b      	str	r3, [r7, #20]
  return(result);
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d02c      	beq.n	800920a <osMessageQueuePut+0x96>
 80091b0:	4b28      	ldr	r3, [pc, #160]	@ (8009254 <osMessageQueuePut+0xe0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d128      	bne.n	800920a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <osMessageQueuePut+0x56>
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <osMessageQueuePut+0x56>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80091ca:	f06f 0303 	mvn.w	r3, #3
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091d0:	e039      	b.n	8009246 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80091d6:	f107 0210 	add.w	r2, r7, #16
 80091da:	2300      	movs	r3, #0
 80091dc:	68b9      	ldr	r1, [r7, #8]
 80091de:	6a38      	ldr	r0, [r7, #32]
 80091e0:	f000 fcb6 	bl	8009b50 <xQueueGenericSendFromISR>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d003      	beq.n	80091f2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80091ea:	f06f 0302 	mvn.w	r3, #2
 80091ee:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091f0:	e029      	b.n	8009246 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d026      	beq.n	8009246 <osMessageQueuePut+0xd2>
 80091f8:	4b17      	ldr	r3, [pc, #92]	@ (8009258 <osMessageQueuePut+0xe4>)
 80091fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009208:	e01d      	b.n	8009246 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <osMessageQueuePut+0xa2>
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d103      	bne.n	800921e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009216:	f06f 0303 	mvn.w	r3, #3
 800921a:	627b      	str	r3, [r7, #36]	@ 0x24
 800921c:	e014      	b.n	8009248 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800921e:	2300      	movs	r3, #0
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	6a38      	ldr	r0, [r7, #32]
 8009226:	f000 fb89 	bl	800993c <xQueueGenericSend>
 800922a:	4603      	mov	r3, r0
 800922c:	2b01      	cmp	r3, #1
 800922e:	d00b      	beq.n	8009248 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009236:	f06f 0301 	mvn.w	r3, #1
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
 800923c:	e004      	b.n	8009248 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800923e:	f06f 0302 	mvn.w	r3, #2
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
 8009244:	e000      	b.n	8009248 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009246:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800924a:	4618      	mov	r0, r3
 800924c:	3728      	adds	r7, #40	@ 0x28
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20000e2c 	.word	0x20000e2c
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800925c:	b580      	push	{r7, lr}
 800925e:	b08a      	sub	sp, #40	@ 0x28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800926e:	2300      	movs	r3, #0
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009272:	f3ef 8305 	mrs	r3, IPSR
 8009276:	61fb      	str	r3, [r7, #28]
  return(result);
 8009278:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10f      	bne.n	800929e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800927e:	f3ef 8310 	mrs	r3, PRIMASK
 8009282:	61bb      	str	r3, [r7, #24]
  return(result);
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d105      	bne.n	8009296 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800928a:	f3ef 8311 	mrs	r3, BASEPRI
 800928e:	617b      	str	r3, [r7, #20]
  return(result);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d02c      	beq.n	80092f0 <osMessageQueueGet+0x94>
 8009296:	4b28      	ldr	r3, [pc, #160]	@ (8009338 <osMessageQueueGet+0xdc>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d128      	bne.n	80092f0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <osMessageQueueGet+0x54>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <osMessageQueueGet+0x54>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80092b0:	f06f 0303 	mvn.w	r3, #3
 80092b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092b6:	e038      	b.n	800932a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80092bc:	f107 0310 	add.w	r3, r7, #16
 80092c0:	461a      	mov	r2, r3
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	6a38      	ldr	r0, [r7, #32]
 80092c6:	f000 fee7 	bl	800a098 <xQueueReceiveFromISR>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d003      	beq.n	80092d8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80092d0:	f06f 0302 	mvn.w	r3, #2
 80092d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092d6:	e028      	b.n	800932a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d025      	beq.n	800932a <osMessageQueueGet+0xce>
 80092de:	4b17      	ldr	r3, [pc, #92]	@ (800933c <osMessageQueueGet+0xe0>)
 80092e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092ee:	e01c      	b.n	800932a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <osMessageQueueGet+0xa0>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d103      	bne.n	8009304 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80092fc:	f06f 0303 	mvn.w	r3, #3
 8009300:	627b      	str	r3, [r7, #36]	@ 0x24
 8009302:	e013      	b.n	800932c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	6a38      	ldr	r0, [r7, #32]
 800930a:	f000 fcc5 	bl	8009c98 <xQueueReceive>
 800930e:	4603      	mov	r3, r0
 8009310:	2b01      	cmp	r3, #1
 8009312:	d00b      	beq.n	800932c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800931a:	f06f 0301 	mvn.w	r3, #1
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009320:	e004      	b.n	800932c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009322:	f06f 0302 	mvn.w	r3, #2
 8009326:	627b      	str	r3, [r7, #36]	@ 0x24
 8009328:	e000      	b.n	800932c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800932a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800932e:	4618      	mov	r0, r3
 8009330:	3728      	adds	r7, #40	@ 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000e2c 	.word	0x20000e2c
 800933c:	e000ed04 	.word	0xe000ed04

08009340 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4a07      	ldr	r2, [pc, #28]	@ (800936c <vApplicationGetIdleTaskMemory+0x2c>)
 8009350:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	4a06      	ldr	r2, [pc, #24]	@ (8009370 <vApplicationGetIdleTaskMemory+0x30>)
 8009356:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800935e:	601a      	str	r2, [r3, #0]
}
 8009360:	bf00      	nop
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	20000e30 	.word	0x20000e30
 8009370:	20000ed8 	.word	0x20000ed8

08009374 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4a07      	ldr	r2, [pc, #28]	@ (80093a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009384:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4a06      	ldr	r2, [pc, #24]	@ (80093a4 <vApplicationGetTimerTaskMemory+0x30>)
 800938a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009392:	601a      	str	r2, [r3, #0]
}
 8009394:	bf00      	nop
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	200012d8 	.word	0x200012d8
 80093a4:	20001380 	.word	0x20001380

080093a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f103 0208 	add.w	r2, r3, #8
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f04f 32ff 	mov.w	r2, #4294967295
 80093c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f103 0208 	add.w	r2, r3, #8
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f103 0208 	add.w	r2, r3, #8
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009402:	b480      	push	{r7}
 8009404:	b085      	sub	sp, #20
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	601a      	str	r2, [r3, #0]
}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d103      	bne.n	800946a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e00c      	b.n	8009484 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3308      	adds	r3, #8
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	e002      	b.n	8009478 <vListInsert+0x2e>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	429a      	cmp	r2, r3
 8009482:	d2f6      	bcs.n	8009472 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
}
 80094b0:	bf00      	nop
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6892      	ldr	r2, [r2, #8]
 80094d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6852      	ldr	r2, [r2, #4]
 80094dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d103      	bne.n	80094f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	1e5a      	subs	r2, r3, #1
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10d      	bne.n	8009540 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009528:	b672      	cpsid	i
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	b662      	cpsie	i
 8009538:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	e7fd      	b.n	800953c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009540:	f002 fd3c 	bl	800bfbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954c:	68f9      	ldr	r1, [r7, #12]
 800954e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009550:	fb01 f303 	mul.w	r3, r1, r3
 8009554:	441a      	add	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009570:	3b01      	subs	r3, #1
 8009572:	68f9      	ldr	r1, [r7, #12]
 8009574:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009576:	fb01 f303 	mul.w	r3, r1, r3
 800957a:	441a      	add	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	22ff      	movs	r2, #255	@ 0xff
 8009584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	22ff      	movs	r2, #255	@ 0xff
 800958c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d114      	bne.n	80095c0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d01a      	beq.n	80095d4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3310      	adds	r3, #16
 80095a2:	4618      	mov	r0, r3
 80095a4:	f001 fcc8 	bl	800af38 <xTaskRemoveFromEventList>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d012      	beq.n	80095d4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <xQueueGenericReset+0xd4>)
 80095b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	e009      	b.n	80095d4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3310      	adds	r3, #16
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff feef 	bl	80093a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3324      	adds	r3, #36	@ 0x24
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff feea 	bl	80093a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095d4:	f002 fd28 	bl	800c028 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095d8:	2301      	movs	r3, #1
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	e000ed04 	.word	0xe000ed04

080095e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08e      	sub	sp, #56	@ 0x38
 80095ec:	af02      	add	r7, sp, #8
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10d      	bne.n	8009618 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	b672      	cpsid	i
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	b662      	cpsie	i
 8009610:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10d      	bne.n	800963a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009622:	b672      	cpsid	i
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	b662      	cpsie	i
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop
 8009638:	e7fd      	b.n	8009636 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <xQueueGenericCreateStatic+0x5e>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <xQueueGenericCreateStatic+0x62>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <xQueueGenericCreateStatic+0x64>
 800964a:	2300      	movs	r3, #0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10d      	bne.n	800966c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009654:	b672      	cpsid	i
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	b662      	cpsie	i
 8009664:	623b      	str	r3, [r7, #32]
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d102      	bne.n	8009678 <xQueueGenericCreateStatic+0x90>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <xQueueGenericCreateStatic+0x94>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <xQueueGenericCreateStatic+0x96>
 800967c:	2300      	movs	r3, #0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10d      	bne.n	800969e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	b672      	cpsid	i
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	b662      	cpsie	i
 8009696:	61fb      	str	r3, [r7, #28]
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	e7fd      	b.n	800969a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800969e:	2350      	movs	r3, #80	@ 0x50
 80096a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b50      	cmp	r3, #80	@ 0x50
 80096a6:	d00d      	beq.n	80096c4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	b672      	cpsid	i
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	b662      	cpsie	i
 80096bc:	61bb      	str	r3, [r7, #24]
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00d      	beq.n	80096ec <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4613      	mov	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f000 f848 	bl	800977c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3730      	adds	r7, #48	@ 0x30
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b08a      	sub	sp, #40	@ 0x28
 80096fa:	af02      	add	r7, sp, #8
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	4613      	mov	r3, r2
 8009702:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10d      	bne.n	8009726 <xQueueGenericCreate+0x30>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	b672      	cpsid	i
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	b662      	cpsie	i
 800971e:	613b      	str	r3, [r7, #16]
}
 8009720:	bf00      	nop
 8009722:	bf00      	nop
 8009724:	e7fd      	b.n	8009722 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800972c:	2300      	movs	r3, #0
 800972e:	61fb      	str	r3, [r7, #28]
 8009730:	e004      	b.n	800973c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	fb02 f303 	mul.w	r3, r2, r3
 800973a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	3350      	adds	r3, #80	@ 0x50
 8009740:	4618      	mov	r0, r3
 8009742:	f002 fd69 	bl	800c218 <pvPortMalloc>
 8009746:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d011      	beq.n	8009772 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	3350      	adds	r3, #80	@ 0x50
 8009756:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009760:	79fa      	ldrb	r2, [r7, #7]
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	4613      	mov	r3, r2
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 f805 	bl	800977c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009772:	69bb      	ldr	r3, [r7, #24]
	}
 8009774:	4618      	mov	r0, r3
 8009776:	3720      	adds	r7, #32
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d103      	bne.n	8009798 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e002      	b.n	800979e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097aa:	2101      	movs	r1, #1
 80097ac:	69b8      	ldr	r0, [r7, #24]
 80097ae:	f7ff feaf 	bl	8009510 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00e      	beq.n	80097ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80097e2:	2300      	movs	r3, #0
 80097e4:	2200      	movs	r2, #0
 80097e6:	2100      	movs	r1, #0
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8a7 	bl	800993c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b086      	sub	sp, #24
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	4603      	mov	r3, r0
 80097fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009800:	2301      	movs	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	2300      	movs	r3, #0
 8009806:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	461a      	mov	r2, r3
 800980c:	6939      	ldr	r1, [r7, #16]
 800980e:	6978      	ldr	r0, [r7, #20]
 8009810:	f7ff ff71 	bl	80096f6 <xQueueGenericCreate>
 8009814:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff ffd3 	bl	80097c2 <prvInitialiseMutex>

		return xNewQueue;
 800981c:	68fb      	ldr	r3, [r7, #12]
	}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009826:	b580      	push	{r7, lr}
 8009828:	b088      	sub	sp, #32
 800982a:	af02      	add	r7, sp, #8
 800982c:	4603      	mov	r3, r0
 800982e:	6039      	str	r1, [r7, #0]
 8009830:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009832:	2301      	movs	r3, #1
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	2300      	movs	r3, #0
 8009838:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2200      	movs	r2, #0
 8009842:	6939      	ldr	r1, [r7, #16]
 8009844:	6978      	ldr	r0, [r7, #20]
 8009846:	f7ff fecf 	bl	80095e8 <xQueueGenericCreateStatic>
 800984a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff ffb8 	bl	80097c2 <prvInitialiseMutex>

		return xNewQueue;
 8009852:	68fb      	ldr	r3, [r7, #12]
	}
 8009854:	4618      	mov	r0, r3
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10d      	bne.n	800988a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	b672      	cpsid	i
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	b662      	cpsie	i
 8009882:	60fb      	str	r3, [r7, #12]
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	e7fd      	b.n	8009886 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	689c      	ldr	r4, [r3, #8]
 800988e:	f001 fd21 	bl	800b2d4 <xTaskGetCurrentTaskHandle>
 8009892:	4603      	mov	r3, r0
 8009894:	429c      	cmp	r4, r3
 8009896:	d111      	bne.n	80098bc <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	1e5a      	subs	r2, r3, #1
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d105      	bne.n	80098b6 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80098aa:	2300      	movs	r3, #0
 80098ac:	2200      	movs	r2, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	6938      	ldr	r0, [r7, #16]
 80098b2:	f000 f843 	bl	800993c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e001      	b.n	80098c0 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80098c0:	697b      	ldr	r3, [r7, #20]
	}
 80098c2:	4618      	mov	r0, r3
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd90      	pop	{r4, r7, pc}

080098ca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80098ca:	b590      	push	{r4, r7, lr}
 80098cc:	b087      	sub	sp, #28
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10d      	bne.n	80098fa <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e2:	b672      	cpsid	i
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	b662      	cpsie	i
 80098f2:	60fb      	str	r3, [r7, #12]
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	e7fd      	b.n	80098f6 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	689c      	ldr	r4, [r3, #8]
 80098fe:	f001 fce9 	bl	800b2d4 <xTaskGetCurrentTaskHandle>
 8009902:	4603      	mov	r3, r0
 8009904:	429c      	cmp	r4, r3
 8009906:	d107      	bne.n	8009918 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009912:	2301      	movs	r3, #1
 8009914:	617b      	str	r3, [r7, #20]
 8009916:	e00c      	b.n	8009932 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	6938      	ldr	r0, [r7, #16]
 800991c:	f000 faa4 	bl	8009e68 <xQueueSemaphoreTake>
 8009920:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d004      	beq.n	8009932 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009932:	697b      	ldr	r3, [r7, #20]
	}
 8009934:	4618      	mov	r0, r3
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	bd90      	pop	{r4, r7, pc}

0800993c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08e      	sub	sp, #56	@ 0x38
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800994a:	2300      	movs	r3, #0
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10d      	bne.n	8009974 <xQueueGenericSend+0x38>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995c:	b672      	cpsid	i
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	b662      	cpsie	i
 800996c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800996e:	bf00      	nop
 8009970:	bf00      	nop
 8009972:	e7fd      	b.n	8009970 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d103      	bne.n	8009982 <xQueueGenericSend+0x46>
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <xQueueGenericSend+0x4a>
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <xQueueGenericSend+0x4c>
 8009986:	2300      	movs	r3, #0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10d      	bne.n	80099a8 <xQueueGenericSend+0x6c>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009990:	b672      	cpsid	i
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	b662      	cpsie	i
 80099a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d103      	bne.n	80099b6 <xQueueGenericSend+0x7a>
 80099ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <xQueueGenericSend+0x7e>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <xQueueGenericSend+0x80>
 80099ba:	2300      	movs	r3, #0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10d      	bne.n	80099dc <xQueueGenericSend+0xa0>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	b672      	cpsid	i
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	b662      	cpsie	i
 80099d4:	623b      	str	r3, [r7, #32]
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	e7fd      	b.n	80099d8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099dc:	f001 fc8a 	bl	800b2f4 <xTaskGetSchedulerState>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <xQueueGenericSend+0xb0>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <xQueueGenericSend+0xb4>
 80099ec:	2301      	movs	r3, #1
 80099ee:	e000      	b.n	80099f2 <xQueueGenericSend+0xb6>
 80099f0:	2300      	movs	r3, #0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10d      	bne.n	8009a12 <xQueueGenericSend+0xd6>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	b672      	cpsid	i
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	b662      	cpsie	i
 8009a0a:	61fb      	str	r3, [r7, #28]
}
 8009a0c:	bf00      	nop
 8009a0e:	bf00      	nop
 8009a10:	e7fd      	b.n	8009a0e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a12:	f002 fad3 	bl	800bfbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d302      	bcc.n	8009a28 <xQueueGenericSend+0xec>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d129      	bne.n	8009a7c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a2e:	f000 fbd3 	bl	800a1d8 <prvCopyDataToQueue>
 8009a32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d010      	beq.n	8009a5e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3e:	3324      	adds	r3, #36	@ 0x24
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 fa79 	bl	800af38 <xTaskRemoveFromEventList>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d013      	beq.n	8009a74 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8009b4c <xQueueGenericSend+0x210>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	e00a      	b.n	8009a74 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a64:	4b39      	ldr	r3, [pc, #228]	@ (8009b4c <xQueueGenericSend+0x210>)
 8009a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a74:	f002 fad8 	bl	800c028 <vPortExitCritical>
				return pdPASS;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e063      	b.n	8009b44 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d103      	bne.n	8009a8a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a82:	f002 fad1 	bl	800c028 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	e05c      	b.n	8009b44 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d106      	bne.n	8009a9e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a90:	f107 0314 	add.w	r3, r7, #20
 8009a94:	4618      	mov	r0, r3
 8009a96:	f001 fab5 	bl	800b004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a9e:	f002 fac3 	bl	800c028 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009aa2:	f000 ffff 	bl	800aaa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa6:	f002 fa89 	bl	800bfbc <vPortEnterCritical>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ab0:	b25b      	sxtb	r3, r3
 8009ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab6:	d103      	bne.n	8009ac0 <xQueueGenericSend+0x184>
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ac6:	b25b      	sxtb	r3, r3
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009acc:	d103      	bne.n	8009ad6 <xQueueGenericSend+0x19a>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ad6:	f002 faa7 	bl	800c028 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ada:	1d3a      	adds	r2, r7, #4
 8009adc:	f107 0314 	add.w	r3, r7, #20
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 faa4 	bl	800b030 <xTaskCheckForTimeOut>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d124      	bne.n	8009b38 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009aee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009af0:	f000 fc6a 	bl	800a3c8 <prvIsQueueFull>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d018      	beq.n	8009b2c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	3310      	adds	r3, #16
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	4611      	mov	r1, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 f9c2 	bl	800ae8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b0a:	f000 fbf5 	bl	800a2f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b0e:	f000 ffd7 	bl	800aac0 <xTaskResumeAll>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f47f af7c 	bne.w	8009a12 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8009b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b4c <xQueueGenericSend+0x210>)
 8009b1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	e772      	b.n	8009a12 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b2e:	f000 fbe3 	bl	800a2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b32:	f000 ffc5 	bl	800aac0 <xTaskResumeAll>
 8009b36:	e76c      	b.n	8009a12 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b3a:	f000 fbdd 	bl	800a2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b3e:	f000 ffbf 	bl	800aac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3738      	adds	r7, #56	@ 0x38
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b08e      	sub	sp, #56	@ 0x38
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10d      	bne.n	8009b84 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6c:	b672      	cpsid	i
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	b662      	cpsie	i
 8009b7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	e7fd      	b.n	8009b80 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d103      	bne.n	8009b92 <xQueueGenericSendFromISR+0x42>
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <xQueueGenericSendFromISR+0x46>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e000      	b.n	8009b98 <xQueueGenericSendFromISR+0x48>
 8009b96:	2300      	movs	r3, #0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10d      	bne.n	8009bb8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba0:	b672      	cpsid	i
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	b662      	cpsie	i
 8009bb0:	623b      	str	r3, [r7, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d103      	bne.n	8009bc6 <xQueueGenericSendFromISR+0x76>
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <xQueueGenericSendFromISR+0x7a>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e000      	b.n	8009bcc <xQueueGenericSendFromISR+0x7c>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10d      	bne.n	8009bec <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	b672      	cpsid	i
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	b662      	cpsie	i
 8009be4:	61fb      	str	r3, [r7, #28]
}
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	e7fd      	b.n	8009be8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bec:	f002 face 	bl	800c18c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009bf0:	f3ef 8211 	mrs	r2, BASEPRI
 8009bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf8:	b672      	cpsid	i
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	b662      	cpsie	i
 8009c08:	61ba      	str	r2, [r7, #24]
 8009c0a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c0c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d302      	bcc.n	8009c22 <xQueueGenericSendFromISR+0xd2>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d12c      	bne.n	8009c7c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c32:	f000 fad1 	bl	800a1d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c36:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3e:	d112      	bne.n	8009c66 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d016      	beq.n	8009c76 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	3324      	adds	r3, #36	@ 0x24
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 f973 	bl	800af38 <xTaskRemoveFromEventList>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00e      	beq.n	8009c76 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00b      	beq.n	8009c76 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	e007      	b.n	8009c76 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	b25a      	sxtb	r2, r3
 8009c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009c76:	2301      	movs	r3, #1
 8009c78:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009c7a:	e001      	b.n	8009c80 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c82:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3738      	adds	r7, #56	@ 0x38
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08c      	sub	sp, #48	@ 0x30
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <xQueueReceive+0x36>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	b672      	cpsid	i
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	b662      	cpsie	i
 8009cc6:	623b      	str	r3, [r7, #32]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <xQueueReceive+0x44>
 8009cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <xQueueReceive+0x48>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <xQueueReceive+0x4a>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10d      	bne.n	8009d02 <xQueueReceive+0x6a>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	b672      	cpsid	i
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	b662      	cpsie	i
 8009cfa:	61fb      	str	r3, [r7, #28]
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	e7fd      	b.n	8009cfe <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d02:	f001 faf7 	bl	800b2f4 <xTaskGetSchedulerState>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <xQueueReceive+0x7a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <xQueueReceive+0x7e>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <xQueueReceive+0x80>
 8009d16:	2300      	movs	r3, #0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10d      	bne.n	8009d38 <xQueueReceive+0xa0>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	b672      	cpsid	i
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	b662      	cpsie	i
 8009d30:	61bb      	str	r3, [r7, #24]
}
 8009d32:	bf00      	nop
 8009d34:	bf00      	nop
 8009d36:	e7fd      	b.n	8009d34 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d38:	f002 f940 	bl	800bfbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01f      	beq.n	8009d88 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d48:	68b9      	ldr	r1, [r7, #8]
 8009d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d4c:	f000 faae 	bl	800a2ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d52:	1e5a      	subs	r2, r3, #1
 8009d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00f      	beq.n	8009d80 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d62:	3310      	adds	r3, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 f8e7 	bl	800af38 <xTaskRemoveFromEventList>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d007      	beq.n	8009d80 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d70:	4b3c      	ldr	r3, [pc, #240]	@ (8009e64 <xQueueReceive+0x1cc>)
 8009d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d80:	f002 f952 	bl	800c028 <vPortExitCritical>
				return pdPASS;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e069      	b.n	8009e5c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d103      	bne.n	8009d96 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d8e:	f002 f94b 	bl	800c028 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d92:	2300      	movs	r3, #0
 8009d94:	e062      	b.n	8009e5c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d106      	bne.n	8009daa <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d9c:	f107 0310 	add.w	r3, r7, #16
 8009da0:	4618      	mov	r0, r3
 8009da2:	f001 f92f 	bl	800b004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009da6:	2301      	movs	r3, #1
 8009da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009daa:	f002 f93d 	bl	800c028 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dae:	f000 fe79 	bl	800aaa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009db2:	f002 f903 	bl	800bfbc <vPortEnterCritical>
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dbc:	b25b      	sxtb	r3, r3
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d103      	bne.n	8009dcc <xQueueReceive+0x134>
 8009dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dd2:	b25b      	sxtb	r3, r3
 8009dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd8:	d103      	bne.n	8009de2 <xQueueReceive+0x14a>
 8009dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009de2:	f002 f921 	bl	800c028 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009de6:	1d3a      	adds	r2, r7, #4
 8009de8:	f107 0310 	add.w	r3, r7, #16
 8009dec:	4611      	mov	r1, r2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 f91e 	bl	800b030 <xTaskCheckForTimeOut>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d123      	bne.n	8009e42 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009dfc:	f000 face 	bl	800a39c <prvIsQueueEmpty>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d017      	beq.n	8009e36 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e08:	3324      	adds	r3, #36	@ 0x24
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 f83c 	bl	800ae8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e16:	f000 fa6f 	bl	800a2f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e1a:	f000 fe51 	bl	800aac0 <xTaskResumeAll>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d189      	bne.n	8009d38 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8009e24:	4b0f      	ldr	r3, [pc, #60]	@ (8009e64 <xQueueReceive+0x1cc>)
 8009e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	e780      	b.n	8009d38 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e38:	f000 fa5e 	bl	800a2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e3c:	f000 fe40 	bl	800aac0 <xTaskResumeAll>
 8009e40:	e77a      	b.n	8009d38 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e44:	f000 fa58 	bl	800a2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e48:	f000 fe3a 	bl	800aac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e4e:	f000 faa5 	bl	800a39c <prvIsQueueEmpty>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f43f af6f 	beq.w	8009d38 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3730      	adds	r7, #48	@ 0x30
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08e      	sub	sp, #56	@ 0x38
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10d      	bne.n	8009ea0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e88:	b672      	cpsid	i
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	b662      	cpsie	i
 8009e98:	623b      	str	r3, [r7, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00d      	beq.n	8009ec4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eac:	b672      	cpsid	i
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	b662      	cpsie	i
 8009ebc:	61fb      	str	r3, [r7, #28]
}
 8009ebe:	bf00      	nop
 8009ec0:	bf00      	nop
 8009ec2:	e7fd      	b.n	8009ec0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ec4:	f001 fa16 	bl	800b2f4 <xTaskGetSchedulerState>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <xQueueSemaphoreTake+0x6c>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <xQueueSemaphoreTake+0x70>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e000      	b.n	8009eda <xQueueSemaphoreTake+0x72>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10d      	bne.n	8009efa <xQueueSemaphoreTake+0x92>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee2:	b672      	cpsid	i
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	b662      	cpsie	i
 8009ef2:	61bb      	str	r3, [r7, #24]
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	e7fd      	b.n	8009ef6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009efa:	f002 f85f 	bl	800bfbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d024      	beq.n	8009f54 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0c:	1e5a      	subs	r2, r3, #1
 8009f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d104      	bne.n	8009f24 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009f1a:	f001 fb6d 	bl	800b5f8 <pvTaskIncrementMutexHeldCount>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00f      	beq.n	8009f4c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2e:	3310      	adds	r3, #16
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 f801 	bl	800af38 <xTaskRemoveFromEventList>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d007      	beq.n	8009f4c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f3c:	4b55      	ldr	r3, [pc, #340]	@ (800a094 <xQueueSemaphoreTake+0x22c>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f4c:	f002 f86c 	bl	800c028 <vPortExitCritical>
				return pdPASS;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e09a      	b.n	800a08a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d114      	bne.n	8009f84 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00d      	beq.n	8009f7c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f64:	b672      	cpsid	i
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	b662      	cpsie	i
 8009f74:	617b      	str	r3, [r7, #20]
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	e7fd      	b.n	8009f78 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009f7c:	f002 f854 	bl	800c028 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f80:	2300      	movs	r3, #0
 8009f82:	e082      	b.n	800a08a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d106      	bne.n	8009f98 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f8a:	f107 030c 	add.w	r3, r7, #12
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f001 f838 	bl	800b004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f98:	f002 f846 	bl	800c028 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f9c:	f000 fd82 	bl	800aaa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fa0:	f002 f80c 	bl	800bfbc <vPortEnterCritical>
 8009fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009faa:	b25b      	sxtb	r3, r3
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d103      	bne.n	8009fba <xQueueSemaphoreTake+0x152>
 8009fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fc0:	b25b      	sxtb	r3, r3
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d103      	bne.n	8009fd0 <xQueueSemaphoreTake+0x168>
 8009fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fd0:	f002 f82a 	bl	800c028 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fd4:	463a      	mov	r2, r7
 8009fd6:	f107 030c 	add.w	r3, r7, #12
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f001 f827 	bl	800b030 <xTaskCheckForTimeOut>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d132      	bne.n	800a04e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fea:	f000 f9d7 	bl	800a39c <prvIsQueueEmpty>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d026      	beq.n	800a042 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d109      	bne.n	800a010 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8009ffc:	f001 ffde 	bl	800bfbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	4618      	mov	r0, r3
 800a006:	f001 f993 	bl	800b330 <xTaskPriorityInherit>
 800a00a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a00c:	f002 f80c 	bl	800c028 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a012:	3324      	adds	r3, #36	@ 0x24
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 ff37 	bl	800ae8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a01e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a020:	f000 f96a 	bl	800a2f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a024:	f000 fd4c 	bl	800aac0 <xTaskResumeAll>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f47f af65 	bne.w	8009efa <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800a030:	4b18      	ldr	r3, [pc, #96]	@ (800a094 <xQueueSemaphoreTake+0x22c>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	e75b      	b.n	8009efa <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a042:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a044:	f000 f958 	bl	800a2f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a048:	f000 fd3a 	bl	800aac0 <xTaskResumeAll>
 800a04c:	e755      	b.n	8009efa <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a04e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a050:	f000 f952 	bl	800a2f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a054:	f000 fd34 	bl	800aac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a058:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a05a:	f000 f99f 	bl	800a39c <prvIsQueueEmpty>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	f43f af4a 	beq.w	8009efa <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00d      	beq.n	800a088 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800a06c:	f001 ffa6 	bl	800bfbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a070:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a072:	f000 f899 	bl	800a1a8 <prvGetDisinheritPriorityAfterTimeout>
 800a076:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 fa32 	bl	800b4e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a084:	f001 ffd0 	bl	800c028 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a088:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3738      	adds	r7, #56	@ 0x38
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	e000ed04 	.word	0xe000ed04

0800a098 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08e      	sub	sp, #56	@ 0x38
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10d      	bne.n	800a0ca <xQueueReceiveFromISR+0x32>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	b672      	cpsid	i
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	b662      	cpsie	i
 800a0c2:	623b      	str	r3, [r7, #32]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d103      	bne.n	800a0d8 <xQueueReceiveFromISR+0x40>
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <xQueueReceiveFromISR+0x44>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <xQueueReceiveFromISR+0x46>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10d      	bne.n	800a0fe <xQueueReceiveFromISR+0x66>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e6:	b672      	cpsid	i
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	b662      	cpsie	i
 800a0f6:	61fb      	str	r3, [r7, #28]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0fe:	f002 f845 	bl	800c18c <vPortValidateInterruptPriority>
	__asm volatile
 800a102:	f3ef 8211 	mrs	r2, BASEPRI
 800a106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10a:	b672      	cpsid	i
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	b662      	cpsie	i
 800a11a:	61ba      	str	r2, [r7, #24]
 800a11c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a11e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a120:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a126:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d02f      	beq.n	800a18e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a138:	68b9      	ldr	r1, [r7, #8]
 800a13a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a13c:	f000 f8b6 	bl	800a2ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a142:	1e5a      	subs	r2, r3, #1
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a148:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d112      	bne.n	800a178 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d016      	beq.n	800a188 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	3310      	adds	r3, #16
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 feea 	bl	800af38 <xTaskRemoveFromEventList>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00e      	beq.n	800a188 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00b      	beq.n	800a188 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	e007      	b.n	800a188 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a17c:	3301      	adds	r3, #1
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	b25a      	sxtb	r2, r3
 800a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a188:	2301      	movs	r3, #1
 800a18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a18c:	e001      	b.n	800a192 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800a18e:	2300      	movs	r3, #0
 800a190:	637b      	str	r3, [r7, #52]	@ 0x34
 800a192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a194:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f383 8811 	msr	BASEPRI, r3
}
 800a19c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3738      	adds	r7, #56	@ 0x38
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d006      	beq.n	800a1c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e001      	b.n	800a1ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
	}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10d      	bne.n	800a212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d14d      	bne.n	800a29a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	4618      	mov	r0, r3
 800a204:	f001 f8fc 	bl	800b400 <xTaskPriorityDisinherit>
 800a208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	609a      	str	r2, [r3, #8]
 800a210:	e043      	b.n	800a29a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d119      	bne.n	800a24c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6858      	ldr	r0, [r3, #4]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a220:	461a      	mov	r2, r3
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	f002 fce7 	bl	800cbf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a230:	441a      	add	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d32b      	bcc.n	800a29a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	605a      	str	r2, [r3, #4]
 800a24a:	e026      	b.n	800a29a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	68d8      	ldr	r0, [r3, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a254:	461a      	mov	r2, r3
 800a256:	68b9      	ldr	r1, [r7, #8]
 800a258:	f002 fccd 	bl	800cbf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a264:	425b      	negs	r3, r3
 800a266:	441a      	add	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	429a      	cmp	r2, r3
 800a276:	d207      	bcs.n	800a288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a280:	425b      	negs	r3, r3
 800a282:	441a      	add	r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d105      	bne.n	800a29a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	3b01      	subs	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a2a2:	697b      	ldr	r3, [r7, #20]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d018      	beq.n	800a2f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68da      	ldr	r2, [r3, #12]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c6:	441a      	add	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d303      	bcc.n	800a2e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68d9      	ldr	r1, [r3, #12]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6838      	ldr	r0, [r7, #0]
 800a2ec:	f002 fc83 	bl	800cbf6 <memcpy>
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a300:	f001 fe5c 	bl	800bfbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a30a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a30c:	e011      	b.n	800a332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d012      	beq.n	800a33c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3324      	adds	r3, #36	@ 0x24
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 fe0c 	bl	800af38 <xTaskRemoveFromEventList>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a326:	f000 feeb 	bl	800b100 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	dce9      	bgt.n	800a30e <prvUnlockQueue+0x16>
 800a33a:	e000      	b.n	800a33e <prvUnlockQueue+0x46>
					break;
 800a33c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	22ff      	movs	r2, #255	@ 0xff
 800a342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a346:	f001 fe6f 	bl	800c028 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a34a:	f001 fe37 	bl	800bfbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a356:	e011      	b.n	800a37c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d012      	beq.n	800a386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3310      	adds	r3, #16
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fde7 	bl	800af38 <xTaskRemoveFromEventList>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a370:	f000 fec6 	bl	800b100 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a374:	7bbb      	ldrb	r3, [r7, #14]
 800a376:	3b01      	subs	r3, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a37c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a380:	2b00      	cmp	r3, #0
 800a382:	dce9      	bgt.n	800a358 <prvUnlockQueue+0x60>
 800a384:	e000      	b.n	800a388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	22ff      	movs	r2, #255	@ 0xff
 800a38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a390:	f001 fe4a 	bl	800c028 <vPortExitCritical>
}
 800a394:	bf00      	nop
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3a4:	f001 fe0a 	bl	800bfbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e001      	b.n	800a3ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3ba:	f001 fe35 	bl	800c028 <vPortExitCritical>

	return xReturn;
 800a3be:	68fb      	ldr	r3, [r7, #12]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3d0:	f001 fdf4 	bl	800bfbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d102      	bne.n	800a3e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e001      	b.n	800a3ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3ea:	f001 fe1d 	bl	800c028 <vPortExitCritical>

	return xReturn;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	e014      	b.n	800a432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a408:	4a0f      	ldr	r2, [pc, #60]	@ (800a448 <vQueueAddToRegistry+0x50>)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10b      	bne.n	800a42c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a414:	490c      	ldr	r1, [pc, #48]	@ (800a448 <vQueueAddToRegistry+0x50>)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a41e:	4a0a      	ldr	r2, [pc, #40]	@ (800a448 <vQueueAddToRegistry+0x50>)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	4413      	add	r3, r2
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a42a:	e006      	b.n	800a43a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3301      	adds	r3, #1
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b07      	cmp	r3, #7
 800a436:	d9e7      	bls.n	800a408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	20001b80 	.word	0x20001b80

0800a44c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a45c:	f001 fdae 	bl	800bfbc <vPortEnterCritical>
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a466:	b25b      	sxtb	r3, r3
 800a468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46c:	d103      	bne.n	800a476 <vQueueWaitForMessageRestricted+0x2a>
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a47c:	b25b      	sxtb	r3, r3
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a482:	d103      	bne.n	800a48c <vQueueWaitForMessageRestricted+0x40>
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a48c:	f001 fdcc 	bl	800c028 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	3324      	adds	r3, #36	@ 0x24
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fd1b 	bl	800aedc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a4a6:	6978      	ldr	r0, [r7, #20]
 800a4a8:	f7ff ff26 	bl	800a2f8 <prvUnlockQueue>
	}
 800a4ac:	bf00      	nop
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08e      	sub	sp, #56	@ 0x38
 800a4b8:	af04      	add	r7, sp, #16
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10d      	bne.n	800a4e4 <xTaskCreateStatic+0x30>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	b672      	cpsid	i
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	b662      	cpsie	i
 800a4dc:	623b      	str	r3, [r7, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	e7fd      	b.n	800a4e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10d      	bne.n	800a506 <xTaskCreateStatic+0x52>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ee:	b672      	cpsid	i
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	b662      	cpsie	i
 800a4fe:	61fb      	str	r3, [r7, #28]
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	e7fd      	b.n	800a502 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a506:	23a8      	movs	r3, #168	@ 0xa8
 800a508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2ba8      	cmp	r3, #168	@ 0xa8
 800a50e:	d00d      	beq.n	800a52c <xTaskCreateStatic+0x78>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a514:	b672      	cpsid	i
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	b662      	cpsie	i
 800a524:	61bb      	str	r3, [r7, #24]
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	e7fd      	b.n	800a528 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a52c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01e      	beq.n	800a572 <xTaskCreateStatic+0xbe>
 800a534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01b      	beq.n	800a572 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a542:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a546:	2202      	movs	r2, #2
 800a548:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a54c:	2300      	movs	r3, #0
 800a54e:	9303      	str	r3, [sp, #12]
 800a550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a552:	9302      	str	r3, [sp, #8]
 800a554:	f107 0314 	add.w	r3, r7, #20
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 f851 	bl	800a60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a56a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a56c:	f000 f8f8 	bl	800a760 <prvAddNewTaskToReadyList>
 800a570:	e001      	b.n	800a576 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a576:	697b      	ldr	r3, [r7, #20]
	}
 800a578:	4618      	mov	r0, r3
 800a57a:	3728      	adds	r7, #40	@ 0x28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08c      	sub	sp, #48	@ 0x30
 800a584:	af04      	add	r7, sp, #16
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a590:	88fb      	ldrh	r3, [r7, #6]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4618      	mov	r0, r3
 800a596:	f001 fe3f 	bl	800c218 <pvPortMalloc>
 800a59a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00e      	beq.n	800a5c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a5a2:	20a8      	movs	r0, #168	@ 0xa8
 800a5a4:	f001 fe38 	bl	800c218 <pvPortMalloc>
 800a5a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a5b6:	e005      	b.n	800a5c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5b8:	6978      	ldr	r0, [r7, #20]
 800a5ba:	f001 fefb 	bl	800c3b4 <vPortFree>
 800a5be:	e001      	b.n	800a5c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d017      	beq.n	800a5fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	9303      	str	r3, [sp, #12]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	9302      	str	r3, [sp, #8]
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	68b9      	ldr	r1, [r7, #8]
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 f80f 	bl	800a60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5ee:	69f8      	ldr	r0, [r7, #28]
 800a5f0:	f000 f8b6 	bl	800a760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	61bb      	str	r3, [r7, #24]
 800a5f8:	e002      	b.n	800a600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a5fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a600:	69bb      	ldr	r3, [r7, #24]
	}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	461a      	mov	r2, r3
 800a624:	21a5      	movs	r1, #165	@ 0xa5
 800a626:	f002 fa0d 	bl	800ca44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a634:	440b      	add	r3, r1
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f023 0307 	bic.w	r3, r3, #7
 800a642:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00d      	beq.n	800a66a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	b672      	cpsid	i
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	b662      	cpsie	i
 800a662:	617b      	str	r3, [r7, #20]
}
 800a664:	bf00      	nop
 800a666:	bf00      	nop
 800a668:	e7fd      	b.n	800a666 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d01f      	beq.n	800a6b0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a670:	2300      	movs	r3, #0
 800a672:	61fb      	str	r3, [r7, #28]
 800a674:	e012      	b.n	800a69c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	4413      	add	r3, r2
 800a67c:	7819      	ldrb	r1, [r3, #0]
 800a67e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	4413      	add	r3, r2
 800a684:	3334      	adds	r3, #52	@ 0x34
 800a686:	460a      	mov	r2, r1
 800a688:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	4413      	add	r3, r2
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d006      	beq.n	800a6a4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	3301      	adds	r3, #1
 800a69a:	61fb      	str	r3, [r7, #28]
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d9e9      	bls.n	800a676 <prvInitialiseNewTask+0x6a>
 800a6a2:	e000      	b.n	800a6a6 <prvInitialiseNewTask+0x9a>
			{
				break;
 800a6a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a6ae:	e003      	b.n	800a6b8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ba:	2b37      	cmp	r3, #55	@ 0x37
 800a6bc:	d901      	bls.n	800a6c2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6be:	2337      	movs	r3, #55	@ 0x37
 800a6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fe fe85 	bl	80093e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	3318      	adds	r3, #24
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fe80 	bl	80093e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	2200      	movs	r2, #0
 800a702:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a710:	3354      	adds	r3, #84	@ 0x54
 800a712:	224c      	movs	r2, #76	@ 0x4c
 800a714:	2100      	movs	r1, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f002 f994 	bl	800ca44 <memset>
 800a71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71e:	4a0d      	ldr	r2, [pc, #52]	@ (800a754 <prvInitialiseNewTask+0x148>)
 800a720:	659a      	str	r2, [r3, #88]	@ 0x58
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	4a0c      	ldr	r2, [pc, #48]	@ (800a758 <prvInitialiseNewTask+0x14c>)
 800a726:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72a:	4a0c      	ldr	r2, [pc, #48]	@ (800a75c <prvInitialiseNewTask+0x150>)
 800a72c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	68f9      	ldr	r1, [r7, #12]
 800a732:	69b8      	ldr	r0, [r7, #24]
 800a734:	f001 fb30 	bl	800bd98 <pxPortInitialiseStack>
 800a738:	4602      	mov	r2, r0
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a74a:	bf00      	nop
 800a74c:	3720      	adds	r7, #32
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20005e0c 	.word	0x20005e0c
 800a758:	20005e74 	.word	0x20005e74
 800a75c:	20005edc 	.word	0x20005edc

0800a760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a768:	f001 fc28 	bl	800bfbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a76c:	4b2d      	ldr	r3, [pc, #180]	@ (800a824 <prvAddNewTaskToReadyList+0xc4>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3301      	adds	r3, #1
 800a772:	4a2c      	ldr	r2, [pc, #176]	@ (800a824 <prvAddNewTaskToReadyList+0xc4>)
 800a774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a776:	4b2c      	ldr	r3, [pc, #176]	@ (800a828 <prvAddNewTaskToReadyList+0xc8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d109      	bne.n	800a792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a77e:	4a2a      	ldr	r2, [pc, #168]	@ (800a828 <prvAddNewTaskToReadyList+0xc8>)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a784:	4b27      	ldr	r3, [pc, #156]	@ (800a824 <prvAddNewTaskToReadyList+0xc4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d110      	bne.n	800a7ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a78c:	f000 fcdc 	bl	800b148 <prvInitialiseTaskLists>
 800a790:	e00d      	b.n	800a7ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a792:	4b26      	ldr	r3, [pc, #152]	@ (800a82c <prvAddNewTaskToReadyList+0xcc>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d109      	bne.n	800a7ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a79a:	4b23      	ldr	r3, [pc, #140]	@ (800a828 <prvAddNewTaskToReadyList+0xc8>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d802      	bhi.n	800a7ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7a8:	4a1f      	ldr	r2, [pc, #124]	@ (800a828 <prvAddNewTaskToReadyList+0xc8>)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7ae:	4b20      	ldr	r3, [pc, #128]	@ (800a830 <prvAddNewTaskToReadyList+0xd0>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a830 <prvAddNewTaskToReadyList+0xd0>)
 800a7b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a830 <prvAddNewTaskToReadyList+0xd0>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a834 <prvAddNewTaskToReadyList+0xd4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d903      	bls.n	800a7d4 <prvAddNewTaskToReadyList+0x74>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d0:	4a18      	ldr	r2, [pc, #96]	@ (800a834 <prvAddNewTaskToReadyList+0xd4>)
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7d8:	4613      	mov	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4a15      	ldr	r2, [pc, #84]	@ (800a838 <prvAddNewTaskToReadyList+0xd8>)
 800a7e2:	441a      	add	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	f7fe fe09 	bl	8009402 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7f0:	f001 fc1a 	bl	800c028 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a82c <prvAddNewTaskToReadyList+0xcc>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00e      	beq.n	800a81a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a828 <prvAddNewTaskToReadyList+0xc8>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a806:	429a      	cmp	r2, r3
 800a808:	d207      	bcs.n	800a81a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a80a:	4b0c      	ldr	r3, [pc, #48]	@ (800a83c <prvAddNewTaskToReadyList+0xdc>)
 800a80c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	20002094 	.word	0x20002094
 800a828:	20001bc0 	.word	0x20001bc0
 800a82c:	200020a0 	.word	0x200020a0
 800a830:	200020b0 	.word	0x200020b0
 800a834:	2000209c 	.word	0x2000209c
 800a838:	20001bc4 	.word	0x20001bc4
 800a83c:	e000ed04 	.word	0xe000ed04

0800a840 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	@ 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10d      	bne.n	800a870 <vTaskDelayUntil+0x30>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	b672      	cpsid	i
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	b662      	cpsie	i
 800a868:	617b      	str	r3, [r7, #20]
}
 800a86a:	bf00      	nop
 800a86c:	bf00      	nop
 800a86e:	e7fd      	b.n	800a86c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10d      	bne.n	800a892 <vTaskDelayUntil+0x52>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	b672      	cpsid	i
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	b662      	cpsie	i
 800a88a:	613b      	str	r3, [r7, #16]
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	e7fd      	b.n	800a88e <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800a892:	4b2b      	ldr	r3, [pc, #172]	@ (800a940 <vTaskDelayUntil+0x100>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00d      	beq.n	800a8b6 <vTaskDelayUntil+0x76>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89e:	b672      	cpsid	i
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	b662      	cpsie	i
 800a8ae:	60fb      	str	r3, [r7, #12]
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	e7fd      	b.n	800a8b2 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800a8b6:	f000 f8f5 	bl	800aaa4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a8ba:	4b22      	ldr	r3, [pc, #136]	@ (800a944 <vTaskDelayUntil+0x104>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6a3a      	ldr	r2, [r7, #32]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d20b      	bcs.n	800a8ec <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	69fa      	ldr	r2, [r7, #28]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d211      	bcs.n	800a902 <vTaskDelayUntil+0xc2>
 800a8de:	69fa      	ldr	r2, [r7, #28]
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d90d      	bls.n	800a902 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ea:	e00a      	b.n	800a902 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	69fa      	ldr	r2, [r7, #28]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d303      	bcc.n	800a8fe <vTaskDelayUntil+0xbe>
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d901      	bls.n	800a902 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800a8fe:	2301      	movs	r3, #1
 800a900:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	69fa      	ldr	r2, [r7, #28]
 800a906:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d006      	beq.n	800a91c <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a90e:	69fa      	ldr	r2, [r7, #28]
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	2100      	movs	r1, #0
 800a916:	4618      	mov	r0, r3
 800a918:	f000 fe82 	bl	800b620 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a91c:	f000 f8d0 	bl	800aac0 <xTaskResumeAll>
 800a920:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d107      	bne.n	800a938 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800a928:	4b07      	ldr	r3, [pc, #28]	@ (800a948 <vTaskDelayUntil+0x108>)
 800a92a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a938:	bf00      	nop
 800a93a:	3728      	adds	r7, #40	@ 0x28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	200020bc 	.word	0x200020bc
 800a944:	20002098 	.word	0x20002098
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d01a      	beq.n	800a994 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a95e:	4b15      	ldr	r3, [pc, #84]	@ (800a9b4 <vTaskDelay+0x68>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00d      	beq.n	800a982 <vTaskDelay+0x36>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	b672      	cpsid	i
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	b662      	cpsie	i
 800a97a:	60bb      	str	r3, [r7, #8]
}
 800a97c:	bf00      	nop
 800a97e:	bf00      	nop
 800a980:	e7fd      	b.n	800a97e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a982:	f000 f88f 	bl	800aaa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a986:	2100      	movs	r1, #0
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fe49 	bl	800b620 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a98e:	f000 f897 	bl	800aac0 <xTaskResumeAll>
 800a992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d107      	bne.n	800a9aa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800a99a:	4b07      	ldr	r3, [pc, #28]	@ (800a9b8 <vTaskDelay+0x6c>)
 800a99c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9aa:	bf00      	nop
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	200020bc 	.word	0x200020bc
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	@ 0x28
 800a9c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	1d39      	adds	r1, r7, #4
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe fcb4 	bl	8009340 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	9202      	str	r2, [sp, #8]
 800a9e0:	9301      	str	r3, [sp, #4]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	460a      	mov	r2, r1
 800a9ea:	4926      	ldr	r1, [pc, #152]	@ (800aa84 <vTaskStartScheduler+0xc8>)
 800a9ec:	4826      	ldr	r0, [pc, #152]	@ (800aa88 <vTaskStartScheduler+0xcc>)
 800a9ee:	f7ff fd61 	bl	800a4b4 <xTaskCreateStatic>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	4a25      	ldr	r2, [pc, #148]	@ (800aa8c <vTaskStartScheduler+0xd0>)
 800a9f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9f8:	4b24      	ldr	r3, [pc, #144]	@ (800aa8c <vTaskStartScheduler+0xd0>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa00:	2301      	movs	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
 800aa04:	e001      	b.n	800aa0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d102      	bne.n	800aa16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa10:	f000 fe5a 	bl	800b6c8 <xTimerCreateTimerTask>
 800aa14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d11d      	bne.n	800aa58 <vTaskStartScheduler+0x9c>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa20:	b672      	cpsid	i
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	b662      	cpsie	i
 800aa30:	613b      	str	r3, [r7, #16]
}
 800aa32:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa34:	4b16      	ldr	r3, [pc, #88]	@ (800aa90 <vTaskStartScheduler+0xd4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3354      	adds	r3, #84	@ 0x54
 800aa3a:	4a16      	ldr	r2, [pc, #88]	@ (800aa94 <vTaskStartScheduler+0xd8>)
 800aa3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa3e:	4b16      	ldr	r3, [pc, #88]	@ (800aa98 <vTaskStartScheduler+0xdc>)
 800aa40:	f04f 32ff 	mov.w	r2, #4294967295
 800aa44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa46:	4b15      	ldr	r3, [pc, #84]	@ (800aa9c <vTaskStartScheduler+0xe0>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa4c:	4b14      	ldr	r3, [pc, #80]	@ (800aaa0 <vTaskStartScheduler+0xe4>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa52:	f001 fa35 	bl	800bec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa56:	e011      	b.n	800aa7c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	d10d      	bne.n	800aa7c <vTaskStartScheduler+0xc0>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa64:	b672      	cpsid	i
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	b662      	cpsie	i
 800aa74:	60fb      	str	r3, [r7, #12]
}
 800aa76:	bf00      	nop
 800aa78:	bf00      	nop
 800aa7a:	e7fd      	b.n	800aa78 <vTaskStartScheduler+0xbc>
}
 800aa7c:	bf00      	nop
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	0800dab0 	.word	0x0800dab0
 800aa88:	0800b119 	.word	0x0800b119
 800aa8c:	200020b8 	.word	0x200020b8
 800aa90:	20001bc0 	.word	0x20001bc0
 800aa94:	2000001c 	.word	0x2000001c
 800aa98:	200020b4 	.word	0x200020b4
 800aa9c:	200020a0 	.word	0x200020a0
 800aaa0:	20002098 	.word	0x20002098

0800aaa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aaa8:	4b04      	ldr	r3, [pc, #16]	@ (800aabc <vTaskSuspendAll+0x18>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	4a03      	ldr	r2, [pc, #12]	@ (800aabc <vTaskSuspendAll+0x18>)
 800aab0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800aab2:	bf00      	nop
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	200020bc 	.word	0x200020bc

0800aac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aaca:	2300      	movs	r3, #0
 800aacc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aace:	4b43      	ldr	r3, [pc, #268]	@ (800abdc <xTaskResumeAll+0x11c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10d      	bne.n	800aaf2 <xTaskResumeAll+0x32>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	b672      	cpsid	i
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	b662      	cpsie	i
 800aaea:	603b      	str	r3, [r7, #0]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaf2:	f001 fa63 	bl	800bfbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aaf6:	4b39      	ldr	r3, [pc, #228]	@ (800abdc <xTaskResumeAll+0x11c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	4a37      	ldr	r2, [pc, #220]	@ (800abdc <xTaskResumeAll+0x11c>)
 800aafe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab00:	4b36      	ldr	r3, [pc, #216]	@ (800abdc <xTaskResumeAll+0x11c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d162      	bne.n	800abce <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab08:	4b35      	ldr	r3, [pc, #212]	@ (800abe0 <xTaskResumeAll+0x120>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d05e      	beq.n	800abce <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab10:	e02f      	b.n	800ab72 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab12:	4b34      	ldr	r3, [pc, #208]	@ (800abe4 <xTaskResumeAll+0x124>)
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3318      	adds	r3, #24
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fccc 	bl	80094bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fcc7 	bl	80094bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab32:	4b2d      	ldr	r3, [pc, #180]	@ (800abe8 <xTaskResumeAll+0x128>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d903      	bls.n	800ab42 <xTaskResumeAll+0x82>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab3e:	4a2a      	ldr	r2, [pc, #168]	@ (800abe8 <xTaskResumeAll+0x128>)
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4a27      	ldr	r2, [pc, #156]	@ (800abec <xTaskResumeAll+0x12c>)
 800ab50:	441a      	add	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3304      	adds	r3, #4
 800ab56:	4619      	mov	r1, r3
 800ab58:	4610      	mov	r0, r2
 800ab5a:	f7fe fc52 	bl	8009402 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab62:	4b23      	ldr	r3, [pc, #140]	@ (800abf0 <xTaskResumeAll+0x130>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d302      	bcc.n	800ab72 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800ab6c:	4b21      	ldr	r3, [pc, #132]	@ (800abf4 <xTaskResumeAll+0x134>)
 800ab6e:	2201      	movs	r2, #1
 800ab70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab72:	4b1c      	ldr	r3, [pc, #112]	@ (800abe4 <xTaskResumeAll+0x124>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1cb      	bne.n	800ab12 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab80:	f000 fb88 	bl	800b294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab84:	4b1c      	ldr	r3, [pc, #112]	@ (800abf8 <xTaskResumeAll+0x138>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d010      	beq.n	800abb2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab90:	f000 f858 	bl	800ac44 <xTaskIncrementTick>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800ab9a:	4b16      	ldr	r3, [pc, #88]	@ (800abf4 <xTaskResumeAll+0x134>)
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3b01      	subs	r3, #1
 800aba4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1f1      	bne.n	800ab90 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800abac:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <xTaskResumeAll+0x138>)
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abb2:	4b10      	ldr	r3, [pc, #64]	@ (800abf4 <xTaskResumeAll+0x134>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d009      	beq.n	800abce <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abba:	2301      	movs	r3, #1
 800abbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abbe:	4b0f      	ldr	r3, [pc, #60]	@ (800abfc <xTaskResumeAll+0x13c>)
 800abc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abce:	f001 fa2b 	bl	800c028 <vPortExitCritical>

	return xAlreadyYielded;
 800abd2:	68bb      	ldr	r3, [r7, #8]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	200020bc 	.word	0x200020bc
 800abe0:	20002094 	.word	0x20002094
 800abe4:	20002054 	.word	0x20002054
 800abe8:	2000209c 	.word	0x2000209c
 800abec:	20001bc4 	.word	0x20001bc4
 800abf0:	20001bc0 	.word	0x20001bc0
 800abf4:	200020a8 	.word	0x200020a8
 800abf8:	200020a4 	.word	0x200020a4
 800abfc:	e000ed04 	.word	0xe000ed04

0800ac00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac06:	4b05      	ldr	r3, [pc, #20]	@ (800ac1c <xTaskGetTickCount+0x1c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac0c:	687b      	ldr	r3, [r7, #4]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20002098 	.word	0x20002098

0800ac20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac26:	f001 fab1 	bl	800c18c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ac2e:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <xTaskGetTickCountFromISR+0x20>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac34:	683b      	ldr	r3, [r7, #0]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20002098 	.word	0x20002098

0800ac44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac4e:	4b50      	ldr	r3, [pc, #320]	@ (800ad90 <xTaskIncrementTick+0x14c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 808c 	bne.w	800ad70 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac58:	4b4e      	ldr	r3, [pc, #312]	@ (800ad94 <xTaskIncrementTick+0x150>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac60:	4a4c      	ldr	r2, [pc, #304]	@ (800ad94 <xTaskIncrementTick+0x150>)
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d123      	bne.n	800acb4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac6c:	4b4a      	ldr	r3, [pc, #296]	@ (800ad98 <xTaskIncrementTick+0x154>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00d      	beq.n	800ac92 <xTaskIncrementTick+0x4e>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7a:	b672      	cpsid	i
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	b662      	cpsie	i
 800ac8a:	603b      	str	r3, [r7, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	e7fd      	b.n	800ac8e <xTaskIncrementTick+0x4a>
 800ac92:	4b41      	ldr	r3, [pc, #260]	@ (800ad98 <xTaskIncrementTick+0x154>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
 800ac98:	4b40      	ldr	r3, [pc, #256]	@ (800ad9c <xTaskIncrementTick+0x158>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a3e      	ldr	r2, [pc, #248]	@ (800ad98 <xTaskIncrementTick+0x154>)
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	4a3e      	ldr	r2, [pc, #248]	@ (800ad9c <xTaskIncrementTick+0x158>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	4b3e      	ldr	r3, [pc, #248]	@ (800ada0 <xTaskIncrementTick+0x15c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3301      	adds	r3, #1
 800acac:	4a3c      	ldr	r2, [pc, #240]	@ (800ada0 <xTaskIncrementTick+0x15c>)
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	f000 faf0 	bl	800b294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acb4:	4b3b      	ldr	r3, [pc, #236]	@ (800ada4 <xTaskIncrementTick+0x160>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d349      	bcc.n	800ad52 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acbe:	4b36      	ldr	r3, [pc, #216]	@ (800ad98 <xTaskIncrementTick+0x154>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d104      	bne.n	800acd2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc8:	4b36      	ldr	r3, [pc, #216]	@ (800ada4 <xTaskIncrementTick+0x160>)
 800acca:	f04f 32ff 	mov.w	r2, #4294967295
 800acce:	601a      	str	r2, [r3, #0]
					break;
 800acd0:	e03f      	b.n	800ad52 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd2:	4b31      	ldr	r3, [pc, #196]	@ (800ad98 <xTaskIncrementTick+0x154>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d203      	bcs.n	800acf2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acea:	4a2e      	ldr	r2, [pc, #184]	@ (800ada4 <xTaskIncrementTick+0x160>)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acf0:	e02f      	b.n	800ad52 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	3304      	adds	r3, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe fbe0 	bl	80094bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	3318      	adds	r3, #24
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fbd7 	bl	80094bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad12:	4b25      	ldr	r3, [pc, #148]	@ (800ada8 <xTaskIncrementTick+0x164>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d903      	bls.n	800ad22 <xTaskIncrementTick+0xde>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1e:	4a22      	ldr	r2, [pc, #136]	@ (800ada8 <xTaskIncrementTick+0x164>)
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4a1f      	ldr	r2, [pc, #124]	@ (800adac <xTaskIncrementTick+0x168>)
 800ad30:	441a      	add	r2, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f7fe fb62 	bl	8009402 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad42:	4b1b      	ldr	r3, [pc, #108]	@ (800adb0 <xTaskIncrementTick+0x16c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d3b8      	bcc.n	800acbe <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad50:	e7b5      	b.n	800acbe <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad52:	4b17      	ldr	r3, [pc, #92]	@ (800adb0 <xTaskIncrementTick+0x16c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad58:	4914      	ldr	r1, [pc, #80]	@ (800adac <xTaskIncrementTick+0x168>)
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	440b      	add	r3, r1
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d907      	bls.n	800ad7a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	617b      	str	r3, [r7, #20]
 800ad6e:	e004      	b.n	800ad7a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad70:	4b10      	ldr	r3, [pc, #64]	@ (800adb4 <xTaskIncrementTick+0x170>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	4a0f      	ldr	r2, [pc, #60]	@ (800adb4 <xTaskIncrementTick+0x170>)
 800ad78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	@ (800adb8 <xTaskIncrementTick+0x174>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d001      	beq.n	800ad86 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ad82:	2301      	movs	r3, #1
 800ad84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad86:	697b      	ldr	r3, [r7, #20]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	200020bc 	.word	0x200020bc
 800ad94:	20002098 	.word	0x20002098
 800ad98:	2000204c 	.word	0x2000204c
 800ad9c:	20002050 	.word	0x20002050
 800ada0:	200020ac 	.word	0x200020ac
 800ada4:	200020b4 	.word	0x200020b4
 800ada8:	2000209c 	.word	0x2000209c
 800adac:	20001bc4 	.word	0x20001bc4
 800adb0:	20001bc0 	.word	0x20001bc0
 800adb4:	200020a4 	.word	0x200020a4
 800adb8:	200020a8 	.word	0x200020a8

0800adbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adc2:	4b2c      	ldr	r3, [pc, #176]	@ (800ae74 <vTaskSwitchContext+0xb8>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adca:	4b2b      	ldr	r3, [pc, #172]	@ (800ae78 <vTaskSwitchContext+0xbc>)
 800adcc:	2201      	movs	r2, #1
 800adce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800add0:	e049      	b.n	800ae66 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800add2:	4b29      	ldr	r3, [pc, #164]	@ (800ae78 <vTaskSwitchContext+0xbc>)
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add8:	4b28      	ldr	r3, [pc, #160]	@ (800ae7c <vTaskSwitchContext+0xc0>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e013      	b.n	800ae08 <vTaskSwitchContext+0x4c>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10d      	bne.n	800ae02 <vTaskSwitchContext+0x46>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adea:	b672      	cpsid	i
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	b662      	cpsie	i
 800adfa:	607b      	str	r3, [r7, #4]
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	e7fd      	b.n	800adfe <vTaskSwitchContext+0x42>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	491d      	ldr	r1, [pc, #116]	@ (800ae80 <vTaskSwitchContext+0xc4>)
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0e1      	beq.n	800ade0 <vTaskSwitchContext+0x24>
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4a16      	ldr	r2, [pc, #88]	@ (800ae80 <vTaskSwitchContext+0xc4>)
 800ae28:	4413      	add	r3, r2
 800ae2a:	60bb      	str	r3, [r7, #8]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d104      	bne.n	800ae4c <vTaskSwitchContext+0x90>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	605a      	str	r2, [r3, #4]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	4a0c      	ldr	r2, [pc, #48]	@ (800ae84 <vTaskSwitchContext+0xc8>)
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	4a09      	ldr	r2, [pc, #36]	@ (800ae7c <vTaskSwitchContext+0xc0>)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae5c:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <vTaskSwitchContext+0xc8>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3354      	adds	r3, #84	@ 0x54
 800ae62:	4a09      	ldr	r2, [pc, #36]	@ (800ae88 <vTaskSwitchContext+0xcc>)
 800ae64:	6013      	str	r3, [r2, #0]
}
 800ae66:	bf00      	nop
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	200020bc 	.word	0x200020bc
 800ae78:	200020a8 	.word	0x200020a8
 800ae7c:	2000209c 	.word	0x2000209c
 800ae80:	20001bc4 	.word	0x20001bc4
 800ae84:	20001bc0 	.word	0x20001bc0
 800ae88:	2000001c 	.word	0x2000001c

0800ae8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10d      	bne.n	800aeb8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea0:	b672      	cpsid	i
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	b662      	cpsie	i
 800aeb0:	60fb      	str	r3, [r7, #12]
}
 800aeb2:	bf00      	nop
 800aeb4:	bf00      	nop
 800aeb6:	e7fd      	b.n	800aeb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeb8:	4b07      	ldr	r3, [pc, #28]	@ (800aed8 <vTaskPlaceOnEventList+0x4c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3318      	adds	r3, #24
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fe fac2 	bl	800944a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aec6:	2101      	movs	r1, #1
 800aec8:	6838      	ldr	r0, [r7, #0]
 800aeca:	f000 fba9 	bl	800b620 <prvAddCurrentTaskToDelayedList>
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20001bc0 	.word	0x20001bc0

0800aedc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10d      	bne.n	800af0a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	b672      	cpsid	i
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	b662      	cpsie	i
 800af02:	617b      	str	r3, [r7, #20]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af0a:	4b0a      	ldr	r3, [pc, #40]	@ (800af34 <vTaskPlaceOnEventListRestricted+0x58>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3318      	adds	r3, #24
 800af10:	4619      	mov	r1, r3
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7fe fa75 	bl	8009402 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800af1e:	f04f 33ff 	mov.w	r3, #4294967295
 800af22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	68b8      	ldr	r0, [r7, #8]
 800af28:	f000 fb7a 	bl	800b620 <prvAddCurrentTaskToDelayedList>
	}
 800af2c:	bf00      	nop
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	20001bc0 	.word	0x20001bc0

0800af38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10d      	bne.n	800af6a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af52:	b672      	cpsid	i
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	b662      	cpsie	i
 800af62:	60fb      	str	r3, [r7, #12]
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	e7fd      	b.n	800af66 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	3318      	adds	r3, #24
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe faa4 	bl	80094bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af74:	4b1d      	ldr	r3, [pc, #116]	@ (800afec <xTaskRemoveFromEventList+0xb4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d11d      	bne.n	800afb8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	3304      	adds	r3, #4
 800af80:	4618      	mov	r0, r3
 800af82:	f7fe fa9b 	bl	80094bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8a:	4b19      	ldr	r3, [pc, #100]	@ (800aff0 <xTaskRemoveFromEventList+0xb8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d903      	bls.n	800af9a <xTaskRemoveFromEventList+0x62>
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af96:	4a16      	ldr	r2, [pc, #88]	@ (800aff0 <xTaskRemoveFromEventList+0xb8>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4a13      	ldr	r2, [pc, #76]	@ (800aff4 <xTaskRemoveFromEventList+0xbc>)
 800afa8:	441a      	add	r2, r3
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3304      	adds	r3, #4
 800afae:	4619      	mov	r1, r3
 800afb0:	4610      	mov	r0, r2
 800afb2:	f7fe fa26 	bl	8009402 <vListInsertEnd>
 800afb6:	e005      	b.n	800afc4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	3318      	adds	r3, #24
 800afbc:	4619      	mov	r1, r3
 800afbe:	480e      	ldr	r0, [pc, #56]	@ (800aff8 <xTaskRemoveFromEventList+0xc0>)
 800afc0:	f7fe fa1f 	bl	8009402 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc8:	4b0c      	ldr	r3, [pc, #48]	@ (800affc <xTaskRemoveFromEventList+0xc4>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afce:	429a      	cmp	r2, r3
 800afd0:	d905      	bls.n	800afde <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afd2:	2301      	movs	r3, #1
 800afd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afd6:	4b0a      	ldr	r3, [pc, #40]	@ (800b000 <xTaskRemoveFromEventList+0xc8>)
 800afd8:	2201      	movs	r2, #1
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	e001      	b.n	800afe2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afe2:	697b      	ldr	r3, [r7, #20]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	200020bc 	.word	0x200020bc
 800aff0:	2000209c 	.word	0x2000209c
 800aff4:	20001bc4 	.word	0x20001bc4
 800aff8:	20002054 	.word	0x20002054
 800affc:	20001bc0 	.word	0x20001bc0
 800b000:	200020a8 	.word	0x200020a8

0800b004 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b00c:	4b06      	ldr	r3, [pc, #24]	@ (800b028 <vTaskInternalSetTimeOutState+0x24>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b014:	4b05      	ldr	r3, [pc, #20]	@ (800b02c <vTaskInternalSetTimeOutState+0x28>)
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	605a      	str	r2, [r3, #4]
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr
 800b028:	200020ac 	.word	0x200020ac
 800b02c:	20002098 	.word	0x20002098

0800b030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10d      	bne.n	800b05c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b044:	b672      	cpsid	i
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	b662      	cpsie	i
 800b054:	613b      	str	r3, [r7, #16]
}
 800b056:	bf00      	nop
 800b058:	bf00      	nop
 800b05a:	e7fd      	b.n	800b058 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10d      	bne.n	800b07e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b066:	b672      	cpsid	i
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	b662      	cpsie	i
 800b076:	60fb      	str	r3, [r7, #12]
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	e7fd      	b.n	800b07a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800b07e:	f000 ff9d 	bl	800bfbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b082:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f8 <xTaskCheckForTimeOut+0xc8>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09a:	d102      	bne.n	800b0a2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b09c:	2300      	movs	r3, #0
 800b09e:	61fb      	str	r3, [r7, #28]
 800b0a0:	e023      	b.n	800b0ea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	4b15      	ldr	r3, [pc, #84]	@ (800b0fc <xTaskCheckForTimeOut+0xcc>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d007      	beq.n	800b0be <xTaskCheckForTimeOut+0x8e>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	69ba      	ldr	r2, [r7, #24]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d302      	bcc.n	800b0be <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	61fb      	str	r3, [r7, #28]
 800b0bc:	e015      	b.n	800b0ea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d20b      	bcs.n	800b0e0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f7ff ff95 	bl	800b004 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61fb      	str	r3, [r7, #28]
 800b0de:	e004      	b.n	800b0ea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0ea:	f000 ff9d 	bl	800c028 <vPortExitCritical>

	return xReturn;
 800b0ee:	69fb      	ldr	r3, [r7, #28]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3720      	adds	r7, #32
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20002098 	.word	0x20002098
 800b0fc:	200020ac 	.word	0x200020ac

0800b100 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b104:	4b03      	ldr	r3, [pc, #12]	@ (800b114 <vTaskMissedYield+0x14>)
 800b106:	2201      	movs	r2, #1
 800b108:	601a      	str	r2, [r3, #0]
}
 800b10a:	bf00      	nop
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	200020a8 	.word	0x200020a8

0800b118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b120:	f000 f852 	bl	800b1c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b124:	4b06      	ldr	r3, [pc, #24]	@ (800b140 <prvIdleTask+0x28>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d9f9      	bls.n	800b120 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b12c:	4b05      	ldr	r3, [pc, #20]	@ (800b144 <prvIdleTask+0x2c>)
 800b12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b13c:	e7f0      	b.n	800b120 <prvIdleTask+0x8>
 800b13e:	bf00      	nop
 800b140:	20001bc4 	.word	0x20001bc4
 800b144:	e000ed04 	.word	0xe000ed04

0800b148 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b14e:	2300      	movs	r3, #0
 800b150:	607b      	str	r3, [r7, #4]
 800b152:	e00c      	b.n	800b16e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4a12      	ldr	r2, [pc, #72]	@ (800b1a8 <prvInitialiseTaskLists+0x60>)
 800b160:	4413      	add	r3, r2
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe f920 	bl	80093a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3301      	adds	r3, #1
 800b16c:	607b      	str	r3, [r7, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b37      	cmp	r3, #55	@ 0x37
 800b172:	d9ef      	bls.n	800b154 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b174:	480d      	ldr	r0, [pc, #52]	@ (800b1ac <prvInitialiseTaskLists+0x64>)
 800b176:	f7fe f917 	bl	80093a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b17a:	480d      	ldr	r0, [pc, #52]	@ (800b1b0 <prvInitialiseTaskLists+0x68>)
 800b17c:	f7fe f914 	bl	80093a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b180:	480c      	ldr	r0, [pc, #48]	@ (800b1b4 <prvInitialiseTaskLists+0x6c>)
 800b182:	f7fe f911 	bl	80093a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b186:	480c      	ldr	r0, [pc, #48]	@ (800b1b8 <prvInitialiseTaskLists+0x70>)
 800b188:	f7fe f90e 	bl	80093a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b18c:	480b      	ldr	r0, [pc, #44]	@ (800b1bc <prvInitialiseTaskLists+0x74>)
 800b18e:	f7fe f90b 	bl	80093a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b192:	4b0b      	ldr	r3, [pc, #44]	@ (800b1c0 <prvInitialiseTaskLists+0x78>)
 800b194:	4a05      	ldr	r2, [pc, #20]	@ (800b1ac <prvInitialiseTaskLists+0x64>)
 800b196:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b198:	4b0a      	ldr	r3, [pc, #40]	@ (800b1c4 <prvInitialiseTaskLists+0x7c>)
 800b19a:	4a05      	ldr	r2, [pc, #20]	@ (800b1b0 <prvInitialiseTaskLists+0x68>)
 800b19c:	601a      	str	r2, [r3, #0]
}
 800b19e:	bf00      	nop
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20001bc4 	.word	0x20001bc4
 800b1ac:	20002024 	.word	0x20002024
 800b1b0:	20002038 	.word	0x20002038
 800b1b4:	20002054 	.word	0x20002054
 800b1b8:	20002068 	.word	0x20002068
 800b1bc:	20002080 	.word	0x20002080
 800b1c0:	2000204c 	.word	0x2000204c
 800b1c4:	20002050 	.word	0x20002050

0800b1c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1ce:	e019      	b.n	800b204 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1d0:	f000 fef4 	bl	800bfbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1d4:	4b10      	ldr	r3, [pc, #64]	@ (800b218 <prvCheckTasksWaitingTermination+0x50>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fe f96b 	bl	80094bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b21c <prvCheckTasksWaitingTermination+0x54>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	4a0b      	ldr	r2, [pc, #44]	@ (800b21c <prvCheckTasksWaitingTermination+0x54>)
 800b1ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b220 <prvCheckTasksWaitingTermination+0x58>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	4a0a      	ldr	r2, [pc, #40]	@ (800b220 <prvCheckTasksWaitingTermination+0x58>)
 800b1f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1fa:	f000 ff15 	bl	800c028 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f810 	bl	800b224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b204:	4b06      	ldr	r3, [pc, #24]	@ (800b220 <prvCheckTasksWaitingTermination+0x58>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e1      	bne.n	800b1d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b20c:	bf00      	nop
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20002068 	.word	0x20002068
 800b21c:	20002094 	.word	0x20002094
 800b220:	2000207c 	.word	0x2000207c

0800b224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3354      	adds	r3, #84	@ 0x54
 800b230:	4618      	mov	r0, r3
 800b232:	f001 fc1f 	bl	800ca74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d108      	bne.n	800b252 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b244:	4618      	mov	r0, r3
 800b246:	f001 f8b5 	bl	800c3b4 <vPortFree>
				vPortFree( pxTCB );
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 f8b2 	bl	800c3b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b250:	e01b      	b.n	800b28a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d103      	bne.n	800b264 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f001 f8a9 	bl	800c3b4 <vPortFree>
	}
 800b262:	e012      	b.n	800b28a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d00d      	beq.n	800b28a <prvDeleteTCB+0x66>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b272:	b672      	cpsid	i
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	b662      	cpsie	i
 800b282:	60fb      	str	r3, [r7, #12]
}
 800b284:	bf00      	nop
 800b286:	bf00      	nop
 800b288:	e7fd      	b.n	800b286 <prvDeleteTCB+0x62>
	}
 800b28a:	bf00      	nop
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b29a:	4b0c      	ldr	r3, [pc, #48]	@ (800b2cc <prvResetNextTaskUnblockTime+0x38>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d104      	bne.n	800b2ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2ac:	e008      	b.n	800b2c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ae:	4b07      	ldr	r3, [pc, #28]	@ (800b2cc <prvResetNextTaskUnblockTime+0x38>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	4a04      	ldr	r2, [pc, #16]	@ (800b2d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b2be:	6013      	str	r3, [r2, #0]
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	2000204c 	.word	0x2000204c
 800b2d0:	200020b4 	.word	0x200020b4

0800b2d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b2da:	4b05      	ldr	r3, [pc, #20]	@ (800b2f0 <xTaskGetCurrentTaskHandle+0x1c>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b2e0:	687b      	ldr	r3, [r7, #4]
	}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	20001bc0 	.word	0x20001bc0

0800b2f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b328 <xTaskGetSchedulerState+0x34>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d102      	bne.n	800b308 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b302:	2301      	movs	r3, #1
 800b304:	607b      	str	r3, [r7, #4]
 800b306:	e008      	b.n	800b31a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b308:	4b08      	ldr	r3, [pc, #32]	@ (800b32c <xTaskGetSchedulerState+0x38>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b310:	2302      	movs	r3, #2
 800b312:	607b      	str	r3, [r7, #4]
 800b314:	e001      	b.n	800b31a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b316:	2300      	movs	r3, #0
 800b318:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b31a:	687b      	ldr	r3, [r7, #4]
	}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	200020a0 	.word	0x200020a0
 800b32c:	200020bc 	.word	0x200020bc

0800b330 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b33c:	2300      	movs	r3, #0
 800b33e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d051      	beq.n	800b3ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34a:	4b2a      	ldr	r3, [pc, #168]	@ (800b3f4 <xTaskPriorityInherit+0xc4>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	429a      	cmp	r2, r3
 800b352:	d241      	bcs.n	800b3d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	db06      	blt.n	800b36a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b35c:	4b25      	ldr	r3, [pc, #148]	@ (800b3f4 <xTaskPriorityInherit+0xc4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b362:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	6959      	ldr	r1, [r3, #20]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4a1f      	ldr	r2, [pc, #124]	@ (800b3f8 <xTaskPriorityInherit+0xc8>)
 800b37c:	4413      	add	r3, r2
 800b37e:	4299      	cmp	r1, r3
 800b380:	d122      	bne.n	800b3c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	3304      	adds	r3, #4
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe f898 	bl	80094bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b38c:	4b19      	ldr	r3, [pc, #100]	@ (800b3f4 <xTaskPriorityInherit+0xc4>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39a:	4b18      	ldr	r3, [pc, #96]	@ (800b3fc <xTaskPriorityInherit+0xcc>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d903      	bls.n	800b3aa <xTaskPriorityInherit+0x7a>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a6:	4a15      	ldr	r2, [pc, #84]	@ (800b3fc <xTaskPriorityInherit+0xcc>)
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4a10      	ldr	r2, [pc, #64]	@ (800b3f8 <xTaskPriorityInherit+0xc8>)
 800b3b8:	441a      	add	r2, r3
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7fe f81e 	bl	8009402 <vListInsertEnd>
 800b3c6:	e004      	b.n	800b3d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f4 <xTaskPriorityInherit+0xc4>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	e008      	b.n	800b3ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <xTaskPriorityInherit+0xc4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d201      	bcs.n	800b3ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
	}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20001bc0 	.word	0x20001bc0
 800b3f8:	20001bc4 	.word	0x20001bc4
 800b3fc:	2000209c 	.word	0x2000209c

0800b400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d05c      	beq.n	800b4d0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b416:	4b31      	ldr	r3, [pc, #196]	@ (800b4dc <xTaskPriorityDisinherit+0xdc>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d00d      	beq.n	800b43c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b424:	b672      	cpsid	i
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	b662      	cpsie	i
 800b434:	60fb      	str	r3, [r7, #12]
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	e7fd      	b.n	800b438 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10d      	bne.n	800b460 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b448:	b672      	cpsid	i
 800b44a:	f383 8811 	msr	BASEPRI, r3
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	b662      	cpsie	i
 800b458:	60bb      	str	r3, [r7, #8]
}
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	e7fd      	b.n	800b45c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b464:	1e5a      	subs	r2, r3, #1
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b472:	429a      	cmp	r2, r3
 800b474:	d02c      	beq.n	800b4d0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d128      	bne.n	800b4d0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3304      	adds	r3, #4
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe f81a 	bl	80094bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b494:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e0 <xTaskPriorityDisinherit+0xe0>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d903      	bls.n	800b4b0 <xTaskPriorityDisinherit+0xb0>
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ac:	4a0c      	ldr	r2, [pc, #48]	@ (800b4e0 <xTaskPriorityDisinherit+0xe0>)
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4a09      	ldr	r2, [pc, #36]	@ (800b4e4 <xTaskPriorityDisinherit+0xe4>)
 800b4be:	441a      	add	r2, r3
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	f7fd ff9b 	bl	8009402 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4d0:	697b      	ldr	r3, [r7, #20]
	}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3718      	adds	r7, #24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20001bc0 	.word	0x20001bc0
 800b4e0:	2000209c 	.word	0x2000209c
 800b4e4:	20001bc4 	.word	0x20001bc4

0800b4e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d070      	beq.n	800b5e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10d      	bne.n	800b524 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b50c:	b672      	cpsid	i
 800b50e:	f383 8811 	msr	BASEPRI, r3
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	f3bf 8f4f 	dsb	sy
 800b51a:	b662      	cpsie	i
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	bf00      	nop
 800b522:	e7fd      	b.n	800b520 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d902      	bls.n	800b534 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	e002      	b.n	800b53a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b538:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53e:	69fa      	ldr	r2, [r7, #28]
 800b540:	429a      	cmp	r2, r3
 800b542:	d04e      	beq.n	800b5e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d149      	bne.n	800b5e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b54e:	4b27      	ldr	r3, [pc, #156]	@ (800b5ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	429a      	cmp	r2, r3
 800b556:	d10d      	bne.n	800b574 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55c:	b672      	cpsid	i
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	b662      	cpsie	i
 800b56c:	60bb      	str	r3, [r7, #8]
}
 800b56e:	bf00      	nop
 800b570:	bf00      	nop
 800b572:	e7fd      	b.n	800b570 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b578:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	69fa      	ldr	r2, [r7, #28]
 800b57e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	2b00      	cmp	r3, #0
 800b586:	db04      	blt.n	800b592 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	6959      	ldr	r1, [r3, #20]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4a13      	ldr	r2, [pc, #76]	@ (800b5f0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b5a2:	4413      	add	r3, r2
 800b5a4:	4299      	cmp	r1, r3
 800b5a6:	d11c      	bne.n	800b5e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fd ff85 	bl	80094bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d903      	bls.n	800b5c6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b5f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4a07      	ldr	r2, [pc, #28]	@ (800b5f0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b5d4:	441a      	add	r2, r3
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4610      	mov	r0, r2
 800b5de:	f7fd ff10 	bl	8009402 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5e2:	bf00      	nop
 800b5e4:	3720      	adds	r7, #32
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20001bc0 	.word	0x20001bc0
 800b5f0:	20001bc4 	.word	0x20001bc4
 800b5f4:	2000209c 	.word	0x2000209c

0800b5f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b5fc:	4b07      	ldr	r3, [pc, #28]	@ (800b61c <pvTaskIncrementMutexHeldCount+0x24>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b604:	4b05      	ldr	r3, [pc, #20]	@ (800b61c <pvTaskIncrementMutexHeldCount+0x24>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b60a:	3201      	adds	r2, #1
 800b60c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b60e:	4b03      	ldr	r3, [pc, #12]	@ (800b61c <pvTaskIncrementMutexHeldCount+0x24>)
 800b610:	681b      	ldr	r3, [r3, #0]
	}
 800b612:	4618      	mov	r0, r3
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	20001bc0 	.word	0x20001bc0

0800b620 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b62a:	4b21      	ldr	r3, [pc, #132]	@ (800b6b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b630:	4b20      	ldr	r3, [pc, #128]	@ (800b6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3304      	adds	r3, #4
 800b636:	4618      	mov	r0, r3
 800b638:	f7fd ff40 	bl	80094bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b642:	d10a      	bne.n	800b65a <prvAddCurrentTaskToDelayedList+0x3a>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d007      	beq.n	800b65a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b64a:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3304      	adds	r3, #4
 800b650:	4619      	mov	r1, r3
 800b652:	4819      	ldr	r0, [pc, #100]	@ (800b6b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b654:	f7fd fed5 	bl	8009402 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b658:	e026      	b.n	800b6a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4413      	add	r3, r2
 800b660:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b662:	4b14      	ldr	r3, [pc, #80]	@ (800b6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d209      	bcs.n	800b686 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b672:	4b12      	ldr	r3, [pc, #72]	@ (800b6bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3304      	adds	r3, #4
 800b67c:	4619      	mov	r1, r3
 800b67e:	4610      	mov	r0, r2
 800b680:	f7fd fee3 	bl	800944a <vListInsert>
}
 800b684:	e010      	b.n	800b6a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b686:	4b0e      	ldr	r3, [pc, #56]	@ (800b6c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3304      	adds	r3, #4
 800b690:	4619      	mov	r1, r3
 800b692:	4610      	mov	r0, r2
 800b694:	f7fd fed9 	bl	800944a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b698:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d202      	bcs.n	800b6a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6a2:	4a08      	ldr	r2, [pc, #32]	@ (800b6c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	6013      	str	r3, [r2, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	20002098 	.word	0x20002098
 800b6b4:	20001bc0 	.word	0x20001bc0
 800b6b8:	20002080 	.word	0x20002080
 800b6bc:	20002050 	.word	0x20002050
 800b6c0:	2000204c 	.word	0x2000204c
 800b6c4:	200020b4 	.word	0x200020b4

0800b6c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	@ 0x28
 800b6cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b6d2:	f000 fb21 	bl	800bd18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b6d6:	4b1e      	ldr	r3, [pc, #120]	@ (800b750 <xTimerCreateTimerTask+0x88>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d021      	beq.n	800b722 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b6e6:	1d3a      	adds	r2, r7, #4
 800b6e8:	f107 0108 	add.w	r1, r7, #8
 800b6ec:	f107 030c 	add.w	r3, r7, #12
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fd fe3f 	bl	8009374 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	9202      	str	r2, [sp, #8]
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	2302      	movs	r3, #2
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	2300      	movs	r3, #0
 800b706:	460a      	mov	r2, r1
 800b708:	4912      	ldr	r1, [pc, #72]	@ (800b754 <xTimerCreateTimerTask+0x8c>)
 800b70a:	4813      	ldr	r0, [pc, #76]	@ (800b758 <xTimerCreateTimerTask+0x90>)
 800b70c:	f7fe fed2 	bl	800a4b4 <xTaskCreateStatic>
 800b710:	4603      	mov	r3, r0
 800b712:	4a12      	ldr	r2, [pc, #72]	@ (800b75c <xTimerCreateTimerTask+0x94>)
 800b714:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b716:	4b11      	ldr	r3, [pc, #68]	@ (800b75c <xTimerCreateTimerTask+0x94>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10d      	bne.n	800b744 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72c:	b672      	cpsid	i
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	b662      	cpsie	i
 800b73c:	613b      	str	r3, [r7, #16]
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	e7fd      	b.n	800b740 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b744:	697b      	ldr	r3, [r7, #20]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	200020f0 	.word	0x200020f0
 800b754:	0800dab8 	.word	0x0800dab8
 800b758:	0800b8a1 	.word	0x0800b8a1
 800b75c:	200020f4 	.word	0x200020f4

0800b760 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08a      	sub	sp, #40	@ 0x28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b76e:	2300      	movs	r3, #0
 800b770:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10d      	bne.n	800b794 <xTimerGenericCommand+0x34>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77c:	b672      	cpsid	i
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	b662      	cpsie	i
 800b78c:	623b      	str	r3, [r7, #32]
}
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	e7fd      	b.n	800b790 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b794:	4b19      	ldr	r3, [pc, #100]	@ (800b7fc <xTimerGenericCommand+0x9c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d02a      	beq.n	800b7f2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	2b05      	cmp	r3, #5
 800b7ac:	dc18      	bgt.n	800b7e0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7ae:	f7ff fda1 	bl	800b2f4 <xTaskGetSchedulerState>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d109      	bne.n	800b7cc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7b8:	4b10      	ldr	r3, [pc, #64]	@ (800b7fc <xTimerGenericCommand+0x9c>)
 800b7ba:	6818      	ldr	r0, [r3, #0]
 800b7bc:	f107 0110 	add.w	r1, r7, #16
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7c4:	f7fe f8ba 	bl	800993c <xQueueGenericSend>
 800b7c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7ca:	e012      	b.n	800b7f2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b7fc <xTimerGenericCommand+0x9c>)
 800b7ce:	6818      	ldr	r0, [r3, #0]
 800b7d0:	f107 0110 	add.w	r1, r7, #16
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f7fe f8b0 	bl	800993c <xQueueGenericSend>
 800b7dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7de:	e008      	b.n	800b7f2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7e0:	4b06      	ldr	r3, [pc, #24]	@ (800b7fc <xTimerGenericCommand+0x9c>)
 800b7e2:	6818      	ldr	r0, [r3, #0]
 800b7e4:	f107 0110 	add.w	r1, r7, #16
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	f7fe f9b0 	bl	8009b50 <xQueueGenericSendFromISR>
 800b7f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3728      	adds	r7, #40	@ 0x28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	200020f0 	.word	0x200020f0

0800b800 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af02      	add	r7, sp, #8
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b80a:	4b24      	ldr	r3, [pc, #144]	@ (800b89c <prvProcessExpiredTimer+0x9c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	3304      	adds	r3, #4
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fd fe4f 	bl	80094bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b824:	f003 0304 	and.w	r3, r3, #4
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d025      	beq.n	800b878 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	699a      	ldr	r2, [r3, #24]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	18d1      	adds	r1, r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	6978      	ldr	r0, [r7, #20]
 800b83a:	f000 f8d7 	bl	800b9ec <prvInsertTimerInActiveList>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d022      	beq.n	800b88a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b844:	2300      	movs	r3, #0
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	2300      	movs	r3, #0
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	2100      	movs	r1, #0
 800b84e:	6978      	ldr	r0, [r7, #20]
 800b850:	f7ff ff86 	bl	800b760 <xTimerGenericCommand>
 800b854:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d116      	bne.n	800b88a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b860:	b672      	cpsid	i
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	b662      	cpsie	i
 800b870:	60fb      	str	r3, [r7, #12]
}
 800b872:	bf00      	nop
 800b874:	bf00      	nop
 800b876:	e7fd      	b.n	800b874 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b87e:	f023 0301 	bic.w	r3, r3, #1
 800b882:	b2da      	uxtb	r2, r3
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	6978      	ldr	r0, [r7, #20]
 800b890:	4798      	blx	r3
}
 800b892:	bf00      	nop
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	200020e8 	.word	0x200020e8

0800b8a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8a8:	f107 0308 	add.w	r3, r7, #8
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 f859 	bl	800b964 <prvGetNextExpireTime>
 800b8b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 f805 	bl	800b8c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8be:	f000 f8d7 	bl	800ba70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8c2:	bf00      	nop
 800b8c4:	e7f0      	b.n	800b8a8 <prvTimerTask+0x8>
	...

0800b8c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8d2:	f7ff f8e7 	bl	800aaa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8d6:	f107 0308 	add.w	r3, r7, #8
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 f866 	bl	800b9ac <prvSampleTimeNow>
 800b8e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d130      	bne.n	800b94a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10a      	bne.n	800b904 <prvProcessTimerOrBlockTask+0x3c>
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d806      	bhi.n	800b904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8f6:	f7ff f8e3 	bl	800aac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff ff7f 	bl	800b800 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b902:	e024      	b.n	800b94e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d008      	beq.n	800b91c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b90a:	4b13      	ldr	r3, [pc, #76]	@ (800b958 <prvProcessTimerOrBlockTask+0x90>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <prvProcessTimerOrBlockTask+0x50>
 800b914:	2301      	movs	r3, #1
 800b916:	e000      	b.n	800b91a <prvProcessTimerOrBlockTask+0x52>
 800b918:	2300      	movs	r3, #0
 800b91a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b91c:	4b0f      	ldr	r3, [pc, #60]	@ (800b95c <prvProcessTimerOrBlockTask+0x94>)
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	4619      	mov	r1, r3
 800b92a:	f7fe fd8f 	bl	800a44c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b92e:	f7ff f8c7 	bl	800aac0 <xTaskResumeAll>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b938:	4b09      	ldr	r3, [pc, #36]	@ (800b960 <prvProcessTimerOrBlockTask+0x98>)
 800b93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	f3bf 8f6f 	isb	sy
}
 800b948:	e001      	b.n	800b94e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b94a:	f7ff f8b9 	bl	800aac0 <xTaskResumeAll>
}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	200020ec 	.word	0x200020ec
 800b95c:	200020f0 	.word	0x200020f0
 800b960:	e000ed04 	.word	0xe000ed04

0800b964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b96c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9a8 <prvGetNextExpireTime+0x44>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <prvGetNextExpireTime+0x16>
 800b976:	2201      	movs	r2, #1
 800b978:	e000      	b.n	800b97c <prvGetNextExpireTime+0x18>
 800b97a:	2200      	movs	r2, #0
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d105      	bne.n	800b994 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b988:	4b07      	ldr	r3, [pc, #28]	@ (800b9a8 <prvGetNextExpireTime+0x44>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	e001      	b.n	800b998 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b998:	68fb      	ldr	r3, [r7, #12]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3714      	adds	r7, #20
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	200020e8 	.word	0x200020e8

0800b9ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9b4:	f7ff f924 	bl	800ac00 <xTaskGetTickCount>
 800b9b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e8 <prvSampleTimeNow+0x3c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d205      	bcs.n	800b9d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9c4:	f000 f940 	bl	800bc48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	e002      	b.n	800b9d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9d6:	4a04      	ldr	r2, [pc, #16]	@ (800b9e8 <prvSampleTimeNow+0x3c>)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	200020f8 	.word	0x200020f8

0800b9ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d812      	bhi.n	800ba38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	1ad2      	subs	r2, r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d302      	bcc.n	800ba26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba20:	2301      	movs	r3, #1
 800ba22:	617b      	str	r3, [r7, #20]
 800ba24:	e01b      	b.n	800ba5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba26:	4b10      	ldr	r3, [pc, #64]	@ (800ba68 <prvInsertTimerInActiveList+0x7c>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7fd fd0a 	bl	800944a <vListInsert>
 800ba36:	e012      	b.n	800ba5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d206      	bcs.n	800ba4e <prvInsertTimerInActiveList+0x62>
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d302      	bcc.n	800ba4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	e007      	b.n	800ba5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba4e:	4b07      	ldr	r3, [pc, #28]	@ (800ba6c <prvInsertTimerInActiveList+0x80>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4619      	mov	r1, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	f7fd fcf6 	bl	800944a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba5e:	697b      	ldr	r3, [r7, #20]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	200020ec 	.word	0x200020ec
 800ba6c:	200020e8 	.word	0x200020e8

0800ba70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08e      	sub	sp, #56	@ 0x38
 800ba74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba76:	e0d4      	b.n	800bc22 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da1b      	bge.n	800bab6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ba7e:	1d3b      	adds	r3, r7, #4
 800ba80:	3304      	adds	r3, #4
 800ba82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ba84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10d      	bne.n	800baa6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8e:	b672      	cpsid	i
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	b662      	cpsie	i
 800ba9e:	61fb      	str	r3, [r7, #28]
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	e7fd      	b.n	800baa2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800baa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baac:	6850      	ldr	r0, [r2, #4]
 800baae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bab0:	6892      	ldr	r2, [r2, #8]
 800bab2:	4611      	mov	r1, r2
 800bab4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f2c0 80b2 	blt.w	800bc22 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d004      	beq.n	800bad4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bacc:	3304      	adds	r3, #4
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fd fcf4 	bl	80094bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bad4:	463b      	mov	r3, r7
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7ff ff68 	bl	800b9ac <prvSampleTimeNow>
 800badc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b09      	cmp	r3, #9
 800bae2:	f200 809b 	bhi.w	800bc1c <prvProcessReceivedCommands+0x1ac>
 800bae6:	a201      	add	r2, pc, #4	@ (adr r2, 800baec <prvProcessReceivedCommands+0x7c>)
 800bae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baec:	0800bb15 	.word	0x0800bb15
 800baf0:	0800bb15 	.word	0x0800bb15
 800baf4:	0800bb15 	.word	0x0800bb15
 800baf8:	0800bb8f 	.word	0x0800bb8f
 800bafc:	0800bba3 	.word	0x0800bba3
 800bb00:	0800bbf3 	.word	0x0800bbf3
 800bb04:	0800bb15 	.word	0x0800bb15
 800bb08:	0800bb15 	.word	0x0800bb15
 800bb0c:	0800bb8f 	.word	0x0800bb8f
 800bb10:	0800bba3 	.word	0x0800bba3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb1a:	f043 0301 	orr.w	r3, r3, #1
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	18d1      	adds	r1, r2, r3
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb34:	f7ff ff5a 	bl	800b9ec <prvInsertTimerInActiveList>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d070      	beq.n	800bc20 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d065      	beq.n	800bc20 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	441a      	add	r2, r3
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	2300      	movs	r3, #0
 800bb62:	2100      	movs	r1, #0
 800bb64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb66:	f7ff fdfb 	bl	800b760 <xTimerGenericCommand>
 800bb6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d156      	bne.n	800bc20 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	b672      	cpsid	i
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	b662      	cpsie	i
 800bb86:	61bb      	str	r3, [r7, #24]
}
 800bb88:	bf00      	nop
 800bb8a:	bf00      	nop
 800bb8c:	e7fd      	b.n	800bb8a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb94:	f023 0301 	bic.w	r3, r3, #1
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bba0:	e03f      	b.n	800bc22 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bba8:	f043 0301 	orr.w	r3, r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10d      	bne.n	800bbde <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	b672      	cpsid	i
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	b662      	cpsie	i
 800bbd6:	617b      	str	r3, [r7, #20]
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	e7fd      	b.n	800bbda <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe0:	699a      	ldr	r2, [r3, #24]
 800bbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe4:	18d1      	adds	r1, r2, r3
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbec:	f7ff fefe 	bl	800b9ec <prvInsertTimerInActiveList>
					break;
 800bbf0:	e017      	b.n	800bc22 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d103      	bne.n	800bc08 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800bc00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc02:	f000 fbd7 	bl	800c3b4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc06:	e00c      	b.n	800bc22 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc0e:	f023 0301 	bic.w	r3, r3, #1
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc1a:	e002      	b.n	800bc22 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800bc1c:	bf00      	nop
 800bc1e:	e000      	b.n	800bc22 <prvProcessReceivedCommands+0x1b2>
					break;
 800bc20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc22:	4b08      	ldr	r3, [pc, #32]	@ (800bc44 <prvProcessReceivedCommands+0x1d4>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	1d39      	adds	r1, r7, #4
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fe f834 	bl	8009c98 <xQueueReceive>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f47f af20 	bne.w	800ba78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	3730      	adds	r7, #48	@ 0x30
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	200020f0 	.word	0x200020f0

0800bc48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc4e:	e04b      	b.n	800bce8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc50:	4b2f      	ldr	r3, [pc, #188]	@ (800bd10 <prvSwitchTimerLists+0xc8>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc5a:	4b2d      	ldr	r3, [pc, #180]	@ (800bd10 <prvSwitchTimerLists+0xc8>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fd fc27 	bl	80094bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc7c:	f003 0304 	and.w	r3, r3, #4
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d031      	beq.n	800bce8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d90e      	bls.n	800bcb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bca2:	4b1b      	ldr	r3, [pc, #108]	@ (800bd10 <prvSwitchTimerLists+0xc8>)
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4610      	mov	r0, r2
 800bcae:	f7fd fbcc 	bl	800944a <vListInsert>
 800bcb2:	e019      	b.n	800bce8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff fd4e 	bl	800b760 <xTimerGenericCommand>
 800bcc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10d      	bne.n	800bce8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd0:	b672      	cpsid	i
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	b662      	cpsie	i
 800bce0:	603b      	str	r3, [r7, #0]
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	e7fd      	b.n	800bce4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bce8:	4b09      	ldr	r3, [pc, #36]	@ (800bd10 <prvSwitchTimerLists+0xc8>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1ae      	bne.n	800bc50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bcf2:	4b07      	ldr	r3, [pc, #28]	@ (800bd10 <prvSwitchTimerLists+0xc8>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bcf8:	4b06      	ldr	r3, [pc, #24]	@ (800bd14 <prvSwitchTimerLists+0xcc>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a04      	ldr	r2, [pc, #16]	@ (800bd10 <prvSwitchTimerLists+0xc8>)
 800bcfe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd00:	4a04      	ldr	r2, [pc, #16]	@ (800bd14 <prvSwitchTimerLists+0xcc>)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	6013      	str	r3, [r2, #0]
}
 800bd06:	bf00      	nop
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	200020e8 	.word	0x200020e8
 800bd14:	200020ec 	.word	0x200020ec

0800bd18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd1e:	f000 f94d 	bl	800bfbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd22:	4b15      	ldr	r3, [pc, #84]	@ (800bd78 <prvCheckForValidListAndQueue+0x60>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d120      	bne.n	800bd6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd2a:	4814      	ldr	r0, [pc, #80]	@ (800bd7c <prvCheckForValidListAndQueue+0x64>)
 800bd2c:	f7fd fb3c 	bl	80093a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd30:	4813      	ldr	r0, [pc, #76]	@ (800bd80 <prvCheckForValidListAndQueue+0x68>)
 800bd32:	f7fd fb39 	bl	80093a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd36:	4b13      	ldr	r3, [pc, #76]	@ (800bd84 <prvCheckForValidListAndQueue+0x6c>)
 800bd38:	4a10      	ldr	r2, [pc, #64]	@ (800bd7c <prvCheckForValidListAndQueue+0x64>)
 800bd3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd3c:	4b12      	ldr	r3, [pc, #72]	@ (800bd88 <prvCheckForValidListAndQueue+0x70>)
 800bd3e:	4a10      	ldr	r2, [pc, #64]	@ (800bd80 <prvCheckForValidListAndQueue+0x68>)
 800bd40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd42:	2300      	movs	r3, #0
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	4b11      	ldr	r3, [pc, #68]	@ (800bd8c <prvCheckForValidListAndQueue+0x74>)
 800bd48:	4a11      	ldr	r2, [pc, #68]	@ (800bd90 <prvCheckForValidListAndQueue+0x78>)
 800bd4a:	2110      	movs	r1, #16
 800bd4c:	200a      	movs	r0, #10
 800bd4e:	f7fd fc4b 	bl	80095e8 <xQueueGenericCreateStatic>
 800bd52:	4603      	mov	r3, r0
 800bd54:	4a08      	ldr	r2, [pc, #32]	@ (800bd78 <prvCheckForValidListAndQueue+0x60>)
 800bd56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd58:	4b07      	ldr	r3, [pc, #28]	@ (800bd78 <prvCheckForValidListAndQueue+0x60>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d005      	beq.n	800bd6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd60:	4b05      	ldr	r3, [pc, #20]	@ (800bd78 <prvCheckForValidListAndQueue+0x60>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	490b      	ldr	r1, [pc, #44]	@ (800bd94 <prvCheckForValidListAndQueue+0x7c>)
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fe fb46 	bl	800a3f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd6c:	f000 f95c 	bl	800c028 <vPortExitCritical>
}
 800bd70:	bf00      	nop
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	200020f0 	.word	0x200020f0
 800bd7c:	200020c0 	.word	0x200020c0
 800bd80:	200020d4 	.word	0x200020d4
 800bd84:	200020e8 	.word	0x200020e8
 800bd88:	200020ec 	.word	0x200020ec
 800bd8c:	2000219c 	.word	0x2000219c
 800bd90:	200020fc 	.word	0x200020fc
 800bd94:	0800dac0 	.word	0x0800dac0

0800bd98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3b04      	subs	r3, #4
 800bda8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bdb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f023 0201 	bic.w	r2, r3, #1
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3b04      	subs	r3, #4
 800bdc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdc8:	4a0c      	ldr	r2, [pc, #48]	@ (800bdfc <pxPortInitialiseStack+0x64>)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3b14      	subs	r3, #20
 800bdd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3b04      	subs	r3, #4
 800bdde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f06f 0202 	mvn.w	r2, #2
 800bde6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3b20      	subs	r3, #32
 800bdec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdee:	68fb      	ldr	r3, [r7, #12]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	0800be01 	.word	0x0800be01

0800be00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be0a:	4b15      	ldr	r3, [pc, #84]	@ (800be60 <prvTaskExitError+0x60>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be12:	d00d      	beq.n	800be30 <prvTaskExitError+0x30>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be18:	b672      	cpsid	i
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	b662      	cpsie	i
 800be28:	60fb      	str	r3, [r7, #12]
}
 800be2a:	bf00      	nop
 800be2c:	bf00      	nop
 800be2e:	e7fd      	b.n	800be2c <prvTaskExitError+0x2c>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be34:	b672      	cpsid	i
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	b662      	cpsie	i
 800be44:	60bb      	str	r3, [r7, #8]
}
 800be46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be48:	bf00      	nop
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0fc      	beq.n	800be4a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be50:	bf00      	nop
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	2000000c 	.word	0x2000000c
	...

0800be70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be70:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <pxCurrentTCBConst2>)
 800be72:	6819      	ldr	r1, [r3, #0]
 800be74:	6808      	ldr	r0, [r1, #0]
 800be76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7a:	f380 8809 	msr	PSP, r0
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8811 	msr	BASEPRI, r0
 800be8a:	4770      	bx	lr
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst2>:
 800be90:	20001bc0 	.word	0x20001bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be98:	4808      	ldr	r0, [pc, #32]	@ (800bebc <prvPortStartFirstTask+0x24>)
 800be9a:	6800      	ldr	r0, [r0, #0]
 800be9c:	6800      	ldr	r0, [r0, #0]
 800be9e:	f380 8808 	msr	MSP, r0
 800bea2:	f04f 0000 	mov.w	r0, #0
 800bea6:	f380 8814 	msr	CONTROL, r0
 800beaa:	b662      	cpsie	i
 800beac:	b661      	cpsie	f
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	df00      	svc	0
 800beb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beba:	bf00      	nop
 800bebc:	e000ed08 	.word	0xe000ed08

0800bec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bec6:	4b37      	ldr	r3, [pc, #220]	@ (800bfa4 <xPortStartScheduler+0xe4>)
 800bec8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	22ff      	movs	r2, #255	@ 0xff
 800bed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	4b2f      	ldr	r3, [pc, #188]	@ (800bfa8 <xPortStartScheduler+0xe8>)
 800beec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800beee:	4b2f      	ldr	r3, [pc, #188]	@ (800bfac <xPortStartScheduler+0xec>)
 800bef0:	2207      	movs	r2, #7
 800bef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bef4:	e009      	b.n	800bf0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bef6:	4b2d      	ldr	r3, [pc, #180]	@ (800bfac <xPortStartScheduler+0xec>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3b01      	subs	r3, #1
 800befc:	4a2b      	ldr	r2, [pc, #172]	@ (800bfac <xPortStartScheduler+0xec>)
 800befe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf00:	78fb      	ldrb	r3, [r7, #3]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf0a:	78fb      	ldrb	r3, [r7, #3]
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf12:	2b80      	cmp	r3, #128	@ 0x80
 800bf14:	d0ef      	beq.n	800bef6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf16:	4b25      	ldr	r3, [pc, #148]	@ (800bfac <xPortStartScheduler+0xec>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f1c3 0307 	rsb	r3, r3, #7
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	d00d      	beq.n	800bf3e <xPortStartScheduler+0x7e>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf26:	b672      	cpsid	i
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	b662      	cpsie	i
 800bf36:	60bb      	str	r3, [r7, #8]
}
 800bf38:	bf00      	nop
 800bf3a:	bf00      	nop
 800bf3c:	e7fd      	b.n	800bf3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf3e:	4b1b      	ldr	r3, [pc, #108]	@ (800bfac <xPortStartScheduler+0xec>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	021b      	lsls	r3, r3, #8
 800bf44:	4a19      	ldr	r2, [pc, #100]	@ (800bfac <xPortStartScheduler+0xec>)
 800bf46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf48:	4b18      	ldr	r3, [pc, #96]	@ (800bfac <xPortStartScheduler+0xec>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf50:	4a16      	ldr	r2, [pc, #88]	@ (800bfac <xPortStartScheduler+0xec>)
 800bf52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf5c:	4b14      	ldr	r3, [pc, #80]	@ (800bfb0 <xPortStartScheduler+0xf0>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a13      	ldr	r2, [pc, #76]	@ (800bfb0 <xPortStartScheduler+0xf0>)
 800bf62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf68:	4b11      	ldr	r3, [pc, #68]	@ (800bfb0 <xPortStartScheduler+0xf0>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a10      	ldr	r2, [pc, #64]	@ (800bfb0 <xPortStartScheduler+0xf0>)
 800bf6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bf72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf74:	f000 f8dc 	bl	800c130 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf78:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb4 <xPortStartScheduler+0xf4>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf7e:	f000 f8fb 	bl	800c178 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf82:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb8 <xPortStartScheduler+0xf8>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a0c      	ldr	r2, [pc, #48]	@ (800bfb8 <xPortStartScheduler+0xf8>)
 800bf88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bf8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf8e:	f7ff ff83 	bl	800be98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf92:	f7fe ff13 	bl	800adbc <vTaskSwitchContext>
	prvTaskExitError();
 800bf96:	f7ff ff33 	bl	800be00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	e000e400 	.word	0xe000e400
 800bfa8:	200021ec 	.word	0x200021ec
 800bfac:	200021f0 	.word	0x200021f0
 800bfb0:	e000ed20 	.word	0xe000ed20
 800bfb4:	2000000c 	.word	0x2000000c
 800bfb8:	e000ef34 	.word	0xe000ef34

0800bfbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc6:	b672      	cpsid	i
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	b662      	cpsie	i
 800bfd6:	607b      	str	r3, [r7, #4]
}
 800bfd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bfda:	4b11      	ldr	r3, [pc, #68]	@ (800c020 <vPortEnterCritical+0x64>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	4a0f      	ldr	r2, [pc, #60]	@ (800c020 <vPortEnterCritical+0x64>)
 800bfe2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bfe4:	4b0e      	ldr	r3, [pc, #56]	@ (800c020 <vPortEnterCritical+0x64>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d112      	bne.n	800c012 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfec:	4b0d      	ldr	r3, [pc, #52]	@ (800c024 <vPortEnterCritical+0x68>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00d      	beq.n	800c012 <vPortEnterCritical+0x56>
	__asm volatile
 800bff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffa:	b672      	cpsid	i
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	b662      	cpsie	i
 800c00a:	603b      	str	r3, [r7, #0]
}
 800c00c:	bf00      	nop
 800c00e:	bf00      	nop
 800c010:	e7fd      	b.n	800c00e <vPortEnterCritical+0x52>
	}
}
 800c012:	bf00      	nop
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	2000000c 	.word	0x2000000c
 800c024:	e000ed04 	.word	0xe000ed04

0800c028 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c02e:	4b13      	ldr	r3, [pc, #76]	@ (800c07c <vPortExitCritical+0x54>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10d      	bne.n	800c052 <vPortExitCritical+0x2a>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	b672      	cpsid	i
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	b662      	cpsie	i
 800c04a:	607b      	str	r3, [r7, #4]
}
 800c04c:	bf00      	nop
 800c04e:	bf00      	nop
 800c050:	e7fd      	b.n	800c04e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c052:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <vPortExitCritical+0x54>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3b01      	subs	r3, #1
 800c058:	4a08      	ldr	r2, [pc, #32]	@ (800c07c <vPortExitCritical+0x54>)
 800c05a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c05c:	4b07      	ldr	r3, [pc, #28]	@ (800c07c <vPortExitCritical+0x54>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d105      	bne.n	800c070 <vPortExitCritical+0x48>
 800c064:	2300      	movs	r3, #0
 800c066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	f383 8811 	msr	BASEPRI, r3
}
 800c06e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	2000000c 	.word	0x2000000c

0800c080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c080:	f3ef 8009 	mrs	r0, PSP
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	4b15      	ldr	r3, [pc, #84]	@ (800c0e0 <pxCurrentTCBConst>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	f01e 0f10 	tst.w	lr, #16
 800c090:	bf08      	it	eq
 800c092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09a:	6010      	str	r0, [r2, #0]
 800c09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0a4:	b672      	cpsid	i
 800c0a6:	f380 8811 	msr	BASEPRI, r0
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	b662      	cpsie	i
 800c0b4:	f7fe fe82 	bl	800adbc <vTaskSwitchContext>
 800c0b8:	f04f 0000 	mov.w	r0, #0
 800c0bc:	f380 8811 	msr	BASEPRI, r0
 800c0c0:	bc09      	pop	{r0, r3}
 800c0c2:	6819      	ldr	r1, [r3, #0]
 800c0c4:	6808      	ldr	r0, [r1, #0]
 800c0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ca:	f01e 0f10 	tst.w	lr, #16
 800c0ce:	bf08      	it	eq
 800c0d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0d4:	f380 8809 	msr	PSP, r0
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop

0800c0e0 <pxCurrentTCBConst>:
 800c0e0:	20001bc0 	.word	0x20001bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop

0800c0e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	b672      	cpsid	i
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	b662      	cpsie	i
 800c102:	607b      	str	r3, [r7, #4]
}
 800c104:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c106:	f7fe fd9d 	bl	800ac44 <xTaskIncrementTick>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d003      	beq.n	800c118 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c110:	4b06      	ldr	r3, [pc, #24]	@ (800c12c <SysTick_Handler+0x44>)
 800c112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	2300      	movs	r3, #0
 800c11a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	f383 8811 	msr	BASEPRI, r3
}
 800c122:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c124:	bf00      	nop
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c134:	4b0b      	ldr	r3, [pc, #44]	@ (800c164 <vPortSetupTimerInterrupt+0x34>)
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c13a:	4b0b      	ldr	r3, [pc, #44]	@ (800c168 <vPortSetupTimerInterrupt+0x38>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c140:	4b0a      	ldr	r3, [pc, #40]	@ (800c16c <vPortSetupTimerInterrupt+0x3c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a0a      	ldr	r2, [pc, #40]	@ (800c170 <vPortSetupTimerInterrupt+0x40>)
 800c146:	fba2 2303 	umull	r2, r3, r2, r3
 800c14a:	099b      	lsrs	r3, r3, #6
 800c14c:	4a09      	ldr	r2, [pc, #36]	@ (800c174 <vPortSetupTimerInterrupt+0x44>)
 800c14e:	3b01      	subs	r3, #1
 800c150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c152:	4b04      	ldr	r3, [pc, #16]	@ (800c164 <vPortSetupTimerInterrupt+0x34>)
 800c154:	2207      	movs	r2, #7
 800c156:	601a      	str	r2, [r3, #0]
}
 800c158:	bf00      	nop
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	e000e010 	.word	0xe000e010
 800c168:	e000e018 	.word	0xe000e018
 800c16c:	20000000 	.word	0x20000000
 800c170:	10624dd3 	.word	0x10624dd3
 800c174:	e000e014 	.word	0xe000e014

0800c178 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c178:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c188 <vPortEnableVFP+0x10>
 800c17c:	6801      	ldr	r1, [r0, #0]
 800c17e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c182:	6001      	str	r1, [r0, #0]
 800c184:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c186:	bf00      	nop
 800c188:	e000ed88 	.word	0xe000ed88

0800c18c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c192:	f3ef 8305 	mrs	r3, IPSR
 800c196:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2b0f      	cmp	r3, #15
 800c19c:	d917      	bls.n	800c1ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c19e:	4a1a      	ldr	r2, [pc, #104]	@ (800c208 <vPortValidateInterruptPriority+0x7c>)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1a8:	4b18      	ldr	r3, [pc, #96]	@ (800c20c <vPortValidateInterruptPriority+0x80>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	7afa      	ldrb	r2, [r7, #11]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d20d      	bcs.n	800c1ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b6:	b672      	cpsid	i
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	b662      	cpsie	i
 800c1c6:	607b      	str	r3, [r7, #4]
}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	e7fd      	b.n	800c1ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1ce:	4b10      	ldr	r3, [pc, #64]	@ (800c210 <vPortValidateInterruptPriority+0x84>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c214 <vPortValidateInterruptPriority+0x88>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d90d      	bls.n	800c1fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e2:	b672      	cpsid	i
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	b662      	cpsie	i
 800c1f2:	603b      	str	r3, [r7, #0]
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop
 800c1f8:	e7fd      	b.n	800c1f6 <vPortValidateInterruptPriority+0x6a>
	}
 800c1fa:	bf00      	nop
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	e000e3f0 	.word	0xe000e3f0
 800c20c:	200021ec 	.word	0x200021ec
 800c210:	e000ed0c 	.word	0xe000ed0c
 800c214:	200021f0 	.word	0x200021f0

0800c218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08a      	sub	sp, #40	@ 0x28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c220:	2300      	movs	r3, #0
 800c222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c224:	f7fe fc3e 	bl	800aaa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c228:	4b5d      	ldr	r3, [pc, #372]	@ (800c3a0 <pvPortMalloc+0x188>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c230:	f000 f920 	bl	800c474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c234:	4b5b      	ldr	r3, [pc, #364]	@ (800c3a4 <pvPortMalloc+0x18c>)
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4013      	ands	r3, r2
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f040 8094 	bne.w	800c36a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d020      	beq.n	800c28a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c248:	2208      	movs	r2, #8
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4413      	add	r3, r2
 800c24e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f003 0307 	and.w	r3, r3, #7
 800c256:	2b00      	cmp	r3, #0
 800c258:	d017      	beq.n	800c28a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f023 0307 	bic.w	r3, r3, #7
 800c260:	3308      	adds	r3, #8
 800c262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00d      	beq.n	800c28a <pvPortMalloc+0x72>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c272:	b672      	cpsid	i
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	b662      	cpsie	i
 800c282:	617b      	str	r3, [r7, #20]
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop
 800c288:	e7fd      	b.n	800c286 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d06c      	beq.n	800c36a <pvPortMalloc+0x152>
 800c290:	4b45      	ldr	r3, [pc, #276]	@ (800c3a8 <pvPortMalloc+0x190>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	429a      	cmp	r2, r3
 800c298:	d867      	bhi.n	800c36a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c29a:	4b44      	ldr	r3, [pc, #272]	@ (800c3ac <pvPortMalloc+0x194>)
 800c29c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c29e:	4b43      	ldr	r3, [pc, #268]	@ (800c3ac <pvPortMalloc+0x194>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2a4:	e004      	b.n	800c2b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d903      	bls.n	800c2c2 <pvPortMalloc+0xaa>
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1f1      	bne.n	800c2a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2c2:	4b37      	ldr	r3, [pc, #220]	@ (800c3a0 <pvPortMalloc+0x188>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d04e      	beq.n	800c36a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2208      	movs	r2, #8
 800c2d2:	4413      	add	r3, r2
 800c2d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	1ad2      	subs	r2, r2, r3
 800c2e6:	2308      	movs	r3, #8
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d922      	bls.n	800c334 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	f003 0307 	and.w	r3, r3, #7
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00d      	beq.n	800c31c <pvPortMalloc+0x104>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	b672      	cpsid	i
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	b662      	cpsie	i
 800c314:	613b      	str	r3, [r7, #16]
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	e7fd      	b.n	800c318 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	1ad2      	subs	r2, r2, r3
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c32e:	69b8      	ldr	r0, [r7, #24]
 800c330:	f000 f902 	bl	800c538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c334:	4b1c      	ldr	r3, [pc, #112]	@ (800c3a8 <pvPortMalloc+0x190>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	4a1a      	ldr	r2, [pc, #104]	@ (800c3a8 <pvPortMalloc+0x190>)
 800c340:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c342:	4b19      	ldr	r3, [pc, #100]	@ (800c3a8 <pvPortMalloc+0x190>)
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	4b1a      	ldr	r3, [pc, #104]	@ (800c3b0 <pvPortMalloc+0x198>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d203      	bcs.n	800c356 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c34e:	4b16      	ldr	r3, [pc, #88]	@ (800c3a8 <pvPortMalloc+0x190>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a17      	ldr	r2, [pc, #92]	@ (800c3b0 <pvPortMalloc+0x198>)
 800c354:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	4b12      	ldr	r3, [pc, #72]	@ (800c3a4 <pvPortMalloc+0x18c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	431a      	orrs	r2, r3
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c36a:	f7fe fba9 	bl	800aac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	f003 0307 	and.w	r3, r3, #7
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00d      	beq.n	800c394 <pvPortMalloc+0x17c>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	b672      	cpsid	i
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	b662      	cpsie	i
 800c38c:	60fb      	str	r3, [r7, #12]
}
 800c38e:	bf00      	nop
 800c390:	bf00      	nop
 800c392:	e7fd      	b.n	800c390 <pvPortMalloc+0x178>
	return pvReturn;
 800c394:	69fb      	ldr	r3, [r7, #28]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3728      	adds	r7, #40	@ 0x28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20005dfc 	.word	0x20005dfc
 800c3a4:	20005e08 	.word	0x20005e08
 800c3a8:	20005e00 	.word	0x20005e00
 800c3ac:	20005df4 	.word	0x20005df4
 800c3b0:	20005e04 	.word	0x20005e04

0800c3b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d04e      	beq.n	800c464 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	425b      	negs	r3, r3
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	4b24      	ldr	r3, [pc, #144]	@ (800c46c <vPortFree+0xb8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4013      	ands	r3, r2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10d      	bne.n	800c3fe <vPortFree+0x4a>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e6:	b672      	cpsid	i
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	b662      	cpsie	i
 800c3f6:	60fb      	str	r3, [r7, #12]
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	e7fd      	b.n	800c3fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00d      	beq.n	800c422 <vPortFree+0x6e>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40a:	b672      	cpsid	i
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	b662      	cpsie	i
 800c41a:	60bb      	str	r3, [r7, #8]
}
 800c41c:	bf00      	nop
 800c41e:	bf00      	nop
 800c420:	e7fd      	b.n	800c41e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	4b11      	ldr	r3, [pc, #68]	@ (800c46c <vPortFree+0xb8>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4013      	ands	r3, r2
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d019      	beq.n	800c464 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d115      	bne.n	800c464 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	4b0b      	ldr	r3, [pc, #44]	@ (800c46c <vPortFree+0xb8>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	43db      	mvns	r3, r3
 800c442:	401a      	ands	r2, r3
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c448:	f7fe fb2c 	bl	800aaa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	4b07      	ldr	r3, [pc, #28]	@ (800c470 <vPortFree+0xbc>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4413      	add	r3, r2
 800c456:	4a06      	ldr	r2, [pc, #24]	@ (800c470 <vPortFree+0xbc>)
 800c458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c45a:	6938      	ldr	r0, [r7, #16]
 800c45c:	f000 f86c 	bl	800c538 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c460:	f7fe fb2e 	bl	800aac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c464:	bf00      	nop
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20005e08 	.word	0x20005e08
 800c470:	20005e00 	.word	0x20005e00

0800c474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c47a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c47e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c480:	4b27      	ldr	r3, [pc, #156]	@ (800c520 <prvHeapInit+0xac>)
 800c482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f003 0307 	and.w	r3, r3, #7
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00c      	beq.n	800c4a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3307      	adds	r3, #7
 800c492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f023 0307 	bic.w	r3, r3, #7
 800c49a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800c520 <prvHeapInit+0xac>)
 800c4a4:	4413      	add	r3, r2
 800c4a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4ac:	4a1d      	ldr	r2, [pc, #116]	@ (800c524 <prvHeapInit+0xb0>)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4b2:	4b1c      	ldr	r3, [pc, #112]	@ (800c524 <prvHeapInit+0xb0>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	4413      	add	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4c0:	2208      	movs	r2, #8
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	1a9b      	subs	r3, r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f023 0307 	bic.w	r3, r3, #7
 800c4ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4a15      	ldr	r2, [pc, #84]	@ (800c528 <prvHeapInit+0xb4>)
 800c4d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4d6:	4b14      	ldr	r3, [pc, #80]	@ (800c528 <prvHeapInit+0xb4>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4de:	4b12      	ldr	r3, [pc, #72]	@ (800c528 <prvHeapInit+0xb4>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	1ad2      	subs	r2, r2, r3
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c528 <prvHeapInit+0xb4>)
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	4a0a      	ldr	r2, [pc, #40]	@ (800c52c <prvHeapInit+0xb8>)
 800c502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	4a09      	ldr	r2, [pc, #36]	@ (800c530 <prvHeapInit+0xbc>)
 800c50a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c50c:	4b09      	ldr	r3, [pc, #36]	@ (800c534 <prvHeapInit+0xc0>)
 800c50e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c512:	601a      	str	r2, [r3, #0]
}
 800c514:	bf00      	nop
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	200021f4 	.word	0x200021f4
 800c524:	20005df4 	.word	0x20005df4
 800c528:	20005dfc 	.word	0x20005dfc
 800c52c:	20005e04 	.word	0x20005e04
 800c530:	20005e00 	.word	0x20005e00
 800c534:	20005e08 	.word	0x20005e08

0800c538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c540:	4b28      	ldr	r3, [pc, #160]	@ (800c5e4 <prvInsertBlockIntoFreeList+0xac>)
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	e002      	b.n	800c54c <prvInsertBlockIntoFreeList+0x14>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	429a      	cmp	r2, r3
 800c554:	d8f7      	bhi.n	800c546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	4413      	add	r3, r2
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	429a      	cmp	r2, r3
 800c566:	d108      	bne.n	800c57a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	441a      	add	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	441a      	add	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d118      	bne.n	800c5c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	4b15      	ldr	r3, [pc, #84]	@ (800c5e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	429a      	cmp	r2, r3
 800c598:	d00d      	beq.n	800c5b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	441a      	add	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	e008      	b.n	800c5c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	601a      	str	r2, [r3, #0]
 800c5be:	e003      	b.n	800c5c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d002      	beq.n	800c5d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5d6:	bf00      	nop
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20005df4 	.word	0x20005df4
 800c5e8:	20005dfc 	.word	0x20005dfc

0800c5ec <std>:
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	b510      	push	{r4, lr}
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c5f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5fa:	6083      	str	r3, [r0, #8]
 800c5fc:	8181      	strh	r1, [r0, #12]
 800c5fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800c600:	81c2      	strh	r2, [r0, #14]
 800c602:	6183      	str	r3, [r0, #24]
 800c604:	4619      	mov	r1, r3
 800c606:	2208      	movs	r2, #8
 800c608:	305c      	adds	r0, #92	@ 0x5c
 800c60a:	f000 fa1b 	bl	800ca44 <memset>
 800c60e:	4b0d      	ldr	r3, [pc, #52]	@ (800c644 <std+0x58>)
 800c610:	6263      	str	r3, [r4, #36]	@ 0x24
 800c612:	4b0d      	ldr	r3, [pc, #52]	@ (800c648 <std+0x5c>)
 800c614:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c616:	4b0d      	ldr	r3, [pc, #52]	@ (800c64c <std+0x60>)
 800c618:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c61a:	4b0d      	ldr	r3, [pc, #52]	@ (800c650 <std+0x64>)
 800c61c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c61e:	4b0d      	ldr	r3, [pc, #52]	@ (800c654 <std+0x68>)
 800c620:	6224      	str	r4, [r4, #32]
 800c622:	429c      	cmp	r4, r3
 800c624:	d006      	beq.n	800c634 <std+0x48>
 800c626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c62a:	4294      	cmp	r4, r2
 800c62c:	d002      	beq.n	800c634 <std+0x48>
 800c62e:	33d0      	adds	r3, #208	@ 0xd0
 800c630:	429c      	cmp	r4, r3
 800c632:	d105      	bne.n	800c640 <std+0x54>
 800c634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c63c:	f000 bad8 	b.w	800cbf0 <__retarget_lock_init_recursive>
 800c640:	bd10      	pop	{r4, pc}
 800c642:	bf00      	nop
 800c644:	0800c895 	.word	0x0800c895
 800c648:	0800c8b7 	.word	0x0800c8b7
 800c64c:	0800c8ef 	.word	0x0800c8ef
 800c650:	0800c913 	.word	0x0800c913
 800c654:	20005e0c 	.word	0x20005e0c

0800c658 <stdio_exit_handler>:
 800c658:	4a02      	ldr	r2, [pc, #8]	@ (800c664 <stdio_exit_handler+0xc>)
 800c65a:	4903      	ldr	r1, [pc, #12]	@ (800c668 <stdio_exit_handler+0x10>)
 800c65c:	4803      	ldr	r0, [pc, #12]	@ (800c66c <stdio_exit_handler+0x14>)
 800c65e:	f000 b869 	b.w	800c734 <_fwalk_sglue>
 800c662:	bf00      	nop
 800c664:	20000010 	.word	0x20000010
 800c668:	0800d759 	.word	0x0800d759
 800c66c:	20000020 	.word	0x20000020

0800c670 <cleanup_stdio>:
 800c670:	6841      	ldr	r1, [r0, #4]
 800c672:	4b0c      	ldr	r3, [pc, #48]	@ (800c6a4 <cleanup_stdio+0x34>)
 800c674:	4299      	cmp	r1, r3
 800c676:	b510      	push	{r4, lr}
 800c678:	4604      	mov	r4, r0
 800c67a:	d001      	beq.n	800c680 <cleanup_stdio+0x10>
 800c67c:	f001 f86c 	bl	800d758 <_fflush_r>
 800c680:	68a1      	ldr	r1, [r4, #8]
 800c682:	4b09      	ldr	r3, [pc, #36]	@ (800c6a8 <cleanup_stdio+0x38>)
 800c684:	4299      	cmp	r1, r3
 800c686:	d002      	beq.n	800c68e <cleanup_stdio+0x1e>
 800c688:	4620      	mov	r0, r4
 800c68a:	f001 f865 	bl	800d758 <_fflush_r>
 800c68e:	68e1      	ldr	r1, [r4, #12]
 800c690:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <cleanup_stdio+0x3c>)
 800c692:	4299      	cmp	r1, r3
 800c694:	d004      	beq.n	800c6a0 <cleanup_stdio+0x30>
 800c696:	4620      	mov	r0, r4
 800c698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c69c:	f001 b85c 	b.w	800d758 <_fflush_r>
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20005e0c 	.word	0x20005e0c
 800c6a8:	20005e74 	.word	0x20005e74
 800c6ac:	20005edc 	.word	0x20005edc

0800c6b0 <global_stdio_init.part.0>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e0 <global_stdio_init.part.0+0x30>)
 800c6b4:	4c0b      	ldr	r4, [pc, #44]	@ (800c6e4 <global_stdio_init.part.0+0x34>)
 800c6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800c6e8 <global_stdio_init.part.0+0x38>)
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2104      	movs	r1, #4
 800c6c0:	f7ff ff94 	bl	800c5ec <std>
 800c6c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	2109      	movs	r1, #9
 800c6cc:	f7ff ff8e 	bl	800c5ec <std>
 800c6d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6da:	2112      	movs	r1, #18
 800c6dc:	f7ff bf86 	b.w	800c5ec <std>
 800c6e0:	20005f44 	.word	0x20005f44
 800c6e4:	20005e0c 	.word	0x20005e0c
 800c6e8:	0800c659 	.word	0x0800c659

0800c6ec <__sfp_lock_acquire>:
 800c6ec:	4801      	ldr	r0, [pc, #4]	@ (800c6f4 <__sfp_lock_acquire+0x8>)
 800c6ee:	f000 ba80 	b.w	800cbf2 <__retarget_lock_acquire_recursive>
 800c6f2:	bf00      	nop
 800c6f4:	20005f4d 	.word	0x20005f4d

0800c6f8 <__sfp_lock_release>:
 800c6f8:	4801      	ldr	r0, [pc, #4]	@ (800c700 <__sfp_lock_release+0x8>)
 800c6fa:	f000 ba7b 	b.w	800cbf4 <__retarget_lock_release_recursive>
 800c6fe:	bf00      	nop
 800c700:	20005f4d 	.word	0x20005f4d

0800c704 <__sinit>:
 800c704:	b510      	push	{r4, lr}
 800c706:	4604      	mov	r4, r0
 800c708:	f7ff fff0 	bl	800c6ec <__sfp_lock_acquire>
 800c70c:	6a23      	ldr	r3, [r4, #32]
 800c70e:	b11b      	cbz	r3, 800c718 <__sinit+0x14>
 800c710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c714:	f7ff bff0 	b.w	800c6f8 <__sfp_lock_release>
 800c718:	4b04      	ldr	r3, [pc, #16]	@ (800c72c <__sinit+0x28>)
 800c71a:	6223      	str	r3, [r4, #32]
 800c71c:	4b04      	ldr	r3, [pc, #16]	@ (800c730 <__sinit+0x2c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d1f5      	bne.n	800c710 <__sinit+0xc>
 800c724:	f7ff ffc4 	bl	800c6b0 <global_stdio_init.part.0>
 800c728:	e7f2      	b.n	800c710 <__sinit+0xc>
 800c72a:	bf00      	nop
 800c72c:	0800c671 	.word	0x0800c671
 800c730:	20005f44 	.word	0x20005f44

0800c734 <_fwalk_sglue>:
 800c734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c738:	4607      	mov	r7, r0
 800c73a:	4688      	mov	r8, r1
 800c73c:	4614      	mov	r4, r2
 800c73e:	2600      	movs	r6, #0
 800c740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c744:	f1b9 0901 	subs.w	r9, r9, #1
 800c748:	d505      	bpl.n	800c756 <_fwalk_sglue+0x22>
 800c74a:	6824      	ldr	r4, [r4, #0]
 800c74c:	2c00      	cmp	r4, #0
 800c74e:	d1f7      	bne.n	800c740 <_fwalk_sglue+0xc>
 800c750:	4630      	mov	r0, r6
 800c752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d907      	bls.n	800c76c <_fwalk_sglue+0x38>
 800c75c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c760:	3301      	adds	r3, #1
 800c762:	d003      	beq.n	800c76c <_fwalk_sglue+0x38>
 800c764:	4629      	mov	r1, r5
 800c766:	4638      	mov	r0, r7
 800c768:	47c0      	blx	r8
 800c76a:	4306      	orrs	r6, r0
 800c76c:	3568      	adds	r5, #104	@ 0x68
 800c76e:	e7e9      	b.n	800c744 <_fwalk_sglue+0x10>

0800c770 <iprintf>:
 800c770:	b40f      	push	{r0, r1, r2, r3}
 800c772:	b507      	push	{r0, r1, r2, lr}
 800c774:	4906      	ldr	r1, [pc, #24]	@ (800c790 <iprintf+0x20>)
 800c776:	ab04      	add	r3, sp, #16
 800c778:	6808      	ldr	r0, [r1, #0]
 800c77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77e:	6881      	ldr	r1, [r0, #8]
 800c780:	9301      	str	r3, [sp, #4]
 800c782:	f000 fcc1 	bl	800d108 <_vfiprintf_r>
 800c786:	b003      	add	sp, #12
 800c788:	f85d eb04 	ldr.w	lr, [sp], #4
 800c78c:	b004      	add	sp, #16
 800c78e:	4770      	bx	lr
 800c790:	2000001c 	.word	0x2000001c

0800c794 <_puts_r>:
 800c794:	6a03      	ldr	r3, [r0, #32]
 800c796:	b570      	push	{r4, r5, r6, lr}
 800c798:	6884      	ldr	r4, [r0, #8]
 800c79a:	4605      	mov	r5, r0
 800c79c:	460e      	mov	r6, r1
 800c79e:	b90b      	cbnz	r3, 800c7a4 <_puts_r+0x10>
 800c7a0:	f7ff ffb0 	bl	800c704 <__sinit>
 800c7a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7a6:	07db      	lsls	r3, r3, #31
 800c7a8:	d405      	bmi.n	800c7b6 <_puts_r+0x22>
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	0598      	lsls	r0, r3, #22
 800c7ae:	d402      	bmi.n	800c7b6 <_puts_r+0x22>
 800c7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7b2:	f000 fa1e 	bl	800cbf2 <__retarget_lock_acquire_recursive>
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	0719      	lsls	r1, r3, #28
 800c7ba:	d502      	bpl.n	800c7c2 <_puts_r+0x2e>
 800c7bc:	6923      	ldr	r3, [r4, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d135      	bne.n	800c82e <_puts_r+0x9a>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f000 f8e7 	bl	800c998 <__swsetup_r>
 800c7ca:	b380      	cbz	r0, 800c82e <_puts_r+0x9a>
 800c7cc:	f04f 35ff 	mov.w	r5, #4294967295
 800c7d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7d2:	07da      	lsls	r2, r3, #31
 800c7d4:	d405      	bmi.n	800c7e2 <_puts_r+0x4e>
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	059b      	lsls	r3, r3, #22
 800c7da:	d402      	bmi.n	800c7e2 <_puts_r+0x4e>
 800c7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7de:	f000 fa09 	bl	800cbf4 <__retarget_lock_release_recursive>
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	bd70      	pop	{r4, r5, r6, pc}
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	da04      	bge.n	800c7f4 <_puts_r+0x60>
 800c7ea:	69a2      	ldr	r2, [r4, #24]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	dc17      	bgt.n	800c820 <_puts_r+0x8c>
 800c7f0:	290a      	cmp	r1, #10
 800c7f2:	d015      	beq.n	800c820 <_puts_r+0x8c>
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	6022      	str	r2, [r4, #0]
 800c7fa:	7019      	strb	r1, [r3, #0]
 800c7fc:	68a3      	ldr	r3, [r4, #8]
 800c7fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c802:	3b01      	subs	r3, #1
 800c804:	60a3      	str	r3, [r4, #8]
 800c806:	2900      	cmp	r1, #0
 800c808:	d1ed      	bne.n	800c7e6 <_puts_r+0x52>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	da11      	bge.n	800c832 <_puts_r+0x9e>
 800c80e:	4622      	mov	r2, r4
 800c810:	210a      	movs	r1, #10
 800c812:	4628      	mov	r0, r5
 800c814:	f000 f881 	bl	800c91a <__swbuf_r>
 800c818:	3001      	adds	r0, #1
 800c81a:	d0d7      	beq.n	800c7cc <_puts_r+0x38>
 800c81c:	250a      	movs	r5, #10
 800c81e:	e7d7      	b.n	800c7d0 <_puts_r+0x3c>
 800c820:	4622      	mov	r2, r4
 800c822:	4628      	mov	r0, r5
 800c824:	f000 f879 	bl	800c91a <__swbuf_r>
 800c828:	3001      	adds	r0, #1
 800c82a:	d1e7      	bne.n	800c7fc <_puts_r+0x68>
 800c82c:	e7ce      	b.n	800c7cc <_puts_r+0x38>
 800c82e:	3e01      	subs	r6, #1
 800c830:	e7e4      	b.n	800c7fc <_puts_r+0x68>
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	6022      	str	r2, [r4, #0]
 800c838:	220a      	movs	r2, #10
 800c83a:	701a      	strb	r2, [r3, #0]
 800c83c:	e7ee      	b.n	800c81c <_puts_r+0x88>
	...

0800c840 <puts>:
 800c840:	4b02      	ldr	r3, [pc, #8]	@ (800c84c <puts+0xc>)
 800c842:	4601      	mov	r1, r0
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	f7ff bfa5 	b.w	800c794 <_puts_r>
 800c84a:	bf00      	nop
 800c84c:	2000001c 	.word	0x2000001c

0800c850 <siprintf>:
 800c850:	b40e      	push	{r1, r2, r3}
 800c852:	b510      	push	{r4, lr}
 800c854:	b09d      	sub	sp, #116	@ 0x74
 800c856:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c858:	9002      	str	r0, [sp, #8]
 800c85a:	9006      	str	r0, [sp, #24]
 800c85c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c860:	480a      	ldr	r0, [pc, #40]	@ (800c88c <siprintf+0x3c>)
 800c862:	9107      	str	r1, [sp, #28]
 800c864:	9104      	str	r1, [sp, #16]
 800c866:	490a      	ldr	r1, [pc, #40]	@ (800c890 <siprintf+0x40>)
 800c868:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86c:	9105      	str	r1, [sp, #20]
 800c86e:	2400      	movs	r4, #0
 800c870:	a902      	add	r1, sp, #8
 800c872:	6800      	ldr	r0, [r0, #0]
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c878:	f000 fb20 	bl	800cebc <_svfiprintf_r>
 800c87c:	9b02      	ldr	r3, [sp, #8]
 800c87e:	701c      	strb	r4, [r3, #0]
 800c880:	b01d      	add	sp, #116	@ 0x74
 800c882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c886:	b003      	add	sp, #12
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	2000001c 	.word	0x2000001c
 800c890:	ffff0208 	.word	0xffff0208

0800c894 <__sread>:
 800c894:	b510      	push	{r4, lr}
 800c896:	460c      	mov	r4, r1
 800c898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c89c:	f000 f95a 	bl	800cb54 <_read_r>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	bfab      	itete	ge
 800c8a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c8a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c8a8:	181b      	addge	r3, r3, r0
 800c8aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c8ae:	bfac      	ite	ge
 800c8b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c8b2:	81a3      	strhlt	r3, [r4, #12]
 800c8b4:	bd10      	pop	{r4, pc}

0800c8b6 <__swrite>:
 800c8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ba:	461f      	mov	r7, r3
 800c8bc:	898b      	ldrh	r3, [r1, #12]
 800c8be:	05db      	lsls	r3, r3, #23
 800c8c0:	4605      	mov	r5, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	4616      	mov	r6, r2
 800c8c6:	d505      	bpl.n	800c8d4 <__swrite+0x1e>
 800c8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8cc:	2302      	movs	r3, #2
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f000 f92e 	bl	800cb30 <_lseek_r>
 800c8d4:	89a3      	ldrh	r3, [r4, #12]
 800c8d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c8de:	81a3      	strh	r3, [r4, #12]
 800c8e0:	4632      	mov	r2, r6
 800c8e2:	463b      	mov	r3, r7
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ea:	f000 b945 	b.w	800cb78 <_write_r>

0800c8ee <__sseek>:
 800c8ee:	b510      	push	{r4, lr}
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8f6:	f000 f91b 	bl	800cb30 <_lseek_r>
 800c8fa:	1c43      	adds	r3, r0, #1
 800c8fc:	89a3      	ldrh	r3, [r4, #12]
 800c8fe:	bf15      	itete	ne
 800c900:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c90a:	81a3      	strheq	r3, [r4, #12]
 800c90c:	bf18      	it	ne
 800c90e:	81a3      	strhne	r3, [r4, #12]
 800c910:	bd10      	pop	{r4, pc}

0800c912 <__sclose>:
 800c912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c916:	f000 b89d 	b.w	800ca54 <_close_r>

0800c91a <__swbuf_r>:
 800c91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91c:	460e      	mov	r6, r1
 800c91e:	4614      	mov	r4, r2
 800c920:	4605      	mov	r5, r0
 800c922:	b118      	cbz	r0, 800c92c <__swbuf_r+0x12>
 800c924:	6a03      	ldr	r3, [r0, #32]
 800c926:	b90b      	cbnz	r3, 800c92c <__swbuf_r+0x12>
 800c928:	f7ff feec 	bl	800c704 <__sinit>
 800c92c:	69a3      	ldr	r3, [r4, #24]
 800c92e:	60a3      	str	r3, [r4, #8]
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	071a      	lsls	r2, r3, #28
 800c934:	d501      	bpl.n	800c93a <__swbuf_r+0x20>
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	b943      	cbnz	r3, 800c94c <__swbuf_r+0x32>
 800c93a:	4621      	mov	r1, r4
 800c93c:	4628      	mov	r0, r5
 800c93e:	f000 f82b 	bl	800c998 <__swsetup_r>
 800c942:	b118      	cbz	r0, 800c94c <__swbuf_r+0x32>
 800c944:	f04f 37ff 	mov.w	r7, #4294967295
 800c948:	4638      	mov	r0, r7
 800c94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	6922      	ldr	r2, [r4, #16]
 800c950:	1a98      	subs	r0, r3, r2
 800c952:	6963      	ldr	r3, [r4, #20]
 800c954:	b2f6      	uxtb	r6, r6
 800c956:	4283      	cmp	r3, r0
 800c958:	4637      	mov	r7, r6
 800c95a:	dc05      	bgt.n	800c968 <__swbuf_r+0x4e>
 800c95c:	4621      	mov	r1, r4
 800c95e:	4628      	mov	r0, r5
 800c960:	f000 fefa 	bl	800d758 <_fflush_r>
 800c964:	2800      	cmp	r0, #0
 800c966:	d1ed      	bne.n	800c944 <__swbuf_r+0x2a>
 800c968:	68a3      	ldr	r3, [r4, #8]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	60a3      	str	r3, [r4, #8]
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	6022      	str	r2, [r4, #0]
 800c974:	701e      	strb	r6, [r3, #0]
 800c976:	6962      	ldr	r2, [r4, #20]
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d004      	beq.n	800c988 <__swbuf_r+0x6e>
 800c97e:	89a3      	ldrh	r3, [r4, #12]
 800c980:	07db      	lsls	r3, r3, #31
 800c982:	d5e1      	bpl.n	800c948 <__swbuf_r+0x2e>
 800c984:	2e0a      	cmp	r6, #10
 800c986:	d1df      	bne.n	800c948 <__swbuf_r+0x2e>
 800c988:	4621      	mov	r1, r4
 800c98a:	4628      	mov	r0, r5
 800c98c:	f000 fee4 	bl	800d758 <_fflush_r>
 800c990:	2800      	cmp	r0, #0
 800c992:	d0d9      	beq.n	800c948 <__swbuf_r+0x2e>
 800c994:	e7d6      	b.n	800c944 <__swbuf_r+0x2a>
	...

0800c998 <__swsetup_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4b29      	ldr	r3, [pc, #164]	@ (800ca40 <__swsetup_r+0xa8>)
 800c99c:	4605      	mov	r5, r0
 800c99e:	6818      	ldr	r0, [r3, #0]
 800c9a0:	460c      	mov	r4, r1
 800c9a2:	b118      	cbz	r0, 800c9ac <__swsetup_r+0x14>
 800c9a4:	6a03      	ldr	r3, [r0, #32]
 800c9a6:	b90b      	cbnz	r3, 800c9ac <__swsetup_r+0x14>
 800c9a8:	f7ff feac 	bl	800c704 <__sinit>
 800c9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b0:	0719      	lsls	r1, r3, #28
 800c9b2:	d422      	bmi.n	800c9fa <__swsetup_r+0x62>
 800c9b4:	06da      	lsls	r2, r3, #27
 800c9b6:	d407      	bmi.n	800c9c8 <__swsetup_r+0x30>
 800c9b8:	2209      	movs	r2, #9
 800c9ba:	602a      	str	r2, [r5, #0]
 800c9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c0:	81a3      	strh	r3, [r4, #12]
 800c9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c6:	e033      	b.n	800ca30 <__swsetup_r+0x98>
 800c9c8:	0758      	lsls	r0, r3, #29
 800c9ca:	d512      	bpl.n	800c9f2 <__swsetup_r+0x5a>
 800c9cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9ce:	b141      	cbz	r1, 800c9e2 <__swsetup_r+0x4a>
 800c9d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9d4:	4299      	cmp	r1, r3
 800c9d6:	d002      	beq.n	800c9de <__swsetup_r+0x46>
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f000 f91b 	bl	800cc14 <_free_r>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9e8:	81a3      	strh	r3, [r4, #12]
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	6063      	str	r3, [r4, #4]
 800c9ee:	6923      	ldr	r3, [r4, #16]
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	f043 0308 	orr.w	r3, r3, #8
 800c9f8:	81a3      	strh	r3, [r4, #12]
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	b94b      	cbnz	r3, 800ca12 <__swsetup_r+0x7a>
 800c9fe:	89a3      	ldrh	r3, [r4, #12]
 800ca00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca08:	d003      	beq.n	800ca12 <__swsetup_r+0x7a>
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	4628      	mov	r0, r5
 800ca0e:	f000 fef1 	bl	800d7f4 <__smakebuf_r>
 800ca12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca16:	f013 0201 	ands.w	r2, r3, #1
 800ca1a:	d00a      	beq.n	800ca32 <__swsetup_r+0x9a>
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	60a2      	str	r2, [r4, #8]
 800ca20:	6962      	ldr	r2, [r4, #20]
 800ca22:	4252      	negs	r2, r2
 800ca24:	61a2      	str	r2, [r4, #24]
 800ca26:	6922      	ldr	r2, [r4, #16]
 800ca28:	b942      	cbnz	r2, 800ca3c <__swsetup_r+0xa4>
 800ca2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca2e:	d1c5      	bne.n	800c9bc <__swsetup_r+0x24>
 800ca30:	bd38      	pop	{r3, r4, r5, pc}
 800ca32:	0799      	lsls	r1, r3, #30
 800ca34:	bf58      	it	pl
 800ca36:	6962      	ldrpl	r2, [r4, #20]
 800ca38:	60a2      	str	r2, [r4, #8]
 800ca3a:	e7f4      	b.n	800ca26 <__swsetup_r+0x8e>
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	e7f7      	b.n	800ca30 <__swsetup_r+0x98>
 800ca40:	2000001c 	.word	0x2000001c

0800ca44 <memset>:
 800ca44:	4402      	add	r2, r0
 800ca46:	4603      	mov	r3, r0
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d100      	bne.n	800ca4e <memset+0xa>
 800ca4c:	4770      	bx	lr
 800ca4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca52:	e7f9      	b.n	800ca48 <memset+0x4>

0800ca54 <_close_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4d06      	ldr	r5, [pc, #24]	@ (800ca70 <_close_r+0x1c>)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	602b      	str	r3, [r5, #0]
 800ca60:	f7f5 f84b 	bl	8001afa <_close>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_close_r+0x1a>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_close_r+0x1a>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	20005f48 	.word	0x20005f48

0800ca74 <_reclaim_reent>:
 800ca74:	4b2d      	ldr	r3, [pc, #180]	@ (800cb2c <_reclaim_reent+0xb8>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4283      	cmp	r3, r0
 800ca7a:	b570      	push	{r4, r5, r6, lr}
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	d053      	beq.n	800cb28 <_reclaim_reent+0xb4>
 800ca80:	69c3      	ldr	r3, [r0, #28]
 800ca82:	b31b      	cbz	r3, 800cacc <_reclaim_reent+0x58>
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	b163      	cbz	r3, 800caa2 <_reclaim_reent+0x2e>
 800ca88:	2500      	movs	r5, #0
 800ca8a:	69e3      	ldr	r3, [r4, #28]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	5959      	ldr	r1, [r3, r5]
 800ca90:	b9b1      	cbnz	r1, 800cac0 <_reclaim_reent+0x4c>
 800ca92:	3504      	adds	r5, #4
 800ca94:	2d80      	cmp	r5, #128	@ 0x80
 800ca96:	d1f8      	bne.n	800ca8a <_reclaim_reent+0x16>
 800ca98:	69e3      	ldr	r3, [r4, #28]
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	68d9      	ldr	r1, [r3, #12]
 800ca9e:	f000 f8b9 	bl	800cc14 <_free_r>
 800caa2:	69e3      	ldr	r3, [r4, #28]
 800caa4:	6819      	ldr	r1, [r3, #0]
 800caa6:	b111      	cbz	r1, 800caae <_reclaim_reent+0x3a>
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 f8b3 	bl	800cc14 <_free_r>
 800caae:	69e3      	ldr	r3, [r4, #28]
 800cab0:	689d      	ldr	r5, [r3, #8]
 800cab2:	b15d      	cbz	r5, 800cacc <_reclaim_reent+0x58>
 800cab4:	4629      	mov	r1, r5
 800cab6:	4620      	mov	r0, r4
 800cab8:	682d      	ldr	r5, [r5, #0]
 800caba:	f000 f8ab 	bl	800cc14 <_free_r>
 800cabe:	e7f8      	b.n	800cab2 <_reclaim_reent+0x3e>
 800cac0:	680e      	ldr	r6, [r1, #0]
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 f8a6 	bl	800cc14 <_free_r>
 800cac8:	4631      	mov	r1, r6
 800caca:	e7e1      	b.n	800ca90 <_reclaim_reent+0x1c>
 800cacc:	6961      	ldr	r1, [r4, #20]
 800cace:	b111      	cbz	r1, 800cad6 <_reclaim_reent+0x62>
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 f89f 	bl	800cc14 <_free_r>
 800cad6:	69e1      	ldr	r1, [r4, #28]
 800cad8:	b111      	cbz	r1, 800cae0 <_reclaim_reent+0x6c>
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 f89a 	bl	800cc14 <_free_r>
 800cae0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cae2:	b111      	cbz	r1, 800caea <_reclaim_reent+0x76>
 800cae4:	4620      	mov	r0, r4
 800cae6:	f000 f895 	bl	800cc14 <_free_r>
 800caea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caec:	b111      	cbz	r1, 800caf4 <_reclaim_reent+0x80>
 800caee:	4620      	mov	r0, r4
 800caf0:	f000 f890 	bl	800cc14 <_free_r>
 800caf4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800caf6:	b111      	cbz	r1, 800cafe <_reclaim_reent+0x8a>
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 f88b 	bl	800cc14 <_free_r>
 800cafe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cb00:	b111      	cbz	r1, 800cb08 <_reclaim_reent+0x94>
 800cb02:	4620      	mov	r0, r4
 800cb04:	f000 f886 	bl	800cc14 <_free_r>
 800cb08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cb0a:	b111      	cbz	r1, 800cb12 <_reclaim_reent+0x9e>
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f000 f881 	bl	800cc14 <_free_r>
 800cb12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb14:	b111      	cbz	r1, 800cb1c <_reclaim_reent+0xa8>
 800cb16:	4620      	mov	r0, r4
 800cb18:	f000 f87c 	bl	800cc14 <_free_r>
 800cb1c:	6a23      	ldr	r3, [r4, #32]
 800cb1e:	b11b      	cbz	r3, 800cb28 <_reclaim_reent+0xb4>
 800cb20:	4620      	mov	r0, r4
 800cb22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb26:	4718      	bx	r3
 800cb28:	bd70      	pop	{r4, r5, r6, pc}
 800cb2a:	bf00      	nop
 800cb2c:	2000001c 	.word	0x2000001c

0800cb30 <_lseek_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	@ (800cb50 <_lseek_r+0x20>)
 800cb34:	4604      	mov	r4, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	4611      	mov	r1, r2
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	602a      	str	r2, [r5, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f7f5 f802 	bl	8001b48 <_lseek>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_lseek_r+0x1e>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_lseek_r+0x1e>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	20005f48 	.word	0x20005f48

0800cb54 <_read_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d07      	ldr	r5, [pc, #28]	@ (800cb74 <_read_r+0x20>)
 800cb58:	4604      	mov	r4, r0
 800cb5a:	4608      	mov	r0, r1
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	2200      	movs	r2, #0
 800cb60:	602a      	str	r2, [r5, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	f7f4 ffac 	bl	8001ac0 <_read>
 800cb68:	1c43      	adds	r3, r0, #1
 800cb6a:	d102      	bne.n	800cb72 <_read_r+0x1e>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	b103      	cbz	r3, 800cb72 <_read_r+0x1e>
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	20005f48 	.word	0x20005f48

0800cb78 <_write_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4d07      	ldr	r5, [pc, #28]	@ (800cb98 <_write_r+0x20>)
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	4608      	mov	r0, r1
 800cb80:	4611      	mov	r1, r2
 800cb82:	2200      	movs	r2, #0
 800cb84:	602a      	str	r2, [r5, #0]
 800cb86:	461a      	mov	r2, r3
 800cb88:	f7f3 ff84 	bl	8000a94 <_write>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	d102      	bne.n	800cb96 <_write_r+0x1e>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	b103      	cbz	r3, 800cb96 <_write_r+0x1e>
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	20005f48 	.word	0x20005f48

0800cb9c <__errno>:
 800cb9c:	4b01      	ldr	r3, [pc, #4]	@ (800cba4 <__errno+0x8>)
 800cb9e:	6818      	ldr	r0, [r3, #0]
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	2000001c 	.word	0x2000001c

0800cba8 <__libc_init_array>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	4d0d      	ldr	r5, [pc, #52]	@ (800cbe0 <__libc_init_array+0x38>)
 800cbac:	4c0d      	ldr	r4, [pc, #52]	@ (800cbe4 <__libc_init_array+0x3c>)
 800cbae:	1b64      	subs	r4, r4, r5
 800cbb0:	10a4      	asrs	r4, r4, #2
 800cbb2:	2600      	movs	r6, #0
 800cbb4:	42a6      	cmp	r6, r4
 800cbb6:	d109      	bne.n	800cbcc <__libc_init_array+0x24>
 800cbb8:	4d0b      	ldr	r5, [pc, #44]	@ (800cbe8 <__libc_init_array+0x40>)
 800cbba:	4c0c      	ldr	r4, [pc, #48]	@ (800cbec <__libc_init_array+0x44>)
 800cbbc:	f000 fed8 	bl	800d970 <_init>
 800cbc0:	1b64      	subs	r4, r4, r5
 800cbc2:	10a4      	asrs	r4, r4, #2
 800cbc4:	2600      	movs	r6, #0
 800cbc6:	42a6      	cmp	r6, r4
 800cbc8:	d105      	bne.n	800cbd6 <__libc_init_array+0x2e>
 800cbca:	bd70      	pop	{r4, r5, r6, pc}
 800cbcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbd0:	4798      	blx	r3
 800cbd2:	3601      	adds	r6, #1
 800cbd4:	e7ee      	b.n	800cbb4 <__libc_init_array+0xc>
 800cbd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbda:	4798      	blx	r3
 800cbdc:	3601      	adds	r6, #1
 800cbde:	e7f2      	b.n	800cbc6 <__libc_init_array+0x1e>
 800cbe0:	0800e638 	.word	0x0800e638
 800cbe4:	0800e638 	.word	0x0800e638
 800cbe8:	0800e638 	.word	0x0800e638
 800cbec:	0800e63c 	.word	0x0800e63c

0800cbf0 <__retarget_lock_init_recursive>:
 800cbf0:	4770      	bx	lr

0800cbf2 <__retarget_lock_acquire_recursive>:
 800cbf2:	4770      	bx	lr

0800cbf4 <__retarget_lock_release_recursive>:
 800cbf4:	4770      	bx	lr

0800cbf6 <memcpy>:
 800cbf6:	440a      	add	r2, r1
 800cbf8:	4291      	cmp	r1, r2
 800cbfa:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbfe:	d100      	bne.n	800cc02 <memcpy+0xc>
 800cc00:	4770      	bx	lr
 800cc02:	b510      	push	{r4, lr}
 800cc04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc0c:	4291      	cmp	r1, r2
 800cc0e:	d1f9      	bne.n	800cc04 <memcpy+0xe>
 800cc10:	bd10      	pop	{r4, pc}
	...

0800cc14 <_free_r>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	4605      	mov	r5, r0
 800cc18:	2900      	cmp	r1, #0
 800cc1a:	d041      	beq.n	800cca0 <_free_r+0x8c>
 800cc1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc20:	1f0c      	subs	r4, r1, #4
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	bfb8      	it	lt
 800cc26:	18e4      	addlt	r4, r4, r3
 800cc28:	f000 f8e0 	bl	800cdec <__malloc_lock>
 800cc2c:	4a1d      	ldr	r2, [pc, #116]	@ (800cca4 <_free_r+0x90>)
 800cc2e:	6813      	ldr	r3, [r2, #0]
 800cc30:	b933      	cbnz	r3, 800cc40 <_free_r+0x2c>
 800cc32:	6063      	str	r3, [r4, #4]
 800cc34:	6014      	str	r4, [r2, #0]
 800cc36:	4628      	mov	r0, r5
 800cc38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc3c:	f000 b8dc 	b.w	800cdf8 <__malloc_unlock>
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	d908      	bls.n	800cc56 <_free_r+0x42>
 800cc44:	6820      	ldr	r0, [r4, #0]
 800cc46:	1821      	adds	r1, r4, r0
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	bf01      	itttt	eq
 800cc4c:	6819      	ldreq	r1, [r3, #0]
 800cc4e:	685b      	ldreq	r3, [r3, #4]
 800cc50:	1809      	addeq	r1, r1, r0
 800cc52:	6021      	streq	r1, [r4, #0]
 800cc54:	e7ed      	b.n	800cc32 <_free_r+0x1e>
 800cc56:	461a      	mov	r2, r3
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	b10b      	cbz	r3, 800cc60 <_free_r+0x4c>
 800cc5c:	42a3      	cmp	r3, r4
 800cc5e:	d9fa      	bls.n	800cc56 <_free_r+0x42>
 800cc60:	6811      	ldr	r1, [r2, #0]
 800cc62:	1850      	adds	r0, r2, r1
 800cc64:	42a0      	cmp	r0, r4
 800cc66:	d10b      	bne.n	800cc80 <_free_r+0x6c>
 800cc68:	6820      	ldr	r0, [r4, #0]
 800cc6a:	4401      	add	r1, r0
 800cc6c:	1850      	adds	r0, r2, r1
 800cc6e:	4283      	cmp	r3, r0
 800cc70:	6011      	str	r1, [r2, #0]
 800cc72:	d1e0      	bne.n	800cc36 <_free_r+0x22>
 800cc74:	6818      	ldr	r0, [r3, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	6053      	str	r3, [r2, #4]
 800cc7a:	4408      	add	r0, r1
 800cc7c:	6010      	str	r0, [r2, #0]
 800cc7e:	e7da      	b.n	800cc36 <_free_r+0x22>
 800cc80:	d902      	bls.n	800cc88 <_free_r+0x74>
 800cc82:	230c      	movs	r3, #12
 800cc84:	602b      	str	r3, [r5, #0]
 800cc86:	e7d6      	b.n	800cc36 <_free_r+0x22>
 800cc88:	6820      	ldr	r0, [r4, #0]
 800cc8a:	1821      	adds	r1, r4, r0
 800cc8c:	428b      	cmp	r3, r1
 800cc8e:	bf04      	itt	eq
 800cc90:	6819      	ldreq	r1, [r3, #0]
 800cc92:	685b      	ldreq	r3, [r3, #4]
 800cc94:	6063      	str	r3, [r4, #4]
 800cc96:	bf04      	itt	eq
 800cc98:	1809      	addeq	r1, r1, r0
 800cc9a:	6021      	streq	r1, [r4, #0]
 800cc9c:	6054      	str	r4, [r2, #4]
 800cc9e:	e7ca      	b.n	800cc36 <_free_r+0x22>
 800cca0:	bd38      	pop	{r3, r4, r5, pc}
 800cca2:	bf00      	nop
 800cca4:	20005f54 	.word	0x20005f54

0800cca8 <sbrk_aligned>:
 800cca8:	b570      	push	{r4, r5, r6, lr}
 800ccaa:	4e0f      	ldr	r6, [pc, #60]	@ (800cce8 <sbrk_aligned+0x40>)
 800ccac:	460c      	mov	r4, r1
 800ccae:	6831      	ldr	r1, [r6, #0]
 800ccb0:	4605      	mov	r5, r0
 800ccb2:	b911      	cbnz	r1, 800ccba <sbrk_aligned+0x12>
 800ccb4:	f000 fe16 	bl	800d8e4 <_sbrk_r>
 800ccb8:	6030      	str	r0, [r6, #0]
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f000 fe11 	bl	800d8e4 <_sbrk_r>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	d103      	bne.n	800ccce <sbrk_aligned+0x26>
 800ccc6:	f04f 34ff 	mov.w	r4, #4294967295
 800ccca:	4620      	mov	r0, r4
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
 800ccce:	1cc4      	adds	r4, r0, #3
 800ccd0:	f024 0403 	bic.w	r4, r4, #3
 800ccd4:	42a0      	cmp	r0, r4
 800ccd6:	d0f8      	beq.n	800ccca <sbrk_aligned+0x22>
 800ccd8:	1a21      	subs	r1, r4, r0
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f000 fe02 	bl	800d8e4 <_sbrk_r>
 800cce0:	3001      	adds	r0, #1
 800cce2:	d1f2      	bne.n	800ccca <sbrk_aligned+0x22>
 800cce4:	e7ef      	b.n	800ccc6 <sbrk_aligned+0x1e>
 800cce6:	bf00      	nop
 800cce8:	20005f50 	.word	0x20005f50

0800ccec <_malloc_r>:
 800ccec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf0:	1ccd      	adds	r5, r1, #3
 800ccf2:	f025 0503 	bic.w	r5, r5, #3
 800ccf6:	3508      	adds	r5, #8
 800ccf8:	2d0c      	cmp	r5, #12
 800ccfa:	bf38      	it	cc
 800ccfc:	250c      	movcc	r5, #12
 800ccfe:	2d00      	cmp	r5, #0
 800cd00:	4606      	mov	r6, r0
 800cd02:	db01      	blt.n	800cd08 <_malloc_r+0x1c>
 800cd04:	42a9      	cmp	r1, r5
 800cd06:	d904      	bls.n	800cd12 <_malloc_r+0x26>
 800cd08:	230c      	movs	r3, #12
 800cd0a:	6033      	str	r3, [r6, #0]
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cde8 <_malloc_r+0xfc>
 800cd16:	f000 f869 	bl	800cdec <__malloc_lock>
 800cd1a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd1e:	461c      	mov	r4, r3
 800cd20:	bb44      	cbnz	r4, 800cd74 <_malloc_r+0x88>
 800cd22:	4629      	mov	r1, r5
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff ffbf 	bl	800cca8 <sbrk_aligned>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	d158      	bne.n	800cde2 <_malloc_r+0xf6>
 800cd30:	f8d8 4000 	ldr.w	r4, [r8]
 800cd34:	4627      	mov	r7, r4
 800cd36:	2f00      	cmp	r7, #0
 800cd38:	d143      	bne.n	800cdc2 <_malloc_r+0xd6>
 800cd3a:	2c00      	cmp	r4, #0
 800cd3c:	d04b      	beq.n	800cdd6 <_malloc_r+0xea>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	4639      	mov	r1, r7
 800cd42:	4630      	mov	r0, r6
 800cd44:	eb04 0903 	add.w	r9, r4, r3
 800cd48:	f000 fdcc 	bl	800d8e4 <_sbrk_r>
 800cd4c:	4581      	cmp	r9, r0
 800cd4e:	d142      	bne.n	800cdd6 <_malloc_r+0xea>
 800cd50:	6821      	ldr	r1, [r4, #0]
 800cd52:	1a6d      	subs	r5, r5, r1
 800cd54:	4629      	mov	r1, r5
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7ff ffa6 	bl	800cca8 <sbrk_aligned>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d03a      	beq.n	800cdd6 <_malloc_r+0xea>
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	442b      	add	r3, r5
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	bb62      	cbnz	r2, 800cdc8 <_malloc_r+0xdc>
 800cd6e:	f8c8 7000 	str.w	r7, [r8]
 800cd72:	e00f      	b.n	800cd94 <_malloc_r+0xa8>
 800cd74:	6822      	ldr	r2, [r4, #0]
 800cd76:	1b52      	subs	r2, r2, r5
 800cd78:	d420      	bmi.n	800cdbc <_malloc_r+0xd0>
 800cd7a:	2a0b      	cmp	r2, #11
 800cd7c:	d917      	bls.n	800cdae <_malloc_r+0xc2>
 800cd7e:	1961      	adds	r1, r4, r5
 800cd80:	42a3      	cmp	r3, r4
 800cd82:	6025      	str	r5, [r4, #0]
 800cd84:	bf18      	it	ne
 800cd86:	6059      	strne	r1, [r3, #4]
 800cd88:	6863      	ldr	r3, [r4, #4]
 800cd8a:	bf08      	it	eq
 800cd8c:	f8c8 1000 	streq.w	r1, [r8]
 800cd90:	5162      	str	r2, [r4, r5]
 800cd92:	604b      	str	r3, [r1, #4]
 800cd94:	4630      	mov	r0, r6
 800cd96:	f000 f82f 	bl	800cdf8 <__malloc_unlock>
 800cd9a:	f104 000b 	add.w	r0, r4, #11
 800cd9e:	1d23      	adds	r3, r4, #4
 800cda0:	f020 0007 	bic.w	r0, r0, #7
 800cda4:	1ac2      	subs	r2, r0, r3
 800cda6:	bf1c      	itt	ne
 800cda8:	1a1b      	subne	r3, r3, r0
 800cdaa:	50a3      	strne	r3, [r4, r2]
 800cdac:	e7af      	b.n	800cd0e <_malloc_r+0x22>
 800cdae:	6862      	ldr	r2, [r4, #4]
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	bf0c      	ite	eq
 800cdb4:	f8c8 2000 	streq.w	r2, [r8]
 800cdb8:	605a      	strne	r2, [r3, #4]
 800cdba:	e7eb      	b.n	800cd94 <_malloc_r+0xa8>
 800cdbc:	4623      	mov	r3, r4
 800cdbe:	6864      	ldr	r4, [r4, #4]
 800cdc0:	e7ae      	b.n	800cd20 <_malloc_r+0x34>
 800cdc2:	463c      	mov	r4, r7
 800cdc4:	687f      	ldr	r7, [r7, #4]
 800cdc6:	e7b6      	b.n	800cd36 <_malloc_r+0x4a>
 800cdc8:	461a      	mov	r2, r3
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d1fb      	bne.n	800cdc8 <_malloc_r+0xdc>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	6053      	str	r3, [r2, #4]
 800cdd4:	e7de      	b.n	800cd94 <_malloc_r+0xa8>
 800cdd6:	230c      	movs	r3, #12
 800cdd8:	6033      	str	r3, [r6, #0]
 800cdda:	4630      	mov	r0, r6
 800cddc:	f000 f80c 	bl	800cdf8 <__malloc_unlock>
 800cde0:	e794      	b.n	800cd0c <_malloc_r+0x20>
 800cde2:	6005      	str	r5, [r0, #0]
 800cde4:	e7d6      	b.n	800cd94 <_malloc_r+0xa8>
 800cde6:	bf00      	nop
 800cde8:	20005f54 	.word	0x20005f54

0800cdec <__malloc_lock>:
 800cdec:	4801      	ldr	r0, [pc, #4]	@ (800cdf4 <__malloc_lock+0x8>)
 800cdee:	f7ff bf00 	b.w	800cbf2 <__retarget_lock_acquire_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	20005f4c 	.word	0x20005f4c

0800cdf8 <__malloc_unlock>:
 800cdf8:	4801      	ldr	r0, [pc, #4]	@ (800ce00 <__malloc_unlock+0x8>)
 800cdfa:	f7ff befb 	b.w	800cbf4 <__retarget_lock_release_recursive>
 800cdfe:	bf00      	nop
 800ce00:	20005f4c 	.word	0x20005f4c

0800ce04 <__ssputs_r>:
 800ce04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce08:	688e      	ldr	r6, [r1, #8]
 800ce0a:	461f      	mov	r7, r3
 800ce0c:	42be      	cmp	r6, r7
 800ce0e:	680b      	ldr	r3, [r1, #0]
 800ce10:	4682      	mov	sl, r0
 800ce12:	460c      	mov	r4, r1
 800ce14:	4690      	mov	r8, r2
 800ce16:	d82d      	bhi.n	800ce74 <__ssputs_r+0x70>
 800ce18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce20:	d026      	beq.n	800ce70 <__ssputs_r+0x6c>
 800ce22:	6965      	ldr	r5, [r4, #20]
 800ce24:	6909      	ldr	r1, [r1, #16]
 800ce26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce2a:	eba3 0901 	sub.w	r9, r3, r1
 800ce2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce32:	1c7b      	adds	r3, r7, #1
 800ce34:	444b      	add	r3, r9
 800ce36:	106d      	asrs	r5, r5, #1
 800ce38:	429d      	cmp	r5, r3
 800ce3a:	bf38      	it	cc
 800ce3c:	461d      	movcc	r5, r3
 800ce3e:	0553      	lsls	r3, r2, #21
 800ce40:	d527      	bpl.n	800ce92 <__ssputs_r+0x8e>
 800ce42:	4629      	mov	r1, r5
 800ce44:	f7ff ff52 	bl	800ccec <_malloc_r>
 800ce48:	4606      	mov	r6, r0
 800ce4a:	b360      	cbz	r0, 800cea6 <__ssputs_r+0xa2>
 800ce4c:	6921      	ldr	r1, [r4, #16]
 800ce4e:	464a      	mov	r2, r9
 800ce50:	f7ff fed1 	bl	800cbf6 <memcpy>
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	6126      	str	r6, [r4, #16]
 800ce62:	6165      	str	r5, [r4, #20]
 800ce64:	444e      	add	r6, r9
 800ce66:	eba5 0509 	sub.w	r5, r5, r9
 800ce6a:	6026      	str	r6, [r4, #0]
 800ce6c:	60a5      	str	r5, [r4, #8]
 800ce6e:	463e      	mov	r6, r7
 800ce70:	42be      	cmp	r6, r7
 800ce72:	d900      	bls.n	800ce76 <__ssputs_r+0x72>
 800ce74:	463e      	mov	r6, r7
 800ce76:	6820      	ldr	r0, [r4, #0]
 800ce78:	4632      	mov	r2, r6
 800ce7a:	4641      	mov	r1, r8
 800ce7c:	f000 fcf6 	bl	800d86c <memmove>
 800ce80:	68a3      	ldr	r3, [r4, #8]
 800ce82:	1b9b      	subs	r3, r3, r6
 800ce84:	60a3      	str	r3, [r4, #8]
 800ce86:	6823      	ldr	r3, [r4, #0]
 800ce88:	4433      	add	r3, r6
 800ce8a:	6023      	str	r3, [r4, #0]
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce92:	462a      	mov	r2, r5
 800ce94:	f000 fd36 	bl	800d904 <_realloc_r>
 800ce98:	4606      	mov	r6, r0
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d1e0      	bne.n	800ce60 <__ssputs_r+0x5c>
 800ce9e:	6921      	ldr	r1, [r4, #16]
 800cea0:	4650      	mov	r0, sl
 800cea2:	f7ff feb7 	bl	800cc14 <_free_r>
 800cea6:	230c      	movs	r3, #12
 800cea8:	f8ca 3000 	str.w	r3, [sl]
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb8:	e7e9      	b.n	800ce8e <__ssputs_r+0x8a>
	...

0800cebc <_svfiprintf_r>:
 800cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec0:	4698      	mov	r8, r3
 800cec2:	898b      	ldrh	r3, [r1, #12]
 800cec4:	061b      	lsls	r3, r3, #24
 800cec6:	b09d      	sub	sp, #116	@ 0x74
 800cec8:	4607      	mov	r7, r0
 800ceca:	460d      	mov	r5, r1
 800cecc:	4614      	mov	r4, r2
 800cece:	d510      	bpl.n	800cef2 <_svfiprintf_r+0x36>
 800ced0:	690b      	ldr	r3, [r1, #16]
 800ced2:	b973      	cbnz	r3, 800cef2 <_svfiprintf_r+0x36>
 800ced4:	2140      	movs	r1, #64	@ 0x40
 800ced6:	f7ff ff09 	bl	800ccec <_malloc_r>
 800ceda:	6028      	str	r0, [r5, #0]
 800cedc:	6128      	str	r0, [r5, #16]
 800cede:	b930      	cbnz	r0, 800ceee <_svfiprintf_r+0x32>
 800cee0:	230c      	movs	r3, #12
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	f04f 30ff 	mov.w	r0, #4294967295
 800cee8:	b01d      	add	sp, #116	@ 0x74
 800ceea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceee:	2340      	movs	r3, #64	@ 0x40
 800cef0:	616b      	str	r3, [r5, #20]
 800cef2:	2300      	movs	r3, #0
 800cef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cef6:	2320      	movs	r3, #32
 800cef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf00:	2330      	movs	r3, #48	@ 0x30
 800cf02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0a0 <_svfiprintf_r+0x1e4>
 800cf06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf0a:	f04f 0901 	mov.w	r9, #1
 800cf0e:	4623      	mov	r3, r4
 800cf10:	469a      	mov	sl, r3
 800cf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf16:	b10a      	cbz	r2, 800cf1c <_svfiprintf_r+0x60>
 800cf18:	2a25      	cmp	r2, #37	@ 0x25
 800cf1a:	d1f9      	bne.n	800cf10 <_svfiprintf_r+0x54>
 800cf1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf20:	d00b      	beq.n	800cf3a <_svfiprintf_r+0x7e>
 800cf22:	465b      	mov	r3, fp
 800cf24:	4622      	mov	r2, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff ff6b 	bl	800ce04 <__ssputs_r>
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f000 80a7 	beq.w	800d082 <_svfiprintf_r+0x1c6>
 800cf34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf36:	445a      	add	r2, fp
 800cf38:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f000 809f 	beq.w	800d082 <_svfiprintf_r+0x1c6>
 800cf44:	2300      	movs	r3, #0
 800cf46:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf4e:	f10a 0a01 	add.w	sl, sl, #1
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf5c:	4654      	mov	r4, sl
 800cf5e:	2205      	movs	r2, #5
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	484e      	ldr	r0, [pc, #312]	@ (800d0a0 <_svfiprintf_r+0x1e4>)
 800cf66:	f7f3 f96b 	bl	8000240 <memchr>
 800cf6a:	9a04      	ldr	r2, [sp, #16]
 800cf6c:	b9d8      	cbnz	r0, 800cfa6 <_svfiprintf_r+0xea>
 800cf6e:	06d0      	lsls	r0, r2, #27
 800cf70:	bf44      	itt	mi
 800cf72:	2320      	movmi	r3, #32
 800cf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf78:	0711      	lsls	r1, r2, #28
 800cf7a:	bf44      	itt	mi
 800cf7c:	232b      	movmi	r3, #43	@ 0x2b
 800cf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf82:	f89a 3000 	ldrb.w	r3, [sl]
 800cf86:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf88:	d015      	beq.n	800cfb6 <_svfiprintf_r+0xfa>
 800cf8a:	9a07      	ldr	r2, [sp, #28]
 800cf8c:	4654      	mov	r4, sl
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f04f 0c0a 	mov.w	ip, #10
 800cf94:	4621      	mov	r1, r4
 800cf96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9a:	3b30      	subs	r3, #48	@ 0x30
 800cf9c:	2b09      	cmp	r3, #9
 800cf9e:	d94b      	bls.n	800d038 <_svfiprintf_r+0x17c>
 800cfa0:	b1b0      	cbz	r0, 800cfd0 <_svfiprintf_r+0x114>
 800cfa2:	9207      	str	r2, [sp, #28]
 800cfa4:	e014      	b.n	800cfd0 <_svfiprintf_r+0x114>
 800cfa6:	eba0 0308 	sub.w	r3, r0, r8
 800cfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	46a2      	mov	sl, r4
 800cfb4:	e7d2      	b.n	800cf5c <_svfiprintf_r+0xa0>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	1d19      	adds	r1, r3, #4
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	9103      	str	r1, [sp, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	bfbb      	ittet	lt
 800cfc2:	425b      	neglt	r3, r3
 800cfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc8:	9307      	strge	r3, [sp, #28]
 800cfca:	9307      	strlt	r3, [sp, #28]
 800cfcc:	bfb8      	it	lt
 800cfce:	9204      	strlt	r2, [sp, #16]
 800cfd0:	7823      	ldrb	r3, [r4, #0]
 800cfd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfd4:	d10a      	bne.n	800cfec <_svfiprintf_r+0x130>
 800cfd6:	7863      	ldrb	r3, [r4, #1]
 800cfd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfda:	d132      	bne.n	800d042 <_svfiprintf_r+0x186>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	9203      	str	r2, [sp, #12]
 800cfe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfe8:	3402      	adds	r4, #2
 800cfea:	9305      	str	r3, [sp, #20]
 800cfec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0b0 <_svfiprintf_r+0x1f4>
 800cff0:	7821      	ldrb	r1, [r4, #0]
 800cff2:	2203      	movs	r2, #3
 800cff4:	4650      	mov	r0, sl
 800cff6:	f7f3 f923 	bl	8000240 <memchr>
 800cffa:	b138      	cbz	r0, 800d00c <_svfiprintf_r+0x150>
 800cffc:	9b04      	ldr	r3, [sp, #16]
 800cffe:	eba0 000a 	sub.w	r0, r0, sl
 800d002:	2240      	movs	r2, #64	@ 0x40
 800d004:	4082      	lsls	r2, r0
 800d006:	4313      	orrs	r3, r2
 800d008:	3401      	adds	r4, #1
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d010:	4824      	ldr	r0, [pc, #144]	@ (800d0a4 <_svfiprintf_r+0x1e8>)
 800d012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d016:	2206      	movs	r2, #6
 800d018:	f7f3 f912 	bl	8000240 <memchr>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d036      	beq.n	800d08e <_svfiprintf_r+0x1d2>
 800d020:	4b21      	ldr	r3, [pc, #132]	@ (800d0a8 <_svfiprintf_r+0x1ec>)
 800d022:	bb1b      	cbnz	r3, 800d06c <_svfiprintf_r+0x1b0>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	3307      	adds	r3, #7
 800d028:	f023 0307 	bic.w	r3, r3, #7
 800d02c:	3308      	adds	r3, #8
 800d02e:	9303      	str	r3, [sp, #12]
 800d030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d032:	4433      	add	r3, r6
 800d034:	9309      	str	r3, [sp, #36]	@ 0x24
 800d036:	e76a      	b.n	800cf0e <_svfiprintf_r+0x52>
 800d038:	fb0c 3202 	mla	r2, ip, r2, r3
 800d03c:	460c      	mov	r4, r1
 800d03e:	2001      	movs	r0, #1
 800d040:	e7a8      	b.n	800cf94 <_svfiprintf_r+0xd8>
 800d042:	2300      	movs	r3, #0
 800d044:	3401      	adds	r4, #1
 800d046:	9305      	str	r3, [sp, #20]
 800d048:	4619      	mov	r1, r3
 800d04a:	f04f 0c0a 	mov.w	ip, #10
 800d04e:	4620      	mov	r0, r4
 800d050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d054:	3a30      	subs	r2, #48	@ 0x30
 800d056:	2a09      	cmp	r2, #9
 800d058:	d903      	bls.n	800d062 <_svfiprintf_r+0x1a6>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0c6      	beq.n	800cfec <_svfiprintf_r+0x130>
 800d05e:	9105      	str	r1, [sp, #20]
 800d060:	e7c4      	b.n	800cfec <_svfiprintf_r+0x130>
 800d062:	fb0c 2101 	mla	r1, ip, r1, r2
 800d066:	4604      	mov	r4, r0
 800d068:	2301      	movs	r3, #1
 800d06a:	e7f0      	b.n	800d04e <_svfiprintf_r+0x192>
 800d06c:	ab03      	add	r3, sp, #12
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	462a      	mov	r2, r5
 800d072:	4b0e      	ldr	r3, [pc, #56]	@ (800d0ac <_svfiprintf_r+0x1f0>)
 800d074:	a904      	add	r1, sp, #16
 800d076:	4638      	mov	r0, r7
 800d078:	f3af 8000 	nop.w
 800d07c:	1c42      	adds	r2, r0, #1
 800d07e:	4606      	mov	r6, r0
 800d080:	d1d6      	bne.n	800d030 <_svfiprintf_r+0x174>
 800d082:	89ab      	ldrh	r3, [r5, #12]
 800d084:	065b      	lsls	r3, r3, #25
 800d086:	f53f af2d 	bmi.w	800cee4 <_svfiprintf_r+0x28>
 800d08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d08c:	e72c      	b.n	800cee8 <_svfiprintf_r+0x2c>
 800d08e:	ab03      	add	r3, sp, #12
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	462a      	mov	r2, r5
 800d094:	4b05      	ldr	r3, [pc, #20]	@ (800d0ac <_svfiprintf_r+0x1f0>)
 800d096:	a904      	add	r1, sp, #16
 800d098:	4638      	mov	r0, r7
 800d09a:	f000 f9bb 	bl	800d414 <_printf_i>
 800d09e:	e7ed      	b.n	800d07c <_svfiprintf_r+0x1c0>
 800d0a0:	0800e5fc 	.word	0x0800e5fc
 800d0a4:	0800e606 	.word	0x0800e606
 800d0a8:	00000000 	.word	0x00000000
 800d0ac:	0800ce05 	.word	0x0800ce05
 800d0b0:	0800e602 	.word	0x0800e602

0800d0b4 <__sfputc_r>:
 800d0b4:	6893      	ldr	r3, [r2, #8]
 800d0b6:	3b01      	subs	r3, #1
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	b410      	push	{r4}
 800d0bc:	6093      	str	r3, [r2, #8]
 800d0be:	da08      	bge.n	800d0d2 <__sfputc_r+0x1e>
 800d0c0:	6994      	ldr	r4, [r2, #24]
 800d0c2:	42a3      	cmp	r3, r4
 800d0c4:	db01      	blt.n	800d0ca <__sfputc_r+0x16>
 800d0c6:	290a      	cmp	r1, #10
 800d0c8:	d103      	bne.n	800d0d2 <__sfputc_r+0x1e>
 800d0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ce:	f7ff bc24 	b.w	800c91a <__swbuf_r>
 800d0d2:	6813      	ldr	r3, [r2, #0]
 800d0d4:	1c58      	adds	r0, r3, #1
 800d0d6:	6010      	str	r0, [r2, #0]
 800d0d8:	7019      	strb	r1, [r3, #0]
 800d0da:	4608      	mov	r0, r1
 800d0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <__sfputs_r>:
 800d0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	18d5      	adds	r5, r2, r3
 800d0ec:	42ac      	cmp	r4, r5
 800d0ee:	d101      	bne.n	800d0f4 <__sfputs_r+0x12>
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	e007      	b.n	800d104 <__sfputs_r+0x22>
 800d0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f8:	463a      	mov	r2, r7
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f7ff ffda 	bl	800d0b4 <__sfputc_r>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d1f3      	bne.n	800d0ec <__sfputs_r+0xa>
 800d104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d108 <_vfiprintf_r>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	460d      	mov	r5, r1
 800d10e:	b09d      	sub	sp, #116	@ 0x74
 800d110:	4614      	mov	r4, r2
 800d112:	4698      	mov	r8, r3
 800d114:	4606      	mov	r6, r0
 800d116:	b118      	cbz	r0, 800d120 <_vfiprintf_r+0x18>
 800d118:	6a03      	ldr	r3, [r0, #32]
 800d11a:	b90b      	cbnz	r3, 800d120 <_vfiprintf_r+0x18>
 800d11c:	f7ff faf2 	bl	800c704 <__sinit>
 800d120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d122:	07d9      	lsls	r1, r3, #31
 800d124:	d405      	bmi.n	800d132 <_vfiprintf_r+0x2a>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	059a      	lsls	r2, r3, #22
 800d12a:	d402      	bmi.n	800d132 <_vfiprintf_r+0x2a>
 800d12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d12e:	f7ff fd60 	bl	800cbf2 <__retarget_lock_acquire_recursive>
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	071b      	lsls	r3, r3, #28
 800d136:	d501      	bpl.n	800d13c <_vfiprintf_r+0x34>
 800d138:	692b      	ldr	r3, [r5, #16]
 800d13a:	b99b      	cbnz	r3, 800d164 <_vfiprintf_r+0x5c>
 800d13c:	4629      	mov	r1, r5
 800d13e:	4630      	mov	r0, r6
 800d140:	f7ff fc2a 	bl	800c998 <__swsetup_r>
 800d144:	b170      	cbz	r0, 800d164 <_vfiprintf_r+0x5c>
 800d146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d148:	07dc      	lsls	r4, r3, #31
 800d14a:	d504      	bpl.n	800d156 <_vfiprintf_r+0x4e>
 800d14c:	f04f 30ff 	mov.w	r0, #4294967295
 800d150:	b01d      	add	sp, #116	@ 0x74
 800d152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d156:	89ab      	ldrh	r3, [r5, #12]
 800d158:	0598      	lsls	r0, r3, #22
 800d15a:	d4f7      	bmi.n	800d14c <_vfiprintf_r+0x44>
 800d15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d15e:	f7ff fd49 	bl	800cbf4 <__retarget_lock_release_recursive>
 800d162:	e7f3      	b.n	800d14c <_vfiprintf_r+0x44>
 800d164:	2300      	movs	r3, #0
 800d166:	9309      	str	r3, [sp, #36]	@ 0x24
 800d168:	2320      	movs	r3, #32
 800d16a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d172:	2330      	movs	r3, #48	@ 0x30
 800d174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d324 <_vfiprintf_r+0x21c>
 800d178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d17c:	f04f 0901 	mov.w	r9, #1
 800d180:	4623      	mov	r3, r4
 800d182:	469a      	mov	sl, r3
 800d184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d188:	b10a      	cbz	r2, 800d18e <_vfiprintf_r+0x86>
 800d18a:	2a25      	cmp	r2, #37	@ 0x25
 800d18c:	d1f9      	bne.n	800d182 <_vfiprintf_r+0x7a>
 800d18e:	ebba 0b04 	subs.w	fp, sl, r4
 800d192:	d00b      	beq.n	800d1ac <_vfiprintf_r+0xa4>
 800d194:	465b      	mov	r3, fp
 800d196:	4622      	mov	r2, r4
 800d198:	4629      	mov	r1, r5
 800d19a:	4630      	mov	r0, r6
 800d19c:	f7ff ffa1 	bl	800d0e2 <__sfputs_r>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	f000 80a7 	beq.w	800d2f4 <_vfiprintf_r+0x1ec>
 800d1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1a8:	445a      	add	r2, fp
 800d1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 809f 	beq.w	800d2f4 <_vfiprintf_r+0x1ec>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1c0:	f10a 0a01 	add.w	sl, sl, #1
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	9307      	str	r3, [sp, #28]
 800d1c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1ce:	4654      	mov	r4, sl
 800d1d0:	2205      	movs	r2, #5
 800d1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d6:	4853      	ldr	r0, [pc, #332]	@ (800d324 <_vfiprintf_r+0x21c>)
 800d1d8:	f7f3 f832 	bl	8000240 <memchr>
 800d1dc:	9a04      	ldr	r2, [sp, #16]
 800d1de:	b9d8      	cbnz	r0, 800d218 <_vfiprintf_r+0x110>
 800d1e0:	06d1      	lsls	r1, r2, #27
 800d1e2:	bf44      	itt	mi
 800d1e4:	2320      	movmi	r3, #32
 800d1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1ea:	0713      	lsls	r3, r2, #28
 800d1ec:	bf44      	itt	mi
 800d1ee:	232b      	movmi	r3, #43	@ 0x2b
 800d1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1fa:	d015      	beq.n	800d228 <_vfiprintf_r+0x120>
 800d1fc:	9a07      	ldr	r2, [sp, #28]
 800d1fe:	4654      	mov	r4, sl
 800d200:	2000      	movs	r0, #0
 800d202:	f04f 0c0a 	mov.w	ip, #10
 800d206:	4621      	mov	r1, r4
 800d208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d20c:	3b30      	subs	r3, #48	@ 0x30
 800d20e:	2b09      	cmp	r3, #9
 800d210:	d94b      	bls.n	800d2aa <_vfiprintf_r+0x1a2>
 800d212:	b1b0      	cbz	r0, 800d242 <_vfiprintf_r+0x13a>
 800d214:	9207      	str	r2, [sp, #28]
 800d216:	e014      	b.n	800d242 <_vfiprintf_r+0x13a>
 800d218:	eba0 0308 	sub.w	r3, r0, r8
 800d21c:	fa09 f303 	lsl.w	r3, r9, r3
 800d220:	4313      	orrs	r3, r2
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	46a2      	mov	sl, r4
 800d226:	e7d2      	b.n	800d1ce <_vfiprintf_r+0xc6>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	1d19      	adds	r1, r3, #4
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	9103      	str	r1, [sp, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	bfbb      	ittet	lt
 800d234:	425b      	neglt	r3, r3
 800d236:	f042 0202 	orrlt.w	r2, r2, #2
 800d23a:	9307      	strge	r3, [sp, #28]
 800d23c:	9307      	strlt	r3, [sp, #28]
 800d23e:	bfb8      	it	lt
 800d240:	9204      	strlt	r2, [sp, #16]
 800d242:	7823      	ldrb	r3, [r4, #0]
 800d244:	2b2e      	cmp	r3, #46	@ 0x2e
 800d246:	d10a      	bne.n	800d25e <_vfiprintf_r+0x156>
 800d248:	7863      	ldrb	r3, [r4, #1]
 800d24a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d24c:	d132      	bne.n	800d2b4 <_vfiprintf_r+0x1ac>
 800d24e:	9b03      	ldr	r3, [sp, #12]
 800d250:	1d1a      	adds	r2, r3, #4
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	9203      	str	r2, [sp, #12]
 800d256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d25a:	3402      	adds	r4, #2
 800d25c:	9305      	str	r3, [sp, #20]
 800d25e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d334 <_vfiprintf_r+0x22c>
 800d262:	7821      	ldrb	r1, [r4, #0]
 800d264:	2203      	movs	r2, #3
 800d266:	4650      	mov	r0, sl
 800d268:	f7f2 ffea 	bl	8000240 <memchr>
 800d26c:	b138      	cbz	r0, 800d27e <_vfiprintf_r+0x176>
 800d26e:	9b04      	ldr	r3, [sp, #16]
 800d270:	eba0 000a 	sub.w	r0, r0, sl
 800d274:	2240      	movs	r2, #64	@ 0x40
 800d276:	4082      	lsls	r2, r0
 800d278:	4313      	orrs	r3, r2
 800d27a:	3401      	adds	r4, #1
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d282:	4829      	ldr	r0, [pc, #164]	@ (800d328 <_vfiprintf_r+0x220>)
 800d284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d288:	2206      	movs	r2, #6
 800d28a:	f7f2 ffd9 	bl	8000240 <memchr>
 800d28e:	2800      	cmp	r0, #0
 800d290:	d03f      	beq.n	800d312 <_vfiprintf_r+0x20a>
 800d292:	4b26      	ldr	r3, [pc, #152]	@ (800d32c <_vfiprintf_r+0x224>)
 800d294:	bb1b      	cbnz	r3, 800d2de <_vfiprintf_r+0x1d6>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	3307      	adds	r3, #7
 800d29a:	f023 0307 	bic.w	r3, r3, #7
 800d29e:	3308      	adds	r3, #8
 800d2a0:	9303      	str	r3, [sp, #12]
 800d2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a4:	443b      	add	r3, r7
 800d2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2a8:	e76a      	b.n	800d180 <_vfiprintf_r+0x78>
 800d2aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	e7a8      	b.n	800d206 <_vfiprintf_r+0xfe>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	3401      	adds	r4, #1
 800d2b8:	9305      	str	r3, [sp, #20]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	f04f 0c0a 	mov.w	ip, #10
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2c6:	3a30      	subs	r2, #48	@ 0x30
 800d2c8:	2a09      	cmp	r2, #9
 800d2ca:	d903      	bls.n	800d2d4 <_vfiprintf_r+0x1cc>
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d0c6      	beq.n	800d25e <_vfiprintf_r+0x156>
 800d2d0:	9105      	str	r1, [sp, #20]
 800d2d2:	e7c4      	b.n	800d25e <_vfiprintf_r+0x156>
 800d2d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2d8:	4604      	mov	r4, r0
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e7f0      	b.n	800d2c0 <_vfiprintf_r+0x1b8>
 800d2de:	ab03      	add	r3, sp, #12
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	462a      	mov	r2, r5
 800d2e4:	4b12      	ldr	r3, [pc, #72]	@ (800d330 <_vfiprintf_r+0x228>)
 800d2e6:	a904      	add	r1, sp, #16
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f3af 8000 	nop.w
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	1c78      	adds	r0, r7, #1
 800d2f2:	d1d6      	bne.n	800d2a2 <_vfiprintf_r+0x19a>
 800d2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2f6:	07d9      	lsls	r1, r3, #31
 800d2f8:	d405      	bmi.n	800d306 <_vfiprintf_r+0x1fe>
 800d2fa:	89ab      	ldrh	r3, [r5, #12]
 800d2fc:	059a      	lsls	r2, r3, #22
 800d2fe:	d402      	bmi.n	800d306 <_vfiprintf_r+0x1fe>
 800d300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d302:	f7ff fc77 	bl	800cbf4 <__retarget_lock_release_recursive>
 800d306:	89ab      	ldrh	r3, [r5, #12]
 800d308:	065b      	lsls	r3, r3, #25
 800d30a:	f53f af1f 	bmi.w	800d14c <_vfiprintf_r+0x44>
 800d30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d310:	e71e      	b.n	800d150 <_vfiprintf_r+0x48>
 800d312:	ab03      	add	r3, sp, #12
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	462a      	mov	r2, r5
 800d318:	4b05      	ldr	r3, [pc, #20]	@ (800d330 <_vfiprintf_r+0x228>)
 800d31a:	a904      	add	r1, sp, #16
 800d31c:	4630      	mov	r0, r6
 800d31e:	f000 f879 	bl	800d414 <_printf_i>
 800d322:	e7e4      	b.n	800d2ee <_vfiprintf_r+0x1e6>
 800d324:	0800e5fc 	.word	0x0800e5fc
 800d328:	0800e606 	.word	0x0800e606
 800d32c:	00000000 	.word	0x00000000
 800d330:	0800d0e3 	.word	0x0800d0e3
 800d334:	0800e602 	.word	0x0800e602

0800d338 <_printf_common>:
 800d338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d33c:	4616      	mov	r6, r2
 800d33e:	4698      	mov	r8, r3
 800d340:	688a      	ldr	r2, [r1, #8]
 800d342:	690b      	ldr	r3, [r1, #16]
 800d344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d348:	4293      	cmp	r3, r2
 800d34a:	bfb8      	it	lt
 800d34c:	4613      	movlt	r3, r2
 800d34e:	6033      	str	r3, [r6, #0]
 800d350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d354:	4607      	mov	r7, r0
 800d356:	460c      	mov	r4, r1
 800d358:	b10a      	cbz	r2, 800d35e <_printf_common+0x26>
 800d35a:	3301      	adds	r3, #1
 800d35c:	6033      	str	r3, [r6, #0]
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	0699      	lsls	r1, r3, #26
 800d362:	bf42      	ittt	mi
 800d364:	6833      	ldrmi	r3, [r6, #0]
 800d366:	3302      	addmi	r3, #2
 800d368:	6033      	strmi	r3, [r6, #0]
 800d36a:	6825      	ldr	r5, [r4, #0]
 800d36c:	f015 0506 	ands.w	r5, r5, #6
 800d370:	d106      	bne.n	800d380 <_printf_common+0x48>
 800d372:	f104 0a19 	add.w	sl, r4, #25
 800d376:	68e3      	ldr	r3, [r4, #12]
 800d378:	6832      	ldr	r2, [r6, #0]
 800d37a:	1a9b      	subs	r3, r3, r2
 800d37c:	42ab      	cmp	r3, r5
 800d37e:	dc26      	bgt.n	800d3ce <_printf_common+0x96>
 800d380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	3b00      	subs	r3, #0
 800d388:	bf18      	it	ne
 800d38a:	2301      	movne	r3, #1
 800d38c:	0692      	lsls	r2, r2, #26
 800d38e:	d42b      	bmi.n	800d3e8 <_printf_common+0xb0>
 800d390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d394:	4641      	mov	r1, r8
 800d396:	4638      	mov	r0, r7
 800d398:	47c8      	blx	r9
 800d39a:	3001      	adds	r0, #1
 800d39c:	d01e      	beq.n	800d3dc <_printf_common+0xa4>
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	6922      	ldr	r2, [r4, #16]
 800d3a2:	f003 0306 	and.w	r3, r3, #6
 800d3a6:	2b04      	cmp	r3, #4
 800d3a8:	bf02      	ittt	eq
 800d3aa:	68e5      	ldreq	r5, [r4, #12]
 800d3ac:	6833      	ldreq	r3, [r6, #0]
 800d3ae:	1aed      	subeq	r5, r5, r3
 800d3b0:	68a3      	ldr	r3, [r4, #8]
 800d3b2:	bf0c      	ite	eq
 800d3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3b8:	2500      	movne	r5, #0
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	bfc4      	itt	gt
 800d3be:	1a9b      	subgt	r3, r3, r2
 800d3c0:	18ed      	addgt	r5, r5, r3
 800d3c2:	2600      	movs	r6, #0
 800d3c4:	341a      	adds	r4, #26
 800d3c6:	42b5      	cmp	r5, r6
 800d3c8:	d11a      	bne.n	800d400 <_printf_common+0xc8>
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	e008      	b.n	800d3e0 <_printf_common+0xa8>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4652      	mov	r2, sl
 800d3d2:	4641      	mov	r1, r8
 800d3d4:	4638      	mov	r0, r7
 800d3d6:	47c8      	blx	r9
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d103      	bne.n	800d3e4 <_printf_common+0xac>
 800d3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e4:	3501      	adds	r5, #1
 800d3e6:	e7c6      	b.n	800d376 <_printf_common+0x3e>
 800d3e8:	18e1      	adds	r1, r4, r3
 800d3ea:	1c5a      	adds	r2, r3, #1
 800d3ec:	2030      	movs	r0, #48	@ 0x30
 800d3ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d3f2:	4422      	add	r2, r4
 800d3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d3f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d3fc:	3302      	adds	r3, #2
 800d3fe:	e7c7      	b.n	800d390 <_printf_common+0x58>
 800d400:	2301      	movs	r3, #1
 800d402:	4622      	mov	r2, r4
 800d404:	4641      	mov	r1, r8
 800d406:	4638      	mov	r0, r7
 800d408:	47c8      	blx	r9
 800d40a:	3001      	adds	r0, #1
 800d40c:	d0e6      	beq.n	800d3dc <_printf_common+0xa4>
 800d40e:	3601      	adds	r6, #1
 800d410:	e7d9      	b.n	800d3c6 <_printf_common+0x8e>
	...

0800d414 <_printf_i>:
 800d414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d418:	7e0f      	ldrb	r7, [r1, #24]
 800d41a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d41c:	2f78      	cmp	r7, #120	@ 0x78
 800d41e:	4691      	mov	r9, r2
 800d420:	4680      	mov	r8, r0
 800d422:	460c      	mov	r4, r1
 800d424:	469a      	mov	sl, r3
 800d426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d42a:	d807      	bhi.n	800d43c <_printf_i+0x28>
 800d42c:	2f62      	cmp	r7, #98	@ 0x62
 800d42e:	d80a      	bhi.n	800d446 <_printf_i+0x32>
 800d430:	2f00      	cmp	r7, #0
 800d432:	f000 80d1 	beq.w	800d5d8 <_printf_i+0x1c4>
 800d436:	2f58      	cmp	r7, #88	@ 0x58
 800d438:	f000 80b8 	beq.w	800d5ac <_printf_i+0x198>
 800d43c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d444:	e03a      	b.n	800d4bc <_printf_i+0xa8>
 800d446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d44a:	2b15      	cmp	r3, #21
 800d44c:	d8f6      	bhi.n	800d43c <_printf_i+0x28>
 800d44e:	a101      	add	r1, pc, #4	@ (adr r1, 800d454 <_printf_i+0x40>)
 800d450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d454:	0800d4ad 	.word	0x0800d4ad
 800d458:	0800d4c1 	.word	0x0800d4c1
 800d45c:	0800d43d 	.word	0x0800d43d
 800d460:	0800d43d 	.word	0x0800d43d
 800d464:	0800d43d 	.word	0x0800d43d
 800d468:	0800d43d 	.word	0x0800d43d
 800d46c:	0800d4c1 	.word	0x0800d4c1
 800d470:	0800d43d 	.word	0x0800d43d
 800d474:	0800d43d 	.word	0x0800d43d
 800d478:	0800d43d 	.word	0x0800d43d
 800d47c:	0800d43d 	.word	0x0800d43d
 800d480:	0800d5bf 	.word	0x0800d5bf
 800d484:	0800d4eb 	.word	0x0800d4eb
 800d488:	0800d579 	.word	0x0800d579
 800d48c:	0800d43d 	.word	0x0800d43d
 800d490:	0800d43d 	.word	0x0800d43d
 800d494:	0800d5e1 	.word	0x0800d5e1
 800d498:	0800d43d 	.word	0x0800d43d
 800d49c:	0800d4eb 	.word	0x0800d4eb
 800d4a0:	0800d43d 	.word	0x0800d43d
 800d4a4:	0800d43d 	.word	0x0800d43d
 800d4a8:	0800d581 	.word	0x0800d581
 800d4ac:	6833      	ldr	r3, [r6, #0]
 800d4ae:	1d1a      	adds	r2, r3, #4
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6032      	str	r2, [r6, #0]
 800d4b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e09c      	b.n	800d5fa <_printf_i+0x1e6>
 800d4c0:	6833      	ldr	r3, [r6, #0]
 800d4c2:	6820      	ldr	r0, [r4, #0]
 800d4c4:	1d19      	adds	r1, r3, #4
 800d4c6:	6031      	str	r1, [r6, #0]
 800d4c8:	0606      	lsls	r6, r0, #24
 800d4ca:	d501      	bpl.n	800d4d0 <_printf_i+0xbc>
 800d4cc:	681d      	ldr	r5, [r3, #0]
 800d4ce:	e003      	b.n	800d4d8 <_printf_i+0xc4>
 800d4d0:	0645      	lsls	r5, r0, #25
 800d4d2:	d5fb      	bpl.n	800d4cc <_printf_i+0xb8>
 800d4d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d4d8:	2d00      	cmp	r5, #0
 800d4da:	da03      	bge.n	800d4e4 <_printf_i+0xd0>
 800d4dc:	232d      	movs	r3, #45	@ 0x2d
 800d4de:	426d      	negs	r5, r5
 800d4e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4e4:	4858      	ldr	r0, [pc, #352]	@ (800d648 <_printf_i+0x234>)
 800d4e6:	230a      	movs	r3, #10
 800d4e8:	e011      	b.n	800d50e <_printf_i+0xfa>
 800d4ea:	6821      	ldr	r1, [r4, #0]
 800d4ec:	6833      	ldr	r3, [r6, #0]
 800d4ee:	0608      	lsls	r0, r1, #24
 800d4f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d4f4:	d402      	bmi.n	800d4fc <_printf_i+0xe8>
 800d4f6:	0649      	lsls	r1, r1, #25
 800d4f8:	bf48      	it	mi
 800d4fa:	b2ad      	uxthmi	r5, r5
 800d4fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d4fe:	4852      	ldr	r0, [pc, #328]	@ (800d648 <_printf_i+0x234>)
 800d500:	6033      	str	r3, [r6, #0]
 800d502:	bf14      	ite	ne
 800d504:	230a      	movne	r3, #10
 800d506:	2308      	moveq	r3, #8
 800d508:	2100      	movs	r1, #0
 800d50a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d50e:	6866      	ldr	r6, [r4, #4]
 800d510:	60a6      	str	r6, [r4, #8]
 800d512:	2e00      	cmp	r6, #0
 800d514:	db05      	blt.n	800d522 <_printf_i+0x10e>
 800d516:	6821      	ldr	r1, [r4, #0]
 800d518:	432e      	orrs	r6, r5
 800d51a:	f021 0104 	bic.w	r1, r1, #4
 800d51e:	6021      	str	r1, [r4, #0]
 800d520:	d04b      	beq.n	800d5ba <_printf_i+0x1a6>
 800d522:	4616      	mov	r6, r2
 800d524:	fbb5 f1f3 	udiv	r1, r5, r3
 800d528:	fb03 5711 	mls	r7, r3, r1, r5
 800d52c:	5dc7      	ldrb	r7, [r0, r7]
 800d52e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d532:	462f      	mov	r7, r5
 800d534:	42bb      	cmp	r3, r7
 800d536:	460d      	mov	r5, r1
 800d538:	d9f4      	bls.n	800d524 <_printf_i+0x110>
 800d53a:	2b08      	cmp	r3, #8
 800d53c:	d10b      	bne.n	800d556 <_printf_i+0x142>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	07df      	lsls	r7, r3, #31
 800d542:	d508      	bpl.n	800d556 <_printf_i+0x142>
 800d544:	6923      	ldr	r3, [r4, #16]
 800d546:	6861      	ldr	r1, [r4, #4]
 800d548:	4299      	cmp	r1, r3
 800d54a:	bfde      	ittt	le
 800d54c:	2330      	movle	r3, #48	@ 0x30
 800d54e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d552:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d556:	1b92      	subs	r2, r2, r6
 800d558:	6122      	str	r2, [r4, #16]
 800d55a:	f8cd a000 	str.w	sl, [sp]
 800d55e:	464b      	mov	r3, r9
 800d560:	aa03      	add	r2, sp, #12
 800d562:	4621      	mov	r1, r4
 800d564:	4640      	mov	r0, r8
 800d566:	f7ff fee7 	bl	800d338 <_printf_common>
 800d56a:	3001      	adds	r0, #1
 800d56c:	d14a      	bne.n	800d604 <_printf_i+0x1f0>
 800d56e:	f04f 30ff 	mov.w	r0, #4294967295
 800d572:	b004      	add	sp, #16
 800d574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	f043 0320 	orr.w	r3, r3, #32
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	4832      	ldr	r0, [pc, #200]	@ (800d64c <_printf_i+0x238>)
 800d582:	2778      	movs	r7, #120	@ 0x78
 800d584:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	6831      	ldr	r1, [r6, #0]
 800d58c:	061f      	lsls	r7, r3, #24
 800d58e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d592:	d402      	bmi.n	800d59a <_printf_i+0x186>
 800d594:	065f      	lsls	r7, r3, #25
 800d596:	bf48      	it	mi
 800d598:	b2ad      	uxthmi	r5, r5
 800d59a:	6031      	str	r1, [r6, #0]
 800d59c:	07d9      	lsls	r1, r3, #31
 800d59e:	bf44      	itt	mi
 800d5a0:	f043 0320 	orrmi.w	r3, r3, #32
 800d5a4:	6023      	strmi	r3, [r4, #0]
 800d5a6:	b11d      	cbz	r5, 800d5b0 <_printf_i+0x19c>
 800d5a8:	2310      	movs	r3, #16
 800d5aa:	e7ad      	b.n	800d508 <_printf_i+0xf4>
 800d5ac:	4826      	ldr	r0, [pc, #152]	@ (800d648 <_printf_i+0x234>)
 800d5ae:	e7e9      	b.n	800d584 <_printf_i+0x170>
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	f023 0320 	bic.w	r3, r3, #32
 800d5b6:	6023      	str	r3, [r4, #0]
 800d5b8:	e7f6      	b.n	800d5a8 <_printf_i+0x194>
 800d5ba:	4616      	mov	r6, r2
 800d5bc:	e7bd      	b.n	800d53a <_printf_i+0x126>
 800d5be:	6833      	ldr	r3, [r6, #0]
 800d5c0:	6825      	ldr	r5, [r4, #0]
 800d5c2:	6961      	ldr	r1, [r4, #20]
 800d5c4:	1d18      	adds	r0, r3, #4
 800d5c6:	6030      	str	r0, [r6, #0]
 800d5c8:	062e      	lsls	r6, r5, #24
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	d501      	bpl.n	800d5d2 <_printf_i+0x1be>
 800d5ce:	6019      	str	r1, [r3, #0]
 800d5d0:	e002      	b.n	800d5d8 <_printf_i+0x1c4>
 800d5d2:	0668      	lsls	r0, r5, #25
 800d5d4:	d5fb      	bpl.n	800d5ce <_printf_i+0x1ba>
 800d5d6:	8019      	strh	r1, [r3, #0]
 800d5d8:	2300      	movs	r3, #0
 800d5da:	6123      	str	r3, [r4, #16]
 800d5dc:	4616      	mov	r6, r2
 800d5de:	e7bc      	b.n	800d55a <_printf_i+0x146>
 800d5e0:	6833      	ldr	r3, [r6, #0]
 800d5e2:	1d1a      	adds	r2, r3, #4
 800d5e4:	6032      	str	r2, [r6, #0]
 800d5e6:	681e      	ldr	r6, [r3, #0]
 800d5e8:	6862      	ldr	r2, [r4, #4]
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f7f2 fe27 	bl	8000240 <memchr>
 800d5f2:	b108      	cbz	r0, 800d5f8 <_printf_i+0x1e4>
 800d5f4:	1b80      	subs	r0, r0, r6
 800d5f6:	6060      	str	r0, [r4, #4]
 800d5f8:	6863      	ldr	r3, [r4, #4]
 800d5fa:	6123      	str	r3, [r4, #16]
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d602:	e7aa      	b.n	800d55a <_printf_i+0x146>
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	4632      	mov	r2, r6
 800d608:	4649      	mov	r1, r9
 800d60a:	4640      	mov	r0, r8
 800d60c:	47d0      	blx	sl
 800d60e:	3001      	adds	r0, #1
 800d610:	d0ad      	beq.n	800d56e <_printf_i+0x15a>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	079b      	lsls	r3, r3, #30
 800d616:	d413      	bmi.n	800d640 <_printf_i+0x22c>
 800d618:	68e0      	ldr	r0, [r4, #12]
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	4298      	cmp	r0, r3
 800d61e:	bfb8      	it	lt
 800d620:	4618      	movlt	r0, r3
 800d622:	e7a6      	b.n	800d572 <_printf_i+0x15e>
 800d624:	2301      	movs	r3, #1
 800d626:	4632      	mov	r2, r6
 800d628:	4649      	mov	r1, r9
 800d62a:	4640      	mov	r0, r8
 800d62c:	47d0      	blx	sl
 800d62e:	3001      	adds	r0, #1
 800d630:	d09d      	beq.n	800d56e <_printf_i+0x15a>
 800d632:	3501      	adds	r5, #1
 800d634:	68e3      	ldr	r3, [r4, #12]
 800d636:	9903      	ldr	r1, [sp, #12]
 800d638:	1a5b      	subs	r3, r3, r1
 800d63a:	42ab      	cmp	r3, r5
 800d63c:	dcf2      	bgt.n	800d624 <_printf_i+0x210>
 800d63e:	e7eb      	b.n	800d618 <_printf_i+0x204>
 800d640:	2500      	movs	r5, #0
 800d642:	f104 0619 	add.w	r6, r4, #25
 800d646:	e7f5      	b.n	800d634 <_printf_i+0x220>
 800d648:	0800e60d 	.word	0x0800e60d
 800d64c:	0800e61e 	.word	0x0800e61e

0800d650 <__sflush_r>:
 800d650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d658:	0716      	lsls	r6, r2, #28
 800d65a:	4605      	mov	r5, r0
 800d65c:	460c      	mov	r4, r1
 800d65e:	d454      	bmi.n	800d70a <__sflush_r+0xba>
 800d660:	684b      	ldr	r3, [r1, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	dc02      	bgt.n	800d66c <__sflush_r+0x1c>
 800d666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d668:	2b00      	cmp	r3, #0
 800d66a:	dd48      	ble.n	800d6fe <__sflush_r+0xae>
 800d66c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d66e:	2e00      	cmp	r6, #0
 800d670:	d045      	beq.n	800d6fe <__sflush_r+0xae>
 800d672:	2300      	movs	r3, #0
 800d674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d678:	682f      	ldr	r7, [r5, #0]
 800d67a:	6a21      	ldr	r1, [r4, #32]
 800d67c:	602b      	str	r3, [r5, #0]
 800d67e:	d030      	beq.n	800d6e2 <__sflush_r+0x92>
 800d680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d682:	89a3      	ldrh	r3, [r4, #12]
 800d684:	0759      	lsls	r1, r3, #29
 800d686:	d505      	bpl.n	800d694 <__sflush_r+0x44>
 800d688:	6863      	ldr	r3, [r4, #4]
 800d68a:	1ad2      	subs	r2, r2, r3
 800d68c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d68e:	b10b      	cbz	r3, 800d694 <__sflush_r+0x44>
 800d690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d692:	1ad2      	subs	r2, r2, r3
 800d694:	2300      	movs	r3, #0
 800d696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d698:	6a21      	ldr	r1, [r4, #32]
 800d69a:	4628      	mov	r0, r5
 800d69c:	47b0      	blx	r6
 800d69e:	1c43      	adds	r3, r0, #1
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	d106      	bne.n	800d6b2 <__sflush_r+0x62>
 800d6a4:	6829      	ldr	r1, [r5, #0]
 800d6a6:	291d      	cmp	r1, #29
 800d6a8:	d82b      	bhi.n	800d702 <__sflush_r+0xb2>
 800d6aa:	4a2a      	ldr	r2, [pc, #168]	@ (800d754 <__sflush_r+0x104>)
 800d6ac:	40ca      	lsrs	r2, r1
 800d6ae:	07d6      	lsls	r6, r2, #31
 800d6b0:	d527      	bpl.n	800d702 <__sflush_r+0xb2>
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	6062      	str	r2, [r4, #4]
 800d6b6:	04d9      	lsls	r1, r3, #19
 800d6b8:	6922      	ldr	r2, [r4, #16]
 800d6ba:	6022      	str	r2, [r4, #0]
 800d6bc:	d504      	bpl.n	800d6c8 <__sflush_r+0x78>
 800d6be:	1c42      	adds	r2, r0, #1
 800d6c0:	d101      	bne.n	800d6c6 <__sflush_r+0x76>
 800d6c2:	682b      	ldr	r3, [r5, #0]
 800d6c4:	b903      	cbnz	r3, 800d6c8 <__sflush_r+0x78>
 800d6c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d6c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6ca:	602f      	str	r7, [r5, #0]
 800d6cc:	b1b9      	cbz	r1, 800d6fe <__sflush_r+0xae>
 800d6ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6d2:	4299      	cmp	r1, r3
 800d6d4:	d002      	beq.n	800d6dc <__sflush_r+0x8c>
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	f7ff fa9c 	bl	800cc14 <_free_r>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6e0:	e00d      	b.n	800d6fe <__sflush_r+0xae>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	47b0      	blx	r6
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	1c50      	adds	r0, r2, #1
 800d6ec:	d1c9      	bne.n	800d682 <__sflush_r+0x32>
 800d6ee:	682b      	ldr	r3, [r5, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d0c6      	beq.n	800d682 <__sflush_r+0x32>
 800d6f4:	2b1d      	cmp	r3, #29
 800d6f6:	d001      	beq.n	800d6fc <__sflush_r+0xac>
 800d6f8:	2b16      	cmp	r3, #22
 800d6fa:	d11e      	bne.n	800d73a <__sflush_r+0xea>
 800d6fc:	602f      	str	r7, [r5, #0]
 800d6fe:	2000      	movs	r0, #0
 800d700:	e022      	b.n	800d748 <__sflush_r+0xf8>
 800d702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d706:	b21b      	sxth	r3, r3
 800d708:	e01b      	b.n	800d742 <__sflush_r+0xf2>
 800d70a:	690f      	ldr	r7, [r1, #16]
 800d70c:	2f00      	cmp	r7, #0
 800d70e:	d0f6      	beq.n	800d6fe <__sflush_r+0xae>
 800d710:	0793      	lsls	r3, r2, #30
 800d712:	680e      	ldr	r6, [r1, #0]
 800d714:	bf08      	it	eq
 800d716:	694b      	ldreq	r3, [r1, #20]
 800d718:	600f      	str	r7, [r1, #0]
 800d71a:	bf18      	it	ne
 800d71c:	2300      	movne	r3, #0
 800d71e:	eba6 0807 	sub.w	r8, r6, r7
 800d722:	608b      	str	r3, [r1, #8]
 800d724:	f1b8 0f00 	cmp.w	r8, #0
 800d728:	dde9      	ble.n	800d6fe <__sflush_r+0xae>
 800d72a:	6a21      	ldr	r1, [r4, #32]
 800d72c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d72e:	4643      	mov	r3, r8
 800d730:	463a      	mov	r2, r7
 800d732:	4628      	mov	r0, r5
 800d734:	47b0      	blx	r6
 800d736:	2800      	cmp	r0, #0
 800d738:	dc08      	bgt.n	800d74c <__sflush_r+0xfc>
 800d73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d742:	81a3      	strh	r3, [r4, #12]
 800d744:	f04f 30ff 	mov.w	r0, #4294967295
 800d748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d74c:	4407      	add	r7, r0
 800d74e:	eba8 0800 	sub.w	r8, r8, r0
 800d752:	e7e7      	b.n	800d724 <__sflush_r+0xd4>
 800d754:	20400001 	.word	0x20400001

0800d758 <_fflush_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	690b      	ldr	r3, [r1, #16]
 800d75c:	4605      	mov	r5, r0
 800d75e:	460c      	mov	r4, r1
 800d760:	b913      	cbnz	r3, 800d768 <_fflush_r+0x10>
 800d762:	2500      	movs	r5, #0
 800d764:	4628      	mov	r0, r5
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	b118      	cbz	r0, 800d772 <_fflush_r+0x1a>
 800d76a:	6a03      	ldr	r3, [r0, #32]
 800d76c:	b90b      	cbnz	r3, 800d772 <_fflush_r+0x1a>
 800d76e:	f7fe ffc9 	bl	800c704 <__sinit>
 800d772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0f3      	beq.n	800d762 <_fflush_r+0xa>
 800d77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d77c:	07d0      	lsls	r0, r2, #31
 800d77e:	d404      	bmi.n	800d78a <_fflush_r+0x32>
 800d780:	0599      	lsls	r1, r3, #22
 800d782:	d402      	bmi.n	800d78a <_fflush_r+0x32>
 800d784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d786:	f7ff fa34 	bl	800cbf2 <__retarget_lock_acquire_recursive>
 800d78a:	4628      	mov	r0, r5
 800d78c:	4621      	mov	r1, r4
 800d78e:	f7ff ff5f 	bl	800d650 <__sflush_r>
 800d792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d794:	07da      	lsls	r2, r3, #31
 800d796:	4605      	mov	r5, r0
 800d798:	d4e4      	bmi.n	800d764 <_fflush_r+0xc>
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	059b      	lsls	r3, r3, #22
 800d79e:	d4e1      	bmi.n	800d764 <_fflush_r+0xc>
 800d7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7a2:	f7ff fa27 	bl	800cbf4 <__retarget_lock_release_recursive>
 800d7a6:	e7dd      	b.n	800d764 <_fflush_r+0xc>

0800d7a8 <__swhatbuf_r>:
 800d7a8:	b570      	push	{r4, r5, r6, lr}
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b0:	2900      	cmp	r1, #0
 800d7b2:	b096      	sub	sp, #88	@ 0x58
 800d7b4:	4615      	mov	r5, r2
 800d7b6:	461e      	mov	r6, r3
 800d7b8:	da0d      	bge.n	800d7d6 <__swhatbuf_r+0x2e>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d7c0:	f04f 0100 	mov.w	r1, #0
 800d7c4:	bf14      	ite	ne
 800d7c6:	2340      	movne	r3, #64	@ 0x40
 800d7c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d7cc:	2000      	movs	r0, #0
 800d7ce:	6031      	str	r1, [r6, #0]
 800d7d0:	602b      	str	r3, [r5, #0]
 800d7d2:	b016      	add	sp, #88	@ 0x58
 800d7d4:	bd70      	pop	{r4, r5, r6, pc}
 800d7d6:	466a      	mov	r2, sp
 800d7d8:	f000 f862 	bl	800d8a0 <_fstat_r>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	dbec      	blt.n	800d7ba <__swhatbuf_r+0x12>
 800d7e0:	9901      	ldr	r1, [sp, #4]
 800d7e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d7e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d7ea:	4259      	negs	r1, r3
 800d7ec:	4159      	adcs	r1, r3
 800d7ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7f2:	e7eb      	b.n	800d7cc <__swhatbuf_r+0x24>

0800d7f4 <__smakebuf_r>:
 800d7f4:	898b      	ldrh	r3, [r1, #12]
 800d7f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7f8:	079d      	lsls	r5, r3, #30
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	460c      	mov	r4, r1
 800d7fe:	d507      	bpl.n	800d810 <__smakebuf_r+0x1c>
 800d800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	6123      	str	r3, [r4, #16]
 800d808:	2301      	movs	r3, #1
 800d80a:	6163      	str	r3, [r4, #20]
 800d80c:	b003      	add	sp, #12
 800d80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d810:	ab01      	add	r3, sp, #4
 800d812:	466a      	mov	r2, sp
 800d814:	f7ff ffc8 	bl	800d7a8 <__swhatbuf_r>
 800d818:	9f00      	ldr	r7, [sp, #0]
 800d81a:	4605      	mov	r5, r0
 800d81c:	4639      	mov	r1, r7
 800d81e:	4630      	mov	r0, r6
 800d820:	f7ff fa64 	bl	800ccec <_malloc_r>
 800d824:	b948      	cbnz	r0, 800d83a <__smakebuf_r+0x46>
 800d826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d82a:	059a      	lsls	r2, r3, #22
 800d82c:	d4ee      	bmi.n	800d80c <__smakebuf_r+0x18>
 800d82e:	f023 0303 	bic.w	r3, r3, #3
 800d832:	f043 0302 	orr.w	r3, r3, #2
 800d836:	81a3      	strh	r3, [r4, #12]
 800d838:	e7e2      	b.n	800d800 <__smakebuf_r+0xc>
 800d83a:	89a3      	ldrh	r3, [r4, #12]
 800d83c:	6020      	str	r0, [r4, #0]
 800d83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d842:	81a3      	strh	r3, [r4, #12]
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d84a:	b15b      	cbz	r3, 800d864 <__smakebuf_r+0x70>
 800d84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d850:	4630      	mov	r0, r6
 800d852:	f000 f837 	bl	800d8c4 <_isatty_r>
 800d856:	b128      	cbz	r0, 800d864 <__smakebuf_r+0x70>
 800d858:	89a3      	ldrh	r3, [r4, #12]
 800d85a:	f023 0303 	bic.w	r3, r3, #3
 800d85e:	f043 0301 	orr.w	r3, r3, #1
 800d862:	81a3      	strh	r3, [r4, #12]
 800d864:	89a3      	ldrh	r3, [r4, #12]
 800d866:	431d      	orrs	r5, r3
 800d868:	81a5      	strh	r5, [r4, #12]
 800d86a:	e7cf      	b.n	800d80c <__smakebuf_r+0x18>

0800d86c <memmove>:
 800d86c:	4288      	cmp	r0, r1
 800d86e:	b510      	push	{r4, lr}
 800d870:	eb01 0402 	add.w	r4, r1, r2
 800d874:	d902      	bls.n	800d87c <memmove+0x10>
 800d876:	4284      	cmp	r4, r0
 800d878:	4623      	mov	r3, r4
 800d87a:	d807      	bhi.n	800d88c <memmove+0x20>
 800d87c:	1e43      	subs	r3, r0, #1
 800d87e:	42a1      	cmp	r1, r4
 800d880:	d008      	beq.n	800d894 <memmove+0x28>
 800d882:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d88a:	e7f8      	b.n	800d87e <memmove+0x12>
 800d88c:	4402      	add	r2, r0
 800d88e:	4601      	mov	r1, r0
 800d890:	428a      	cmp	r2, r1
 800d892:	d100      	bne.n	800d896 <memmove+0x2a>
 800d894:	bd10      	pop	{r4, pc}
 800d896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d89a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d89e:	e7f7      	b.n	800d890 <memmove+0x24>

0800d8a0 <_fstat_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4d07      	ldr	r5, [pc, #28]	@ (800d8c0 <_fstat_r+0x20>)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	602b      	str	r3, [r5, #0]
 800d8ae:	f7f4 f930 	bl	8001b12 <_fstat>
 800d8b2:	1c43      	adds	r3, r0, #1
 800d8b4:	d102      	bne.n	800d8bc <_fstat_r+0x1c>
 800d8b6:	682b      	ldr	r3, [r5, #0]
 800d8b8:	b103      	cbz	r3, 800d8bc <_fstat_r+0x1c>
 800d8ba:	6023      	str	r3, [r4, #0]
 800d8bc:	bd38      	pop	{r3, r4, r5, pc}
 800d8be:	bf00      	nop
 800d8c0:	20005f48 	.word	0x20005f48

0800d8c4 <_isatty_r>:
 800d8c4:	b538      	push	{r3, r4, r5, lr}
 800d8c6:	4d06      	ldr	r5, [pc, #24]	@ (800d8e0 <_isatty_r+0x1c>)
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	4608      	mov	r0, r1
 800d8ce:	602b      	str	r3, [r5, #0]
 800d8d0:	f7f4 f92f 	bl	8001b32 <_isatty>
 800d8d4:	1c43      	adds	r3, r0, #1
 800d8d6:	d102      	bne.n	800d8de <_isatty_r+0x1a>
 800d8d8:	682b      	ldr	r3, [r5, #0]
 800d8da:	b103      	cbz	r3, 800d8de <_isatty_r+0x1a>
 800d8dc:	6023      	str	r3, [r4, #0]
 800d8de:	bd38      	pop	{r3, r4, r5, pc}
 800d8e0:	20005f48 	.word	0x20005f48

0800d8e4 <_sbrk_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d06      	ldr	r5, [pc, #24]	@ (800d900 <_sbrk_r+0x1c>)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	602b      	str	r3, [r5, #0]
 800d8f0:	f7f4 f938 	bl	8001b64 <_sbrk>
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	d102      	bne.n	800d8fe <_sbrk_r+0x1a>
 800d8f8:	682b      	ldr	r3, [r5, #0]
 800d8fa:	b103      	cbz	r3, 800d8fe <_sbrk_r+0x1a>
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	20005f48 	.word	0x20005f48

0800d904 <_realloc_r>:
 800d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d908:	4607      	mov	r7, r0
 800d90a:	4614      	mov	r4, r2
 800d90c:	460d      	mov	r5, r1
 800d90e:	b921      	cbnz	r1, 800d91a <_realloc_r+0x16>
 800d910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d914:	4611      	mov	r1, r2
 800d916:	f7ff b9e9 	b.w	800ccec <_malloc_r>
 800d91a:	b92a      	cbnz	r2, 800d928 <_realloc_r+0x24>
 800d91c:	f7ff f97a 	bl	800cc14 <_free_r>
 800d920:	4625      	mov	r5, r4
 800d922:	4628      	mov	r0, r5
 800d924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d928:	f000 f81a 	bl	800d960 <_malloc_usable_size_r>
 800d92c:	4284      	cmp	r4, r0
 800d92e:	4606      	mov	r6, r0
 800d930:	d802      	bhi.n	800d938 <_realloc_r+0x34>
 800d932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d936:	d8f4      	bhi.n	800d922 <_realloc_r+0x1e>
 800d938:	4621      	mov	r1, r4
 800d93a:	4638      	mov	r0, r7
 800d93c:	f7ff f9d6 	bl	800ccec <_malloc_r>
 800d940:	4680      	mov	r8, r0
 800d942:	b908      	cbnz	r0, 800d948 <_realloc_r+0x44>
 800d944:	4645      	mov	r5, r8
 800d946:	e7ec      	b.n	800d922 <_realloc_r+0x1e>
 800d948:	42b4      	cmp	r4, r6
 800d94a:	4622      	mov	r2, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	bf28      	it	cs
 800d950:	4632      	movcs	r2, r6
 800d952:	f7ff f950 	bl	800cbf6 <memcpy>
 800d956:	4629      	mov	r1, r5
 800d958:	4638      	mov	r0, r7
 800d95a:	f7ff f95b 	bl	800cc14 <_free_r>
 800d95e:	e7f1      	b.n	800d944 <_realloc_r+0x40>

0800d960 <_malloc_usable_size_r>:
 800d960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d964:	1f18      	subs	r0, r3, #4
 800d966:	2b00      	cmp	r3, #0
 800d968:	bfbc      	itt	lt
 800d96a:	580b      	ldrlt	r3, [r1, r0]
 800d96c:	18c0      	addlt	r0, r0, r3
 800d96e:	4770      	bx	lr

0800d970 <_init>:
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	bf00      	nop
 800d974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d976:	bc08      	pop	{r3}
 800d978:	469e      	mov	lr, r3
 800d97a:	4770      	bx	lr

0800d97c <_fini>:
 800d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97e:	bf00      	nop
 800d980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d982:	bc08      	pop	{r3}
 800d984:	469e      	mov	lr, r3
 800d986:	4770      	bx	lr
